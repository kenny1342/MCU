CCS PCM C Compiler, Version 4.013, 28193               22-okt-07 12:20

               Filename: \\192.168.30.13\storage\Elektronikk\PIC\badevifte\badevifte3.6.lst

               ROM used: 4275 words (52%)
                         Largest free fragment is 2048
               RAM used: 31 (8%) at main() level
                         122 (33%) worst case
               Stack:    6 worst case (5 in main + 1 for interrupts)

*
0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   087
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   030
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   27,W
0028:  MOVWF  7B
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   165
.................... /** 
.................... Datastyring for baderomsvifte, basert på relativ luftfuktighet (HIH3610 sensor) og temperatur (NTC sensor). 
....................  
.................... Ken-Roger Andersen Oktober 2007 <ken.roger@gmail.com> 
....................  
.................... TODO: vXX: La til modus DELAYED 
.................... v3.10: div bugfix av 3.9 features... 
.................... v3.9: La inn blink av ON i display når manual ON, div bugfix 
.................... v3.8: Justert NTC_RN fra 1000 til 932 (viste ca 2 grader for mye). 
.................... v3.7: Lagt til jumper RH grense default eller høy (default + 10%) 
.................... v3.6: Cleanup i source koden 
.................... v3.5: Funksjon for reboot når knappen holdes inne > 3,9 sekunder 
.................... v2.3: Lagt inn ny B verdi for NTC. Flytting handling av knappen til "slipp opp" istedet for trykk. 
.................... v2.2: Lagt inn temperatur sensor (NTC 1k@25°C) + menyvalget for visning av settings 
.................... v1.5: Fjernet OK knappen for valg av modus. Modus velges kun med 1 knapp, den øker sekvensielt for hvert trykk til denne modusen. 
.................... v1.0: Proof of concept, bygging og feilsøking av hardware 
....................  
.................... Datasheets: 
.................... hih3610.pdf 
.................... PIC16F87X.pdf 
.................... HD44780.pdf 
.................... */ 
....................  
.................... #include <16F876.H> 
.................... //////// Standard Header file for the PIC16F876 device //////////////// 
.................... #device PIC16F876 
.................... #list 
....................  
....................  
.................... #device ADC=10 
....................  
.................... #include <kenny.h>	// my constants used in all projects 
.................... #case 
....................  
.................... #ifndef TRUE 
.................... #define TRUE 1 
.................... #endif 
....................  
.................... #ifndef FALSE 
.................... #define FALSE 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO 0 
.................... #endif 
....................  
.................... #ifndef HIGH 
.................... #define HIGH 1 
.................... #endif 
....................  
.................... #ifndef LOW 
.................... #define LOW 0 
.................... #endif 
....................  
.................... #ifndef ON 
.................... #define ON 1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef UP 
.................... #define UP 1 
.................... #endif 
....................  
.................... #ifndef DOWN 
.................... #define DOWN 0 
.................... #endif 
....................  
.................... #ifndef UCHAR 
.................... #define UCHAR char 
.................... #endif 
....................  
.................... #ifndef UINT 
.................... #define UINT long 
.................... #endif 
....................  
.................... #ifndef BIT 
.................... #define BIT short 
.................... #endif 
....................  
.................... #ifndef SCHAR 
.................... #define SCHAR signed int 
.................... #endif 
....................  
.................... #ifndef SINT 
.................... #define SINT signed long 
.................... #endif 
....................  
.................... #ifndef FLOAT 
.................... #define FLOAT float 
.................... #endif 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.141592654 
....................  
....................  
.................... #define SQRT2  1.41421356 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float CEIL_FLOOR(float x, int n) 
.................... { 
....................    float y, res; 
....................    long l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float)(long)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (long)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float)l); 
....................   res = 32768.0*(float)l; 
....................   res += (float)(long)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float)(long)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float floor(float x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float ceil(float x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //	float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float x,float y) 
.................... { 
....................    float i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
....................  
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
....................  
.................... #define LN2 0.6931471806 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... float exp(float x) 
.................... { 
....................    float y, res, r; 
....................    signed int n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed long)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................    *(&res) = n + 0x7F; 
....................  
....................    y = y/LN2 - (float)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... /************************************************************/ 
....................  
.................... float const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float log(float x) 
.................... { 
....................    float y, res, r, y2; 
....................    signed n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
08FD:  MOVF   61,W
08FE:  MOVWF  65
08FF:  MOVF   60,W
0900:  MOVWF  64
0901:  MOVF   5F,W
0902:  MOVWF  63
0903:  MOVF   5E,W
0904:  MOVWF  62
....................  
....................    if (y != 1.0) 
0905:  MOVF   65,W
0906:  MOVWF  76
0907:  MOVF   64,W
0908:  MOVWF  75
0909:  MOVF   63,W
090A:  MOVWF  74
090B:  MOVF   62,W
090C:  MOVWF  73
090D:  BSF    03.5
090E:  CLRF   23
090F:  CLRF   22
0910:  CLRF   21
0911:  MOVLW  7F
0912:  MOVWF  20
0913:  BCF    0A.3
0914:  BCF    03.5
0915:  CALL   5FD
0916:  BSF    0A.3
0917:  BTFSC  03.2
0918:  GOTO   3C0
....................    { 
....................       *(&y) = 0x7E; 
0919:  CLRF   7A
091A:  MOVLW  62
091B:  MOVWF  04
091C:  BCF    03.7
091D:  BTFSC  7A.0
091E:  BSF    03.7
091F:  MOVLW  7E
0920:  MOVWF  00
....................  
....................       y = (y - 1.0)/(y + 1.0); 
0921:  BSF    03.1
0922:  MOVF   65,W
0923:  BSF    03.5
0924:  MOVWF  23
0925:  BCF    03.5
0926:  MOVF   64,W
0927:  BSF    03.5
0928:  MOVWF  22
0929:  BCF    03.5
092A:  MOVF   63,W
092B:  BSF    03.5
092C:  MOVWF  21
092D:  BCF    03.5
092E:  MOVF   62,W
092F:  BSF    03.5
0930:  MOVWF  20
0931:  CLRF   27
0932:  CLRF   26
0933:  CLRF   25
0934:  MOVLW  7F
0935:  MOVWF  24
0936:  BCF    0A.3
0937:  BCF    03.5
0938:  CALL   3DF
0939:  BSF    0A.3
093A:  MOVF   77,W
093B:  MOVWF  73
093C:  MOVF   78,W
093D:  MOVWF  74
093E:  MOVF   79,W
093F:  MOVWF  75
0940:  MOVF   7A,W
0941:  MOVWF  76
0942:  BCF    03.1
0943:  MOVF   65,W
0944:  BSF    03.5
0945:  MOVWF  23
0946:  BCF    03.5
0947:  MOVF   64,W
0948:  BSF    03.5
0949:  MOVWF  22
094A:  BCF    03.5
094B:  MOVF   63,W
094C:  BSF    03.5
094D:  MOVWF  21
094E:  BCF    03.5
094F:  MOVF   62,W
0950:  BSF    03.5
0951:  MOVWF  20
0952:  CLRF   27
0953:  CLRF   26
0954:  CLRF   25
0955:  MOVLW  7F
0956:  MOVWF  24
0957:  BCF    0A.3
0958:  BCF    03.5
0959:  CALL   3DF
095A:  BSF    0A.3
095B:  MOVF   76,W
095C:  BSF    03.5
095D:  MOVWF  23
095E:  MOVF   75,W
095F:  MOVWF  22
0960:  MOVF   74,W
0961:  MOVWF  21
0962:  MOVF   73,W
0963:  MOVWF  20
0964:  MOVF   7A,W
0965:  MOVWF  27
0966:  MOVF   79,W
0967:  MOVWF  26
0968:  MOVF   78,W
0969:  MOVWF  25
096A:  MOVF   77,W
096B:  MOVWF  24
096C:  BCF    0A.3
096D:  BCF    03.5
096E:  CALL   28D
096F:  BSF    0A.3
0970:  MOVF   7A,W
0971:  MOVWF  65
0972:  MOVF   79,W
0973:  MOVWF  64
0974:  MOVF   78,W
0975:  MOVWF  63
0976:  MOVF   77,W
0977:  MOVWF  62
....................  
....................       y2=y*y; 
0978:  MOVF   65,W
0979:  MOVWF  76
097A:  MOVF   64,W
097B:  MOVWF  75
097C:  MOVF   63,W
097D:  MOVWF  74
097E:  MOVF   62,W
097F:  MOVWF  73
0980:  MOVF   65,W
0981:  BSF    03.5
0982:  MOVWF  23
0983:  BCF    03.5
0984:  MOVF   64,W
0985:  BSF    03.5
0986:  MOVWF  22
0987:  BCF    03.5
0988:  MOVF   63,W
0989:  BSF    03.5
098A:  MOVWF  21
098B:  BCF    03.5
098C:  MOVF   62,W
098D:  BSF    03.5
098E:  MOVWF  20
098F:  BCF    0A.3
0990:  BCF    03.5
0991:  CALL   359
0992:  BSF    0A.3
0993:  MOVF   7A,W
0994:  MOVWF  71
0995:  MOVF   79,W
0996:  MOVWF  70
0997:  MOVF   78,W
0998:  MOVWF  6F
0999:  MOVF   77,W
099A:  MOVWF  6E
....................  
....................       res = pl[0]*y2 + pl[1]; 
099B:  MOVLW  BC
099C:  MOVWF  76
099D:  MOVLW  24
099E:  MOVWF  75
099F:  MOVLW  67
09A0:  MOVWF  74
09A1:  MOVLW  7D
09A2:  MOVWF  73
09A3:  MOVF   71,W
09A4:  BSF    03.5
09A5:  MOVWF  23
09A6:  MOVF   70,W
09A7:  MOVWF  22
09A8:  BCF    03.5
09A9:  MOVF   6F,W
09AA:  BSF    03.5
09AB:  MOVWF  21
09AC:  BCF    03.5
09AD:  MOVF   6E,W
09AE:  BSF    03.5
09AF:  MOVWF  20
09B0:  BCF    0A.3
09B1:  BCF    03.5
09B2:  CALL   359
09B3:  BSF    0A.3
09B4:  MOVF   77,W
09B5:  MOVWF  73
09B6:  MOVF   78,W
09B7:  MOVWF  74
09B8:  MOVF   79,W
09B9:  MOVWF  75
09BA:  MOVF   7A,W
09BB:  MOVWF  76
09BC:  BCF    03.1
09BD:  MOVF   7A,W
09BE:  BSF    03.5
09BF:  MOVWF  23
09C0:  MOVF   79,W
09C1:  MOVWF  22
09C2:  MOVF   78,W
09C3:  MOVWF  21
09C4:  MOVF   77,W
09C5:  MOVWF  20
09C6:  MOVLW  E3
09C7:  MOVWF  27
09C8:  MOVLW  E4
09C9:  MOVWF  26
09CA:  MOVLW  90
09CB:  MOVWF  25
09CC:  MOVLW  82
09CD:  MOVWF  24
09CE:  BCF    0A.3
09CF:  BCF    03.5
09D0:  CALL   3DF
09D1:  BSF    0A.3
09D2:  MOVF   7A,W
09D3:  MOVWF  69
09D4:  MOVF   79,W
09D5:  MOVWF  68
09D6:  MOVF   78,W
09D7:  MOVWF  67
09D8:  MOVF   77,W
09D9:  MOVWF  66
....................       res = res*y2 + pl[2]; 
09DA:  MOVF   69,W
09DB:  MOVWF  76
09DC:  MOVF   68,W
09DD:  MOVWF  75
09DE:  MOVF   67,W
09DF:  MOVWF  74
09E0:  MOVF   66,W
09E1:  MOVWF  73
09E2:  MOVF   71,W
09E3:  BSF    03.5
09E4:  MOVWF  23
09E5:  MOVF   70,W
09E6:  MOVWF  22
09E7:  BCF    03.5
09E8:  MOVF   6F,W
09E9:  BSF    03.5
09EA:  MOVWF  21
09EB:  BCF    03.5
09EC:  MOVF   6E,W
09ED:  BSF    03.5
09EE:  MOVWF  20
09EF:  BCF    0A.3
09F0:  BCF    03.5
09F1:  CALL   359
09F2:  BSF    0A.3
09F3:  MOVF   77,W
09F4:  MOVWF  73
09F5:  MOVF   78,W
09F6:  MOVWF  74
09F7:  MOVF   79,W
09F8:  MOVWF  75
09F9:  MOVF   7A,W
09FA:  MOVWF  76
09FB:  BCF    03.1
09FC:  MOVF   7A,W
09FD:  BSF    03.5
09FE:  MOVWF  23
09FF:  MOVF   79,W
0A00:  MOVWF  22
0A01:  MOVF   78,W
0A02:  MOVWF  21
0A03:  MOVF   77,W
0A04:  MOVWF  20
0A05:  MOVLW  1C
0A06:  MOVWF  27
0A07:  MOVLW  87
0A08:  MOVWF  26
0A09:  MOVLW  57
0A0A:  MOVWF  25
0A0B:  MOVLW  83
0A0C:  MOVWF  24
0A0D:  BCF    0A.3
0A0E:  BCF    03.5
0A0F:  CALL   3DF
0A10:  BSF    0A.3
0A11:  MOVF   7A,W
0A12:  MOVWF  69
0A13:  MOVF   79,W
0A14:  MOVWF  68
0A15:  MOVF   78,W
0A16:  MOVWF  67
0A17:  MOVF   77,W
0A18:  MOVWF  66
....................       res = res*y2 + pl[3]; 
0A19:  MOVF   69,W
0A1A:  MOVWF  76
0A1B:  MOVF   68,W
0A1C:  MOVWF  75
0A1D:  MOVF   67,W
0A1E:  MOVWF  74
0A1F:  MOVF   66,W
0A20:  MOVWF  73
0A21:  MOVF   71,W
0A22:  BSF    03.5
0A23:  MOVWF  23
0A24:  MOVF   70,W
0A25:  MOVWF  22
0A26:  BCF    03.5
0A27:  MOVF   6F,W
0A28:  BSF    03.5
0A29:  MOVWF  21
0A2A:  BCF    03.5
0A2B:  MOVF   6E,W
0A2C:  BSF    03.5
0A2D:  MOVWF  20
0A2E:  BCF    0A.3
0A2F:  BCF    03.5
0A30:  CALL   359
0A31:  BSF    0A.3
0A32:  MOVF   77,W
0A33:  MOVWF  73
0A34:  MOVF   78,W
0A35:  MOVWF  74
0A36:  MOVF   79,W
0A37:  MOVWF  75
0A38:  MOVF   7A,W
0A39:  MOVWF  76
0A3A:  BCF    03.1
0A3B:  MOVF   7A,W
0A3C:  BSF    03.5
0A3D:  MOVWF  23
0A3E:  MOVF   79,W
0A3F:  MOVWF  22
0A40:  MOVF   78,W
0A41:  MOVWF  21
0A42:  MOVF   77,W
0A43:  MOVWF  20
0A44:  MOVLW  AB
0A45:  MOVWF  27
0A46:  MOVLW  E1
0A47:  MOVWF  26
0A48:  MOVLW  9E
0A49:  MOVWF  25
0A4A:  MOVLW  83
0A4B:  MOVWF  24
0A4C:  BCF    0A.3
0A4D:  BCF    03.5
0A4E:  CALL   3DF
0A4F:  BSF    0A.3
0A50:  MOVF   7A,W
0A51:  MOVWF  69
0A52:  MOVF   79,W
0A53:  MOVWF  68
0A54:  MOVF   78,W
0A55:  MOVWF  67
0A56:  MOVF   77,W
0A57:  MOVWF  66
....................  
....................       r = ql[0]*y2 + ql[1]; 
0A58:  CLRF   76
0A59:  CLRF   75
0A5A:  CLRF   74
0A5B:  MOVLW  7F
0A5C:  MOVWF  73
0A5D:  MOVF   71,W
0A5E:  BSF    03.5
0A5F:  MOVWF  23
0A60:  MOVF   70,W
0A61:  MOVWF  22
0A62:  BCF    03.5
0A63:  MOVF   6F,W
0A64:  BSF    03.5
0A65:  MOVWF  21
0A66:  BCF    03.5
0A67:  MOVF   6E,W
0A68:  BSF    03.5
0A69:  MOVWF  20
0A6A:  BCF    0A.3
0A6B:  BCF    03.5
0A6C:  CALL   359
0A6D:  BSF    0A.3
0A6E:  MOVF   77,W
0A6F:  MOVWF  73
0A70:  MOVF   78,W
0A71:  MOVWF  74
0A72:  MOVF   79,W
0A73:  MOVWF  75
0A74:  MOVF   7A,W
0A75:  MOVWF  76
0A76:  BCF    03.1
0A77:  MOVF   7A,W
0A78:  BSF    03.5
0A79:  MOVWF  23
0A7A:  MOVF   79,W
0A7B:  MOVWF  22
0A7C:  MOVF   78,W
0A7D:  MOVWF  21
0A7E:  MOVF   77,W
0A7F:  MOVWF  20
0A80:  MOVLW  B4
0A81:  MOVWF  27
0A82:  MOVLW  2A
0A83:  MOVWF  26
0A84:  MOVLW  82
0A85:  MOVWF  25
0A86:  MOVWF  24
0A87:  BCF    0A.3
0A88:  BCF    03.5
0A89:  CALL   3DF
0A8A:  BSF    0A.3
0A8B:  MOVF   7A,W
0A8C:  MOVWF  6D
0A8D:  MOVF   79,W
0A8E:  MOVWF  6C
0A8F:  MOVF   78,W
0A90:  MOVWF  6B
0A91:  MOVF   77,W
0A92:  MOVWF  6A
....................       r = r*y2 + ql[2]; 
0A93:  MOVF   6D,W
0A94:  MOVWF  76
0A95:  MOVF   6C,W
0A96:  MOVWF  75
0A97:  MOVF   6B,W
0A98:  MOVWF  74
0A99:  MOVF   6A,W
0A9A:  MOVWF  73
0A9B:  MOVF   71,W
0A9C:  BSF    03.5
0A9D:  MOVWF  23
0A9E:  MOVF   70,W
0A9F:  MOVWF  22
0AA0:  BCF    03.5
0AA1:  MOVF   6F,W
0AA2:  BSF    03.5
0AA3:  MOVWF  21
0AA4:  BCF    03.5
0AA5:  MOVF   6E,W
0AA6:  BSF    03.5
0AA7:  MOVWF  20
0AA8:  BCF    0A.3
0AA9:  BCF    03.5
0AAA:  CALL   359
0AAB:  BSF    0A.3
0AAC:  MOVF   77,W
0AAD:  MOVWF  73
0AAE:  MOVF   78,W
0AAF:  MOVWF  74
0AB0:  MOVF   79,W
0AB1:  MOVWF  75
0AB2:  MOVF   7A,W
0AB3:  MOVWF  76
0AB4:  BCF    03.1
0AB5:  MOVF   7A,W
0AB6:  BSF    03.5
0AB7:  MOVWF  23
0AB8:  MOVF   79,W
0AB9:  MOVWF  22
0ABA:  MOVF   78,W
0ABB:  MOVWF  21
0ABC:  MOVF   77,W
0ABD:  MOVWF  20
0ABE:  MOVLW  80
0ABF:  MOVWF  27
0AC0:  MOVLW  3E
0AC1:  MOVWF  26
0AC2:  MOVLW  06
0AC3:  MOVWF  25
0AC4:  MOVLW  83
0AC5:  MOVWF  24
0AC6:  BCF    0A.3
0AC7:  BCF    03.5
0AC8:  CALL   3DF
0AC9:  BSF    0A.3
0ACA:  MOVF   7A,W
0ACB:  MOVWF  6D
0ACC:  MOVF   79,W
0ACD:  MOVWF  6C
0ACE:  MOVF   78,W
0ACF:  MOVWF  6B
0AD0:  MOVF   77,W
0AD1:  MOVWF  6A
....................       r = r*y2 + ql[3]; 
0AD2:  MOVF   6D,W
0AD3:  MOVWF  76
0AD4:  MOVF   6C,W
0AD5:  MOVWF  75
0AD6:  MOVF   6B,W
0AD7:  MOVWF  74
0AD8:  MOVF   6A,W
0AD9:  MOVWF  73
0ADA:  MOVF   71,W
0ADB:  BSF    03.5
0ADC:  MOVWF  23
0ADD:  MOVF   70,W
0ADE:  MOVWF  22
0ADF:  BCF    03.5
0AE0:  MOVF   6F,W
0AE1:  BSF    03.5
0AE2:  MOVWF  21
0AE3:  BCF    03.5
0AE4:  MOVF   6E,W
0AE5:  BSF    03.5
0AE6:  MOVWF  20
0AE7:  BCF    0A.3
0AE8:  BCF    03.5
0AE9:  CALL   359
0AEA:  BSF    0A.3
0AEB:  MOVF   77,W
0AEC:  MOVWF  73
0AED:  MOVF   78,W
0AEE:  MOVWF  74
0AEF:  MOVF   79,W
0AF0:  MOVWF  75
0AF1:  MOVF   7A,W
0AF2:  MOVWF  76
0AF3:  BCF    03.1
0AF4:  MOVF   7A,W
0AF5:  BSF    03.5
0AF6:  MOVWF  23
0AF7:  MOVF   79,W
0AF8:  MOVWF  22
0AF9:  MOVF   78,W
0AFA:  MOVWF  21
0AFB:  MOVF   77,W
0AFC:  MOVWF  20
0AFD:  MOVLW  AB
0AFE:  MOVWF  27
0AFF:  MOVLW  E1
0B00:  MOVWF  26
0B01:  MOVLW  9E
0B02:  MOVWF  25
0B03:  MOVLW  82
0B04:  MOVWF  24
0B05:  BCF    0A.3
0B06:  BCF    03.5
0B07:  CALL   3DF
0B08:  BSF    0A.3
0B09:  MOVF   7A,W
0B0A:  MOVWF  6D
0B0B:  MOVF   79,W
0B0C:  MOVWF  6C
0B0D:  MOVF   78,W
0B0E:  MOVWF  6B
0B0F:  MOVF   77,W
0B10:  MOVWF  6A
....................  
....................       res = y*res/r; 
0B11:  MOVF   65,W
0B12:  MOVWF  76
0B13:  MOVF   64,W
0B14:  MOVWF  75
0B15:  MOVF   63,W
0B16:  MOVWF  74
0B17:  MOVF   62,W
0B18:  MOVWF  73
0B19:  MOVF   69,W
0B1A:  BSF    03.5
0B1B:  MOVWF  23
0B1C:  BCF    03.5
0B1D:  MOVF   68,W
0B1E:  BSF    03.5
0B1F:  MOVWF  22
0B20:  BCF    03.5
0B21:  MOVF   67,W
0B22:  BSF    03.5
0B23:  MOVWF  21
0B24:  BCF    03.5
0B25:  MOVF   66,W
0B26:  BSF    03.5
0B27:  MOVWF  20
0B28:  BCF    0A.3
0B29:  BCF    03.5
0B2A:  CALL   359
0B2B:  BSF    0A.3
0B2C:  MOVF   77,W
0B2D:  MOVWF  73
0B2E:  MOVF   78,W
0B2F:  MOVWF  74
0B30:  MOVF   79,W
0B31:  MOVWF  75
0B32:  MOVF   7A,W
0B33:  MOVWF  76
0B34:  BSF    03.5
0B35:  MOVWF  23
0B36:  MOVF   79,W
0B37:  MOVWF  22
0B38:  MOVF   78,W
0B39:  MOVWF  21
0B3A:  MOVF   77,W
0B3B:  MOVWF  20
0B3C:  BCF    03.5
0B3D:  MOVF   6D,W
0B3E:  BSF    03.5
0B3F:  MOVWF  27
0B40:  BCF    03.5
0B41:  MOVF   6C,W
0B42:  BSF    03.5
0B43:  MOVWF  26
0B44:  BCF    03.5
0B45:  MOVF   6B,W
0B46:  BSF    03.5
0B47:  MOVWF  25
0B48:  BCF    03.5
0B49:  MOVF   6A,W
0B4A:  BSF    03.5
0B4B:  MOVWF  24
0B4C:  BCF    0A.3
0B4D:  BCF    03.5
0B4E:  CALL   28D
0B4F:  BSF    0A.3
0B50:  MOVF   7A,W
0B51:  MOVWF  69
0B52:  MOVF   79,W
0B53:  MOVWF  68
0B54:  MOVF   78,W
0B55:  MOVWF  67
0B56:  MOVF   77,W
0B57:  MOVWF  66
....................  
....................       n = *(&x) - 0x7E; 
0B58:  CLRF   7A
0B59:  MOVLW  5E
0B5A:  MOVWF  04
0B5B:  BCF    03.7
0B5C:  BTFSC  7A.0
0B5D:  BSF    03.7
0B5E:  MOVLW  7E
0B5F:  SUBWF  00,W
0B60:  MOVWF  72
....................  
....................       if (n<0) 
0B61:  BTFSS  72.7
0B62:  GOTO   376
....................          r = -(float)-n; 
0B63:  MOVF   72,W
0B64:  SUBLW  00
0B65:  CLRF   74
0B66:  MOVWF  73
0B67:  BTFSC  73.7
0B68:  DECF   74,F
0B69:  BCF    0A.3
0B6A:  CALL   76D
0B6B:  BSF    0A.3
0B6C:  MOVF   77,W
0B6D:  MOVWF  6A
0B6E:  MOVF   78,W
0B6F:  XORLW  80
0B70:  MOVWF  6B
0B71:  MOVF   79,W
0B72:  MOVWF  6C
0B73:  MOVF   7A,W
0B74:  MOVWF  6D
....................       else 
0B75:  GOTO   386
....................          r = (float)n; 
0B76:  CLRF   74
0B77:  MOVF   72,W
0B78:  MOVWF  73
0B79:  BTFSC  73.7
0B7A:  DECF   74,F
0B7B:  BCF    0A.3
0B7C:  CALL   76D
0B7D:  BSF    0A.3
0B7E:  MOVF   7A,W
0B7F:  MOVWF  6D
0B80:  MOVF   79,W
0B81:  MOVWF  6C
0B82:  MOVF   78,W
0B83:  MOVWF  6B
0B84:  MOVF   77,W
0B85:  MOVWF  6A
....................  
....................       res += r*LN2; 
0B86:  MOVF   6D,W
0B87:  MOVWF  76
0B88:  MOVF   6C,W
0B89:  MOVWF  75
0B8A:  MOVF   6B,W
0B8B:  MOVWF  74
0B8C:  MOVF   6A,W
0B8D:  MOVWF  73
0B8E:  MOVLW  18
0B8F:  BSF    03.5
0B90:  MOVWF  23
0B91:  MOVLW  72
0B92:  MOVWF  22
0B93:  MOVLW  31
0B94:  MOVWF  21
0B95:  MOVLW  7E
0B96:  MOVWF  20
0B97:  BCF    0A.3
0B98:  BCF    03.5
0B99:  CALL   359
0B9A:  BSF    0A.3
0B9B:  BCF    03.1
0B9C:  MOVF   69,W
0B9D:  BSF    03.5
0B9E:  MOVWF  23
0B9F:  BCF    03.5
0BA0:  MOVF   68,W
0BA1:  BSF    03.5
0BA2:  MOVWF  22
0BA3:  BCF    03.5
0BA4:  MOVF   67,W
0BA5:  BSF    03.5
0BA6:  MOVWF  21
0BA7:  BCF    03.5
0BA8:  MOVF   66,W
0BA9:  BSF    03.5
0BAA:  MOVWF  20
0BAB:  MOVF   7A,W
0BAC:  MOVWF  27
0BAD:  MOVF   79,W
0BAE:  MOVWF  26
0BAF:  MOVF   78,W
0BB0:  MOVWF  25
0BB1:  MOVF   77,W
0BB2:  MOVWF  24
0BB3:  BCF    0A.3
0BB4:  BCF    03.5
0BB5:  CALL   3DF
0BB6:  BSF    0A.3
0BB7:  MOVF   7A,W
0BB8:  MOVWF  69
0BB9:  MOVF   79,W
0BBA:  MOVWF  68
0BBB:  MOVF   78,W
0BBC:  MOVWF  67
0BBD:  MOVF   77,W
0BBE:  MOVWF  66
....................    } 
....................  
....................    else 
0BBF:  GOTO   3C4
....................       res = 0.0; 
0BC0:  CLRF   69
0BC1:  CLRF   68
0BC2:  CLRF   67
0BC3:  CLRF   66
....................  
....................    return(res); 
0BC4:  MOVF   66,W
0BC5:  MOVWF  77
0BC6:  MOVF   67,W
0BC7:  MOVWF  78
0BC8:  MOVF   68,W
0BC9:  MOVWF  79
0BCA:  MOVF   69,W
0BCB:  MOVWF  7A
.................... } 
....................  
.................... #define LN10 2.30258509 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float log10(float x) 
.................... { 
....................    float r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float modf(float value,float *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float pwr(float x,float y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float pow(float x,float y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float sqrt(float x) 
.................... { 
....................    float y, res; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p=&y; 
....................    (*p)=(BYTE)((((int16)(*p)) + 127) >> 1); 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................       (*p)--; 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
....................  
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO	1.570796326794896 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI 			0.6366197724 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float cos(float x) 
.................... { 
.................... 	float y, t, t2 = 1.0; 
.................... 	int quad, i; 
.................... 	float frac; 
.................... 	float p[4] = { 
.................... 		-0.499999993585, 
.................... 		 0.041666636258, 
.................... 		-0.0013888361399, 
.................... 		 0.00002476016134 
.................... 	}; 
....................  
.................... 	if (x < 0) x = -x;                  // absolute value of input 
....................  
.................... 	quad = (int)(x / PI_DIV_BY_TWO);    // quadrant 
.................... 	frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
.................... 	quad = quad % 4;                    // quadrant (0 to 3) 
....................  
.................... 	if (quad == 0 || quad == 2) 
.................... 		t = frac * PI_DIV_BY_TWO; 
.................... 	else if (quad == 1) 
.................... 		t = (1-frac) * PI_DIV_BY_TWO; 
.................... 	else // should be 3 
.................... 		t = (frac-1) * PI_DIV_BY_TWO; 
....................  
.................... 	y = 0.999999999781; 
.................... 	t = t * t; 
.................... 	for (i = 0; i <= 3; i++) 
.................... 	{ 
.................... 		t2 = t2 * t; 
.................... 		y = y + p[i] * t2; 
.................... 	} 
....................  
.................... 	if (quad == 2 || quad == 1) 
.................... 		y = -y;  // correct sign 
....................  
.................... 	return (y); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float sin(float x) 
.................... { 
.................... 	return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float tan(float x) 
.................... { 
....................    float c, s; 
....................  
....................    c = cos(x); 
.................... 	if (c == 0.0) 
.................... 	   return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
....................  
....................  
.................... float const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float ASIN_COS(float x, int n) 
.................... { 
....................    float y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float asin(float x) 
.................... { 
....................    float r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float acos(float x) 
.................... { 
....................    float r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... float const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float atan(float x) 
.................... { 
....................    float y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //	float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
....................  
.................... float atan2(float y,float x) 
.................... { 
....................    float z; 
....................    int1 sign; 
....................    int quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float cosh(float x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float sinh(float x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float tanh(float x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
....................  
....................  
.................... #define LOG2 .30102999566398119521 
.................... float frexp(float x, signed int *exp) 
.................... { 
....................    float res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //	float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float ldexp(float value, signed int exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #include <ntc.h>	// NTC calculations 
.................... /* 
....................  * Written by Kenny 
....................  * 
....................  */ 
.................... float r2temperature(float ohm); 
.................... float adc_2_ohm(int adc_value); 
....................  
.................... // +5V 
.................... // ---+ 
.................... //    # 
.................... //    # 10k constant resistor 
.................... //    |---------> Uadc 
.................... //    # 
.................... //    # ntc 1k 
.................... // ---+ 
.................... // 
....................  
.................... /* All calibrations should be done here if needed. Normally you will 
.................... * only compensate the variance in the value of the 10k resistor and 
.................... * the 1k NTC. The 78L05 has also influence. This all can be adjusted 
.................... * changing NTC_RN a bit. 
.................... */ 
....................  
....................  
.................... /* Constant pullup resistor value */ 
.................... #define NTC_PULLUP_R 9850.0	//calibrated 10k 
....................  
.................... /* 
.................... NTC temperature constant "B"-value: 3977K +/- 1% 
.................... usually between 2000k - 5000k, I don't know the type i'm using, trial and error... 
.................... - see PHP test script in comments under 
.................... */ 
.................... #define NTC_B 3177 
.................... /* NTC datasheet is 1 kOhm at 25 degree celsius */ 
.................... #define NTC_TN 25 
.................... /* 1 kOhm +/- 10%, change for calibration: */ 
.................... #define NTC_RN 950 
....................  
....................  
.................... /* 
.................... PHP script for B value trial and error on a linux box 
....................  
.................... <? 
....................  
.................... $NTC_B=3177; 
.................... $NTC_RN=1000; 
.................... $NTC_TN=25; 
.................... $ohm = $argv[1]; //1000ohm @25, 653ohm @~37.5 (under my arm....) 
....................  
.................... $tmp = ( ( 1/$NTC_B ) * log( ($ohm/$NTC_RN) ) ) + ( 1 / ($NTC_TN+273) ); 
....................  
.................... $c = (1 / $tmp) - 273; 
.................... print "\n$c C\n"; 
.................... ?> 
....................  
.................... */ 
....................  
.................... #include "ntc.c" 
....................  
....................  
.................... /* this function converts the ADC value into an Ohm value of the NTC 
....................  * here AVcc=5V is used as reference voltage 
....................  */ 
.................... float adc_2_ohm(int adc_value) 
.................... { 
.................... 	float ohm; 
....................  
.................... 	// 10bit adc=0..1023 over a voltage range from 0-5V 
.................... 	// Uref=5V = VDD 
.................... 	// 10000 / ( 1024/adc_value  - 1) -> ohm 
.................... 	// 
....................  
.................... 	// ADCval= Uadc * (1024/Uref) 
.................... 	// Rntc= 10K * ( 1 / ((5V/Uadc) -1) ) 
.................... 	if (adc_value < 1){ 
*
0815:  MOVF   4E,F
0816:  BTFSS  03.2
0817:  GOTO   01A
.................... 		// never divide by zero: 
.................... 		adc_value=1; 
0818:  MOVLW  01
0819:  MOVWF  4E
.................... 	} 
.................... 	ohm=NTC_PULLUP_R / (( 1024.0 / adc_value ) - 1 ); 
081A:  CLRF   54
081B:  MOVF   4E,W
081C:  MOVWF  53
081D:  BCF    0A.3
081E:  CALL   270
081F:  BSF    0A.3
0820:  BSF    03.5
0821:  CLRF   23
0822:  CLRF   22
0823:  CLRF   21
0824:  MOVLW  89
0825:  MOVWF  20
0826:  MOVF   7A,W
0827:  MOVWF  27
0828:  MOVF   79,W
0829:  MOVWF  26
082A:  MOVF   78,W
082B:  MOVWF  25
082C:  MOVF   77,W
082D:  MOVWF  24
082E:  BCF    0A.3
082F:  BCF    03.5
0830:  CALL   28D
0831:  BSF    0A.3
0832:  MOVF   77,W
0833:  MOVWF  53
0834:  MOVF   78,W
0835:  MOVWF  54
0836:  MOVF   79,W
0837:  MOVWF  55
0838:  MOVF   7A,W
0839:  MOVWF  56
083A:  BSF    03.1
083B:  MOVF   7A,W
083C:  BSF    03.5
083D:  MOVWF  23
083E:  BCF    03.5
083F:  MOVF   79,W
0840:  BSF    03.5
0841:  MOVWF  22
0842:  BCF    03.5
0843:  MOVF   78,W
0844:  BSF    03.5
0845:  MOVWF  21
0846:  BCF    03.5
0847:  MOVF   77,W
0848:  BSF    03.5
0849:  MOVWF  20
084A:  CLRF   27
084B:  CLRF   26
084C:  CLRF   25
084D:  MOVLW  7F
084E:  MOVWF  24
084F:  BCF    0A.3
0850:  BCF    03.5
0851:  CALL   3DF
0852:  BSF    0A.3
0853:  BSF    03.5
0854:  CLRF   23
0855:  MOVLW  E8
0856:  MOVWF  22
0857:  MOVLW  19
0858:  MOVWF  21
0859:  MOVLW  8C
085A:  MOVWF  20
085B:  MOVF   7A,W
085C:  MOVWF  27
085D:  MOVF   79,W
085E:  MOVWF  26
085F:  MOVF   78,W
0860:  MOVWF  25
0861:  MOVF   77,W
0862:  MOVWF  24
0863:  BCF    0A.3
0864:  BCF    03.5
0865:  CALL   28D
0866:  BSF    0A.3
0867:  MOVF   7A,W
0868:  MOVWF  52
0869:  MOVF   79,W
086A:  MOVWF  51
086B:  MOVF   78,W
086C:  MOVWF  50
086D:  MOVF   77,W
086E:  MOVWF  4F
.................... 	return(ohm); 
086F:  MOVF   4F,W
0870:  MOVWF  77
0871:  MOVF   50,W
0872:  MOVWF  78
0873:  MOVF   51,W
0874:  MOVWF  79
0875:  MOVF   52,W
0876:  MOVWF  7A
.................... } 
....................  
....................  
.................... /* convert a ntc resistance value given in kohm to 
....................  * temperature in celsius. The NTC follows a exponential 
....................  * characteristic. */ 
.................... float r2temperature(float ohm) 
.................... { 
.................... 	float tcelsius; 
.................... 	float tmp; 
....................  
....................  
.................... 	tcelsius = 100; 
*
0887:  CLRF   55
0888:  CLRF   54
0889:  MOVLW  48
088A:  MOVWF  53
088B:  MOVLW  85
088C:  MOVWF  52
.................... 	tmp=1; 
088D:  CLRF   59
088E:  CLRF   58
088F:  CLRF   57
0890:  MOVLW  7F
0891:  MOVWF  56
....................  
.................... 	if ((ohm/NTC_RN) < 0.1){ 
0892:  MOVF   51,W
0893:  BSF    03.5
0894:  MOVWF  23
0895:  BCF    03.5
0896:  MOVF   50,W
0897:  BSF    03.5
0898:  MOVWF  22
0899:  BCF    03.5
089A:  MOVF   4F,W
089B:  BSF    03.5
089C:  MOVWF  21
089D:  BCF    03.5
089E:  MOVF   4E,W
089F:  BSF    03.5
08A0:  MOVWF  20
08A1:  CLRF   27
08A2:  MOVLW  80
08A3:  MOVWF  26
08A4:  MOVLW  6D
08A5:  MOVWF  25
08A6:  MOVLW  88
08A7:  MOVWF  24
08A8:  BCF    0A.3
08A9:  BCF    03.5
08AA:  CALL   28D
08AB:  BSF    0A.3
08AC:  MOVF   77,W
08AD:  MOVWF  5A
08AE:  MOVF   78,W
08AF:  MOVWF  5B
08B0:  MOVF   79,W
08B1:  MOVWF  5C
08B2:  MOVF   7A,W
08B3:  MOVWF  5D
08B4:  MOVWF  76
08B5:  MOVF   5C,W
08B6:  MOVWF  75
08B7:  MOVF   5B,W
08B8:  MOVWF  74
08B9:  MOVF   5A,W
08BA:  MOVWF  73
08BB:  MOVLW  CD
08BC:  BSF    03.5
08BD:  MOVWF  23
08BE:  MOVLW  CC
08BF:  MOVWF  22
08C0:  MOVLW  4C
08C1:  MOVWF  21
08C2:  MOVLW  7B
08C3:  MOVWF  20
08C4:  BCF    0A.3
08C5:  BCF    03.5
08C6:  CALL   5FD
08C7:  BSF    0A.3
08C8:  BTFSS  03.0
08C9:  GOTO   0D3
.................... 		//ERROR: resistance value of NTC is too small (too hot here ;-) 
.................... 		return(tcelsius); 
08CA:  MOVF   52,W
08CB:  MOVWF  77
08CC:  MOVF   53,W
08CD:  MOVWF  78
08CE:  MOVF   54,W
08CF:  MOVWF  79
08D0:  MOVF   55,W
08D1:  MOVWF  7A
08D2:  GOTO   465
.................... 	} 
.................... 	tmp = ( (1.0/NTC_B) * log( (ohm/NTC_RN) ) ) + ( 1 / (NTC_TN+273.0) ); 
08D3:  MOVF   51,W
08D4:  BSF    03.5
08D5:  MOVWF  23
08D6:  BCF    03.5
08D7:  MOVF   50,W
08D8:  BSF    03.5
08D9:  MOVWF  22
08DA:  BCF    03.5
08DB:  MOVF   4F,W
08DC:  BSF    03.5
08DD:  MOVWF  21
08DE:  BCF    03.5
08DF:  MOVF   4E,W
08E0:  BSF    03.5
08E1:  MOVWF  20
08E2:  CLRF   27
08E3:  MOVLW  80
08E4:  MOVWF  26
08E5:  MOVLW  6D
08E6:  MOVWF  25
08E7:  MOVLW  88
08E8:  MOVWF  24
08E9:  BCF    0A.3
08EA:  BCF    03.5
08EB:  CALL   28D
08EC:  BSF    0A.3
08ED:  MOVF   77,W
08EE:  MOVWF  5A
08EF:  MOVF   78,W
08F0:  MOVWF  5B
08F1:  MOVF   79,W
08F2:  MOVWF  5C
08F3:  MOVF   7A,W
08F4:  MOVWF  5D
08F5:  MOVF   5D,W
08F6:  MOVWF  61
08F7:  MOVF   5C,W
08F8:  MOVWF  60
08F9:  MOVF   5B,W
08FA:  MOVWF  5F
08FB:  MOVF   5A,W
08FC:  MOVWF  5E
*
0BCC:  MOVLW  B0
0BCD:  MOVWF  76
0BCE:  MOVLW  06
0BCF:  MOVWF  75
0BD0:  MOVLW  25
0BD1:  MOVWF  74
0BD2:  MOVLW  73
0BD3:  MOVWF  73
0BD4:  MOVF   7A,W
0BD5:  BSF    03.5
0BD6:  MOVWF  23
0BD7:  MOVF   79,W
0BD8:  MOVWF  22
0BD9:  MOVF   78,W
0BDA:  MOVWF  21
0BDB:  MOVF   77,W
0BDC:  MOVWF  20
0BDD:  BCF    0A.3
0BDE:  BCF    03.5
0BDF:  CALL   359
0BE0:  BSF    0A.3
0BE1:  MOVF   77,W
0BE2:  MOVWF  5B
0BE3:  MOVF   78,W
0BE4:  MOVWF  5C
0BE5:  MOVF   79,W
0BE6:  MOVWF  5D
0BE7:  MOVF   7A,W
0BE8:  MOVWF  5E
0BE9:  CLRF   60
0BEA:  MOVF   04,W
0BEB:  MOVWF  5F
0BEC:  BCF    60.0
0BED:  BTFSC  03.7
0BEE:  BSF    60.0
0BEF:  BCF    03.1
0BF0:  MOVF   7A,W
0BF1:  BSF    03.5
0BF2:  MOVWF  23
0BF3:  BCF    03.5
0BF4:  MOVF   79,W
0BF5:  BSF    03.5
0BF6:  MOVWF  22
0BF7:  BCF    03.5
0BF8:  MOVF   78,W
0BF9:  BSF    03.5
0BFA:  MOVWF  21
0BFB:  BCF    03.5
0BFC:  MOVF   77,W
0BFD:  BSF    03.5
0BFE:  MOVWF  20
0BFF:  MOVLW  62
0C00:  MOVWF  27
0C01:  MOVLW  EB
0C02:  MOVWF  26
0C03:  MOVLW  5B
0C04:  MOVWF  25
0C05:  MOVLW  76
0C06:  MOVWF  24
0C07:  BCF    0A.3
0C08:  BCF    03.5
0C09:  CALL   3DF
0C0A:  BSF    0A.3
0C0B:  MOVF   5F,W
0C0C:  MOVWF  04
0C0D:  BCF    03.7
0C0E:  BTFSC  60.0
0C0F:  BSF    03.7
0C10:  MOVF   7A,W
0C11:  MOVWF  59
0C12:  MOVF   79,W
0C13:  MOVWF  58
0C14:  MOVF   78,W
0C15:  MOVWF  57
0C16:  MOVF   77,W
0C17:  MOVWF  56
....................  
.................... 	tcelsius = (float) (1.0/tmp) -273; 
0C18:  BSF    03.5
0C19:  CLRF   23
0C1A:  CLRF   22
0C1B:  CLRF   21
0C1C:  MOVLW  7F
0C1D:  MOVWF  20
0C1E:  BCF    03.5
0C1F:  MOVF   59,W
0C20:  BSF    03.5
0C21:  MOVWF  27
0C22:  BCF    03.5
0C23:  MOVF   58,W
0C24:  BSF    03.5
0C25:  MOVWF  26
0C26:  BCF    03.5
0C27:  MOVF   57,W
0C28:  BSF    03.5
0C29:  MOVWF  25
0C2A:  BCF    03.5
0C2B:  MOVF   56,W
0C2C:  BSF    03.5
0C2D:  MOVWF  24
0C2E:  BCF    0A.3
0C2F:  BCF    03.5
0C30:  CALL   28D
0C31:  BSF    0A.3
0C32:  MOVF   77,W
0C33:  MOVWF  5A
0C34:  MOVF   78,W
0C35:  MOVWF  5B
0C36:  MOVF   79,W
0C37:  MOVWF  5C
0C38:  MOVF   7A,W
0C39:  MOVWF  5D
0C3A:  BSF    03.1
0C3B:  MOVF   7A,W
0C3C:  BSF    03.5
0C3D:  MOVWF  23
0C3E:  BCF    03.5
0C3F:  MOVF   79,W
0C40:  BSF    03.5
0C41:  MOVWF  22
0C42:  BCF    03.5
0C43:  MOVF   78,W
0C44:  BSF    03.5
0C45:  MOVWF  21
0C46:  BCF    03.5
0C47:  MOVF   77,W
0C48:  BSF    03.5
0C49:  MOVWF  20
0C4A:  CLRF   27
0C4B:  MOVLW  80
0C4C:  MOVWF  26
0C4D:  MOVLW  08
0C4E:  MOVWF  25
0C4F:  MOVLW  87
0C50:  MOVWF  24
0C51:  BCF    0A.3
0C52:  BCF    03.5
0C53:  CALL   3DF
0C54:  BSF    0A.3
0C55:  MOVF   7A,W
0C56:  MOVWF  55
0C57:  MOVF   79,W
0C58:  MOVWF  54
0C59:  MOVF   78,W
0C5A:  MOVWF  53
0C5B:  MOVF   77,W
0C5C:  MOVWF  52
.................... 	return(tcelsius); 
0C5D:  MOVF   52,W
0C5E:  MOVWF  77
0C5F:  MOVF   53,W
0C60:  MOVWF  78
0C61:  MOVF   54,W
0C62:  MOVWF  79
0C63:  MOVF   55,W
0C64:  MOVWF  7A
.................... } 
....................  
....................  
....................  
.................... #fuses XT, NOPROTECT, NOPUT, NOWDT, NOBROWNOUT, NOLVP, NOCPD, NOWRT 
....................  
.................... // ADC 
.................... #define VDD                 5.00 
....................  
....................  
.................... // Enviroment configurations, adjusted after final installation in bathroom, programmed over ICSP 
.................... #define MINIMUM_INTERVAL		1  // minimum minutes to run when auto started (prevent hysteresis) 
.................... #define MAXIMUM_RH_1			47 // rh % level 1 when fan should start (set with jumpers) 
.................... #define MAXIMUM_RH_2			MAXIMUM_RH_1+10 // rh % level 2 when fan should start (set with jumpers) 
.................... #define MINIMUM_TEMP			22 // °C, never auto run if under this 
....................  
.................... // Hardware configurations 
.................... #define MENU_SWITCH				PIN_C1 
.................... #define INCLUDE_TEMP_JUMPER		PIN_C2 
.................... #define LED_1					PIN_B3 // pinne 24 
.................... #define LED_2					PIN_B4 // pinne 25 
.................... #define FAN_1					PIN_C0 
.................... #define RH_LIMIT_2_JUMPER		PIN_A4 // pinne 6 
....................  
.................... // Menu configurations 
.................... #define STATE_AUTO				0 
.................... #define STATE_START				1 
.................... #define STATE_STOP				2 
.................... #define STATE_SETTINGS			3 
.................... #define MAX_MENU_STATE			3 
....................  
.................... // symbols from LCD char map used for Hitachi 44780 chipsets, see LCD_Char_Map.gif for binary map 
.................... #define C_PERCENT				0x25 // % = 00100101 = 25 = 0x25 
.................... #define C_DEGREES				0xDF // ° = 11011111 = DF = 0xDF 
....................  
....................  
.................... // LCD STUFF 
.................... #define LCD_D0  PIN_C3 
.................... #define LCD_D1  PIN_C4 
.................... #define LCD_D2  PIN_C5 
.................... #define LCD_D3  PIN_C6 
.................... #define LCD_EN  PIN_B5 
.................... #define LCD_RS  PIN_B6 
.................... #define LINE_1  0x00 
.................... #define LINE_2  0x40 
.................... #define CLEAR_DISP  0x01 
....................  
....................  
.................... #define hi(x)  (*(&x+1)) 
....................  
.................... #use delay ( clock=8000000 ) 
*
01B9:  MOVLW  4E
01BA:  MOVWF  04
01BB:  BCF    03.7
01BC:  MOVF   00,W
01BD:  BTFSC  03.2
01BE:  GOTO   1CC
01BF:  MOVLW  02
01C0:  MOVWF  78
01C1:  CLRF   77
01C2:  DECFSZ 77,F
01C3:  GOTO   1C2
01C4:  DECFSZ 78,F
01C5:  GOTO   1C1
01C6:  MOVLW  97
01C7:  MOVWF  77
01C8:  DECFSZ 77,F
01C9:  GOTO   1C8
01CA:  DECFSZ 00,F
01CB:  GOTO   1BF
01CC:  RETLW  00
.................... #use standard_io ( A ) 
.................... #use standard_io ( B ) 
.................... #use standard_io ( C ) 
*
1090:  MOVLW  FF
1091:  BCF    03.5
1092:  MOVWF  28
....................  
....................  
.................... // protos 
.................... void LCD_Init ( void ); 
.................... void LCD_SetPosition ( unsigned int cX ); 
.................... void LCD_PutChar ( unsigned int cX ); 
.................... void LCD_PutCmd ( unsigned int cX ); 
.................... void LCD_PulseEnable ( void ); 
.................... void LCD_SetData ( unsigned int cX ); 
.................... void PrintMenu ( void ); 
.................... void SetTime ( void ); 
.................... void CheckSwitches ( void ); 
.................... void printVersionInfo ( void ); 
.................... void DisplayData ( void ); 
.................... void StartFan ( void ); 
.................... void StopFan ( void ); 
.................... void AutoFan ( void ); 
.................... float getRH ( void ); 
.................... float getTemp ( void ); 
....................  
.................... static char cDisplayDataFlag, cFan1Flag; 
1093:  CLRF   29
1094:  CLRF   2A
.................... static char cInterruptCount; 
1095:  CLRF   2B
.................... static char cMenuState, cSelectFlag; 
1096:  CLRF   2C
1097:  CLRF   2D
.................... static char cMenuSwitchOn, cMenuSwitchCount; 
1098:  CLRF   2E
1099:  CLRF   2F
.................... static char cSelectSwitchOn, cSelectSwitchCount; 
109A:  CLRF   30
109B:  CLRF   31
.................... static char cDisplayUpdate, cToggleFlag, cToggleFlagLCD; 
109C:  CLRF   32
109D:  CLRF   33
109E:  CLRF   34
.................... static char cFan1RunTime, cFan1AutoState, /*cFan1IsAutoMode,*/ cFan1CanStop; 
109F:  CLRF   35
10A0:  CLRF   36
10A1:  CLRF   37
....................  
....................  
.................... /*******************************************************************/ 
....................  
.................... /* 
.................... The way to calculate the timing as an 8-bit timer is: 
.................... Fosc/4 /prescaler/256 = freq. 
.................... The main oscillator is divided by four. This is a hardware design and cannot be changed. 
.................... The prescaler is an 8-bit register that can be programmed to one of nine settings to be a 1:1 to 1:256 divider. 
.................... The 8-bit value in the setup statement tells the compiler to configure the timer as an 8-bit timer. 
.................... So, if you have a 20MHZ oscillator running, with the prescaler set to 8 the formula is: 
.................... 20MHZ/4/8/256 = 20,000,000 /4 / 8 / 256 
.................... This will give you aproximately 2441 interrupts each second or an interrupt every 409uS. 
....................  
....................  
.................... Fra http://www.vermontficks.org/pic_calculations.xls 
.................... (256-C5)*1 / (A5 * 1000000 / B5 / 4) * 1000 
.................... C5: Preset Timer0 count before leaving interrupt (0-255) 
.................... A5: Clock frequency (MHz) 
.................... B5: Prescaler value 
.................... = Resulting interrupt rate (mS) 
....................  
.................... */ 
....................  
.................... //interrupt rate (mS): (256-6)*1 / (8 * 1000000 / 128 / 4) * 1000 = 16,000 
....................  
.................... #int_rtcc 
.................... void TimerInterrupt ( void ) // Gets here every 16.4mS at 8MHz, 8.2mS at 16MHz 
.................... { 
.................... 	if ( cInterruptCount++ >= 31 )      // (16) if one second yet ! TROR DET SKAL VÆRE 31 !!! 
*
0165:  MOVF   2B,W
0166:  INCF   2B,F
0167:  SUBLW  1E
0168:  BTFSC  03.0
0169:  GOTO   199
.................... 	{ 
....................  
.................... 		cInterruptCount = 0; 
016A:  CLRF   2B
....................  
.................... 		if(cDisplayUpdate ++ == 5) // update disp every 5 sec 
016B:  MOVF   32,W
016C:  INCF   32,F
016D:  SUBLW  05
016E:  BTFSS  03.2
016F:  GOTO   173
.................... 		{ 
.................... 			cDisplayUpdate = 0; 
0170:  CLRF   32
.................... 			cDisplayDataFlag = ON; // signal time to update temp/humidity 
0171:  MOVLW  01
0172:  MOVWF  29
.................... 		} 
....................  
....................  
.................... 		// Fan must run N minutes after auto mode is stopped, to avoid hysteresis 
.................... 		if ( cMenuState == STATE_AUTO && cFan1Flag == ON && cFan1CanStop == NO ) 
0173:  MOVF   2C,F
0174:  BTFSS  03.2
0175:  GOTO   186
0176:  DECFSZ 2A,W
0177:  GOTO   186
0178:  MOVF   37,F
0179:  BTFSS  03.2
017A:  GOTO   186
.................... 		{ 
.................... 			if( cFan1RunTime ++ == ( MINIMUM_INTERVAL * 60 ) ) // (MINIMUM_INTERVAL*60) 
017B:  MOVF   35,W
017C:  INCF   35,F
017D:  SUBLW  3C
017E:  BTFSS  03.2
017F:  GOTO   184
.................... 			{ 
.................... 				cFan1CanStop = YES; // signal ok to turn off fan if rh is under limits 
0180:  MOVLW  01
0181:  MOVWF  37
.................... 				cDisplayDataFlag = ON; // signal time to update temp/humidity 
0182:  MOVWF  29
.................... 			} 
.................... 			else 
0183:  GOTO   185
.................... 			{ 
.................... 				cFan1CanStop = NO; // keep on running 
0184:  CLRF   37
.................... 			} 
.................... 		} 
.................... 		else 
0185:  GOTO   187
.................... 		{ 
.................... 			cFan1RunTime = 0; 
0186:  CLRF   35
.................... 		} 
....................  
.................... 		if ( cFan1Flag == ON ) //v1.6 
0187:  DECFSZ 2A,W
0188:  GOTO   196
.................... 		{ 
.................... 			cToggleFlag ^= 1;              // toggle (blink) LED while fan is running 
0189:  MOVLW  01
018A:  XORWF  33,F
.................... 			if ( cToggleFlag == 1) 
018B:  DECFSZ 33,W
018C:  GOTO   192
.................... 			{ 
.................... 				output_low ( LED_2 ); 
018D:  BSF    03.5
018E:  BCF    06.4
018F:  BCF    03.5
0190:  BCF    06.4
.................... 			} 
.................... 			else 
0191:  GOTO   195
.................... 			{ 
.................... 				output_float ( LED_2 ); 
0192:  BSF    03.5
0193:  BSF    06.4
0194:  BCF    03.5
.................... 			} 
.................... 		} 
.................... 		else 
0195:  GOTO   199
.................... 		{ 
.................... 			output_float ( LED_2 ); // turn off LED if fan not running 
0196:  BSF    03.5
0197:  BSF    06.4
0198:  BCF    03.5
.................... 		} 
....................  
.................... 	} 
....................  
.................... 	if ( input ( MENU_SWITCH ) == LOW )	// if button still pressed 
0199:  BSF    28.1
019A:  MOVF   28,W
019B:  BSF    03.5
019C:  MOVWF  07
019D:  BCF    03.5
019E:  BTFSC  07.1
019F:  GOTO   1A6
.................... 	{ 
.................... 		if ( cMenuSwitchCount < 128 )	// hold at 128 
01A0:  MOVF   2F,W
01A1:  SUBLW  7F
01A2:  BTFSS  03.0
01A3:  GOTO   1A5
.................... 		{ 
.................... 			cMenuSwitchCount++;			// otherwise increment 
01A4:  INCF   2F,F
.................... 		} 
....................  
.................... 	} 
.................... 	else								// if button is unpressed 
01A5:  GOTO   1B3
.................... 	{ 
.................... 		if ( cMenuSwitchCount > 2 )			// filter out glitches 
01A6:  MOVF   2F,W
01A7:  SUBLW  02
01A8:  BTFSC  03.0
01A9:  GOTO   1B2
.................... 		{ 
.................... 			// If button press is greater than 3.9 seconds (31msec * 128 / 1000), cold reset 
.................... 			if ( cMenuSwitchCount == 128 ) 
01AA:  MOVF   2F,W
01AB:  SUBLW  80
01AC:  BTFSS  03.2
01AD:  GOTO   1B0
.................... 			{ 
.................... 				reset_cpu(); 
01AE:  CLRF   0A
01AF:  GOTO   000
.................... 			} 
....................  
.................... 			cMenuSwitchOn = YES;        	// signal that switch was pressed 
01B0:  MOVLW  01
01B1:  MOVWF  2E
.................... 		} 
....................  
.................... 		cMenuSwitchCount = 0;             // switch up, restart 
01B2:  CLRF   2F
.................... 	} 
....................  
.................... 	set_rtcc ( 6 );     // Prescaler value, restart at adjusted value for 1-second accuracy 
01B3:  MOVLW  06
01B4:  MOVWF  01
.................... } 
....................  
.................... //***************************************************************************** 
....................  
01B5:  BCF    0B.2
01B6:  BCF    0A.3
01B7:  BCF    0A.4
01B8:  GOTO   01D
.................... void printVersionInfo ( void ) 
.................... { 
.................... 	LCD_SetPosition ( LINE_1 + 0 ); 
*
0252:  CLRF   40
0253:  CALL   232
.................... 	printf ( LCD_PutChar, " BADEVIFTE v3.10" ); 
0254:  CLRF   38
0255:  MOVF   38,W
0256:  CALL   033
0257:  INCF   38,F
0258:  MOVWF  77
0259:  MOVWF  4D
025A:  CALL   23F
025B:  MOVLW  10
025C:  SUBWF  38,W
025D:  BTFSS  03.2
025E:  GOTO   255
.................... 	LCD_SetPosition ( LINE_2+ 0 ); 
025F:  MOVLW  40
0260:  MOVWF  40
0261:  CALL   232
.................... 	printf ( LCD_PutChar, "Kenny 19.10.2007" ); 
0262:  CLRF   38
0263:  MOVF   38,W
0264:  CALL   048
0265:  INCF   38,F
0266:  MOVWF  77
0267:  MOVWF  4D
0268:  CALL   23F
0269:  MOVLW  10
026A:  SUBWF  38,W
026B:  BTFSS  03.2
026C:  GOTO   263
.................... } 
026D:  BCF    0A.3
026E:  BSF    0A.4
026F:  GOTO   0D3 (RETURN)
....................  
.................... void main ( void ) 
.................... { 
*
1087:  CLRF   04
1088:  BCF    03.7
1089:  MOVLW  1F
108A:  ANDWF  03,F
108B:  BSF    03.5
108C:  BSF    1F.0
108D:  BSF    1F.1
108E:  BSF    1F.2
108F:  BCF    1F.3
....................  
.................... 	delay_ms ( 200 );           // wait enough time after VDD rise 
*
10A2:  MOVLW  C8
10A3:  MOVWF  4E
10A4:  BCF    0A.4
10A5:  CALL   1B9
10A6:  BSF    0A.4
.................... 	setup_counters ( RTCC_INTERNAL, RTCC_DIV_128 );       // 31mS roll @8MHz 
10A7:  MOVLW  06
10A8:  MOVWF  77
10A9:  BTFSS  77.3
10AA:  GOTO   0B4
10AB:  MOVLW  07
10AC:  CLRF   01
10AD:  MOVLW  81
10AE:  MOVWF  04
10AF:  BCF    03.7
10B0:  MOVF   00,W
10B1:  ANDLW  C0
10B2:  IORLW  0F
10B3:  MOVWF  00
10B4:  CLRWDT
10B5:  MOVLW  81
10B6:  MOVWF  04
10B7:  MOVF   00,W
10B8:  ANDLW  C0
10B9:  IORWF  77,W
10BA:  MOVWF  00
....................  
.................... 	output_low ( FAN_1 ); 
10BB:  BCF    28.0
10BC:  MOVF   28,W
10BD:  BSF    03.5
10BE:  MOVWF  07
10BF:  BCF    03.5
10C0:  BCF    07.0
.................... 	output_low ( LED_1 ); 
10C1:  BSF    03.5
10C2:  BCF    06.3
10C3:  BCF    03.5
10C4:  BCF    06.3
.................... 	output_low ( LED_2 ); 
10C5:  BSF    03.5
10C6:  BCF    06.4
10C7:  BCF    03.5
10C8:  BCF    06.4
....................  
....................  
.................... 	LCD_Init(); 
10C9:  BCF    0A.4
10CA:  CALL   212
10CB:  BSF    0A.4
.................... 	LCD_PutCmd ( CLEAR_DISP ); 
10CC:  MOVLW  01
10CD:  MOVWF  38
10CE:  BCF    0A.4
10CF:  CALL   207
10D0:  BSF    0A.4
....................  
.................... 	printVersionInfo(); 
10D1:  BCF    0A.4
10D2:  GOTO   252
10D3:  BSF    0A.4
.................... 	delay_ms ( 5000 ); 
10D4:  MOVLW  14
10D5:  MOVWF  38
10D6:  MOVLW  FA
10D7:  MOVWF  4E
10D8:  BCF    0A.4
10D9:  CALL   1B9
10DA:  BSF    0A.4
10DB:  DECFSZ 38,F
10DC:  GOTO   0D6
.................... 	LCD_PutCmd ( CLEAR_DISP ); 
10DD:  MOVLW  01
10DE:  MOVWF  38
10DF:  BCF    0A.4
10E0:  CALL   207
10E1:  BSF    0A.4
.................... 	LCD_Init(); 
10E2:  BCF    0A.4
10E3:  CALL   212
10E4:  BSF    0A.4
....................  
.................... 	// SETUP 
.................... 	setup_ccp1 ( CCP_OFF ); 
10E5:  BSF    28.2
10E6:  MOVF   28,W
10E7:  BSF    03.5
10E8:  MOVWF  07
10E9:  BCF    03.5
10EA:  CLRF   17
.................... 	setup_ccp2 ( CCP_OFF ); 
10EB:  BSF    28.1
10EC:  MOVF   28,W
10ED:  BSF    03.5
10EE:  MOVWF  07
10EF:  BCF    03.5
10F0:  CLRF   1D
....................  
.................... 	setup_adc_ports ( AN0_AN1_AN3 );	// set up the ADC on analog inputs AN0, AN1 and AN3 
10F1:  BSF    03.5
10F2:  BCF    1F.0
10F3:  BCF    1F.1
10F4:  BSF    1F.2
10F5:  BCF    1F.3
.................... 	setup_adc ( ADC_CLOCK_INTERNAL );   // clock source 
10F6:  BCF    03.5
10F7:  BSF    1F.6
10F8:  BSF    1F.7
10F9:  BSF    03.5
10FA:  BSF    1F.7
10FB:  BCF    03.5
10FC:  BSF    1F.0
....................  
.................... 	enable_interrupts ( INT_RTCC );     // turn on timer interrupt 
10FD:  BSF    0B.5
.................... 	enable_interrupts ( GLOBAL );       // enable interrupts 
10FE:  MOVLW  C0
10FF:  IORWF  0B,F
....................  
.................... 	// INITIALIZE VARIABLES 
.................... 	cFan1Flag = OFF; 
1100:  CLRF   2A
.................... 	cSelectFlag = OFF; 
1101:  CLRF   2D
.................... 	cToggleFlag = 0; 
1102:  CLRF   33
.................... 	cToggleFlagLCD = 0; 
1103:  CLRF   34
.................... 	cMenuSwitchOn = OFF; 
1104:  CLRF   2E
.................... 	cSelectSwitchOn = OFF; 
1105:  CLRF   30
.................... 	cMenuSwitchCount = 0; 
1106:  CLRF   2F
.................... 	cSelectSwitchCount = 0; 
1107:  CLRF   31
....................  
.................... 	// bootup diagnose view 
.................... 	output_high ( FAN_1 ); 
1108:  BCF    28.0
1109:  MOVF   28,W
110A:  BSF    03.5
110B:  MOVWF  07
110C:  BCF    03.5
110D:  BSF    07.0
.................... 	output_float ( LED_2 ); 
110E:  BSF    03.5
110F:  BSF    06.4
....................  
.................... 	output_float ( RH_LIMIT_2_JUMPER ); 
1110:  BSF    05.4
.................... 	output_float ( INCLUDE_TEMP_JUMPER ); 
1111:  BCF    03.5
1112:  BSF    28.2
1113:  MOVF   28,W
1114:  BSF    03.5
1115:  MOVWF  07
.................... 	// start modus 
.................... 	cMenuState = STATE_AUTO;  // set first menu 
1116:  BCF    03.5
1117:  CLRF   2C
....................  
.................... 	cDisplayDataFlag = ON; // update display immediatly 
1118:  MOVLW  01
1119:  MOVWF  29
....................  
.................... 	while ( TRUE )              // do forever 
.................... 	{ 
.................... 		PrintMenu();            // display screens and enviroment info 
111A:  BCF    0A.4
111B:  BSF    0A.3
111C:  GOTO   476
111D:  BSF    0A.4
111E:  BCF    0A.3
.................... 		CheckSwitches();        // check and do any switch activity 
111F:  BCF    0A.4
1120:  BSF    0A.3
1121:  GOTO   604
1122:  BSF    0A.4
1123:  BCF    0A.3
.................... 		AutoFan();				// routine itself checks if automode enabled 
1124:  GOTO   000
.................... 	} 
1125:  GOTO   11A
.................... } 
....................  
.................... //**************************************************************************** 
....................  
.................... void PrintMenu ( void ) 
.................... { 
1126:  SLEEP
....................  
.................... 	// PRINT LOWER LINE OF MENU 
.................... 	LCD_SetPosition ( LINE_2 + 0 ); 
*
0C76:  MOVLW  40
0C77:  MOVWF  40
0C78:  BCF    0A.3
0C79:  CALL   232
0C7A:  BSF    0A.3
.................... 	switch ( cMenuState ) 
.................... 	{ 
0C7B:  MOVF   2C,W
0C7C:  ADDLW  FC
0C7D:  BTFSC  03.0
0C7E:  GOTO   507
0C7F:  ADDLW  04
0C80:  GOTO   5FC
.................... 		case STATE_START: 
.................... 		{ 
.................... 			printf ( LCD_PutChar, "ON        Change" ); 
0C81:  MOVLW  4F
0C82:  MOVWF  4D
0C83:  BCF    0A.3
0C84:  CALL   23F
0C85:  BSF    0A.3
0C86:  MOVLW  4E
0C87:  MOVWF  4D
0C88:  BCF    0A.3
0C89:  CALL   23F
0C8A:  BSF    0A.3
0C8B:  MOVLW  08
0C8C:  MOVWF  38
0C8D:  MOVLW  20
0C8E:  MOVWF  4D
0C8F:  BCF    0A.3
0C90:  CALL   23F
0C91:  BSF    0A.3
0C92:  DECFSZ 38,F
0C93:  GOTO   48D
0C94:  MOVLW  02
0C95:  MOVWF  39
0C96:  MOVF   39,W
0C97:  BCF    0A.3
0C98:  CALL   05D
0C99:  BSF    0A.3
0C9A:  INCF   39,F
0C9B:  MOVWF  77
0C9C:  MOVWF  4D
0C9D:  BCF    0A.3
0C9E:  CALL   23F
0C9F:  BSF    0A.3
0CA0:  MOVLW  08
0CA1:  SUBWF  39,W
0CA2:  BTFSS  03.2
0CA3:  GOTO   496
.................... 		} 
.................... 		break; 
0CA4:  GOTO   507
....................  
.................... 		case STATE_STOP: 
.................... 		{ 
.................... 			printf ( LCD_PutChar, "OFF       Change" ); 
0CA5:  MOVLW  4F
0CA6:  MOVWF  4D
0CA7:  BCF    0A.3
0CA8:  CALL   23F
0CA9:  BSF    0A.3
0CAA:  MOVLW  46
0CAB:  MOVWF  4D
0CAC:  BCF    0A.3
0CAD:  CALL   23F
0CAE:  BSF    0A.3
0CAF:  MOVLW  46
0CB0:  MOVWF  4D
0CB1:  BCF    0A.3
0CB2:  CALL   23F
0CB3:  BSF    0A.3
0CB4:  MOVLW  07
0CB5:  MOVWF  38
0CB6:  MOVLW  20
0CB7:  MOVWF  4D
0CB8:  BCF    0A.3
0CB9:  CALL   23F
0CBA:  BSF    0A.3
0CBB:  DECFSZ 38,F
0CBC:  GOTO   4B6
0CBD:  MOVLW  03
0CBE:  MOVWF  39
0CBF:  MOVF   39,W
0CC0:  BCF    0A.3
0CC1:  CALL   06A
0CC2:  BSF    0A.3
0CC3:  INCF   39,F
0CC4:  MOVWF  77
0CC5:  MOVWF  4D
0CC6:  BCF    0A.3
0CC7:  CALL   23F
0CC8:  BSF    0A.3
0CC9:  MOVLW  09
0CCA:  SUBWF  39,W
0CCB:  BTFSS  03.2
0CCC:  GOTO   4BF
.................... 		} 
.................... 		break; 
0CCD:  GOTO   507
....................  
.................... 		case STATE_AUTO: 
.................... 		{ 
.................... 			printf ( LCD_PutChar, "AUTO      Change" ); 
0CCE:  CLRF   38
0CCF:  MOVF   38,W
0CD0:  BCF    0A.3
0CD1:  CALL   078
0CD2:  BSF    0A.3
0CD3:  INCF   38,F
0CD4:  MOVWF  77
0CD5:  MOVWF  4D
0CD6:  BCF    0A.3
0CD7:  CALL   23F
0CD8:  BSF    0A.3
0CD9:  MOVLW  04
0CDA:  SUBWF  38,W
0CDB:  BTFSS  03.2
0CDC:  GOTO   4CF
0CDD:  MOVLW  06
0CDE:  MOVWF  39
0CDF:  MOVLW  20
0CE0:  MOVWF  4D
0CE1:  BCF    0A.3
0CE2:  CALL   23F
0CE3:  BSF    0A.3
0CE4:  DECFSZ 39,F
0CE5:  GOTO   4DF
0CE6:  MOVLW  04
0CE7:  MOVWF  3A
0CE8:  MOVF   3A,W
0CE9:  BCF    0A.3
0CEA:  CALL   078
0CEB:  BSF    0A.3
0CEC:  INCF   3A,F
0CED:  MOVWF  77
0CEE:  MOVWF  4D
0CEF:  BCF    0A.3
0CF0:  CALL   23F
0CF1:  BSF    0A.3
0CF2:  MOVLW  0A
0CF3:  SUBWF  3A,W
0CF4:  BTFSS  03.2
0CF5:  GOTO   4E8
.................... 		} 
.................... 		break; 
0CF6:  GOTO   507
....................  
.................... 		case STATE_SETTINGS: 
.................... 		{ 
.................... 			printf ( LCD_PutChar, "Settings  Change" ); 
0CF7:  CLRF   38
0CF8:  MOVF   38,W
0CF9:  BCF    0A.3
0CFA:  CALL   087
0CFB:  BSF    0A.3
0CFC:  INCF   38,F
0CFD:  MOVWF  77
0CFE:  MOVWF  4D
0CFF:  BCF    0A.3
0D00:  CALL   23F
0D01:  BSF    0A.3
0D02:  MOVLW  10
0D03:  SUBWF  38,W
0D04:  BTFSS  03.2
0D05:  GOTO   4F8
.................... 		} 
.................... 		break; 
0D06:  GOTO   507
....................  
.................... 	} 
....................  
.................... 	// DISPLAY KLIMA DATA 
.................... 	if ( cDisplayDataFlag == ON )                    // if interrupt signalled an ADC reading 
0D07:  DECFSZ 29,W
0D08:  GOTO   5F9
.................... 	{ 
.................... 		cDisplayDataFlag = OFF; 
0D09:  CLRF   29
.................... 		DisplayData(); 
.................... 	} 
.................... } 
*
0DF9:  BCF    0A.3
0DFA:  BSF    0A.4
0DFB:  GOTO   11D (RETURN)
....................  
.................... void CheckSwitches ( void ) 
.................... { 
....................  
.................... 	// INCREMENT/DECREMENT MENU 
.................... 	if ( cMenuSwitchOn == YES )      // if interrupt caught the switch press 
*
0E04:  DECFSZ 2E,W
0E05:  GOTO   60F
.................... 	{ 
.................... 		if ( cMenuState++ >= MAX_MENU_STATE )      // if at maximum 
0E06:  MOVF   2C,W
0E07:  INCF   2C,F
0E08:  SUBLW  02
0E09:  BTFSC  03.0
0E0A:  GOTO   60C
.................... 		{ 
.................... 			cMenuState = 0;            // roll 
0E0B:  CLRF   2C
.................... 		} 
.................... 		cMenuSwitchOn = NO;     // turn back off 
0E0C:  CLRF   2E
....................  
.................... 		cSelectFlag = ON; // ny i v1.5 
0E0D:  MOVLW  01
0E0E:  MOVWF  2D
.................... 	} 
....................  
....................    // CHECK IF SWITCH IS PRESSED, PERFORM ACTION AND PRINT MENU 
.................... 	switch ( cMenuState ) 
.................... 	{ 
0E0F:  MOVF   2C,W
0E10:  ADDLW  FC
0E11:  BTFSC  03.0
0E12:  GOTO   7A5
0E13:  ADDLW  04
0E14:  GOTO   7A8
.................... 		case ( STATE_START ): // START FAN 
.................... 		{ 
.................... 			if ( cSelectFlag == ON )    // if switch is pressed 
0E15:  DECFSZ 2D,W
0E16:  GOTO   62B
.................... 			{ 
.................... 				cSelectFlag = OFF;         // turn flag off 
0E17:  CLRF   2D
....................  
.................... 				StartFan(); 
....................  
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
*
0E20:  MOVLW  01
0E21:  MOVWF  38
0E22:  BCF    0A.3
0E23:  CALL   207
0E24:  BSF    0A.3
.................... 				cDisplayDataFlag = ON; 
0E25:  MOVLW  01
0E26:  MOVWF  29
.................... 				cMenuSwitchOn = NO; 
0E27:  CLRF   2E
.................... 				cSelectSwitchOn = NO; 
0E28:  CLRF   30
.................... 				cInterruptCount = 0;    // synchronize interrupt timing from here 
0E29:  CLRF   2B
.................... 				//cMenuState = STATE_STOP;    // menu displays "STOP" 
.................... 				break; 
0E2A:  GOTO   7A5
.................... 			} 
.................... 		} 
....................  
.................... 		case ( STATE_STOP ): // STOP FAN 
.................... 		{ 
.................... 			if ( cSelectFlag == ON )    // if switch is pressed 
0E2B:  DECFSZ 2D,W
0E2C:  GOTO   63F
.................... 			{ 
.................... 				cSelectFlag = OFF;         // turn flag off 
0E2D:  CLRF   2D
....................  
.................... 				StopFan(); 
....................  
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
*
0E35:  MOVLW  01
0E36:  MOVWF  38
0E37:  BCF    0A.3
0E38:  CALL   207
0E39:  BSF    0A.3
.................... 				cDisplayDataFlag = ON; 
0E3A:  MOVLW  01
0E3B:  MOVWF  29
.................... 				cMenuSwitchOn = NO; 
0E3C:  CLRF   2E
.................... 				cSelectSwitchOn = NO; 
0E3D:  CLRF   30
.................... 				//cMenuState = STATE_START;    // menu displays "START" 
....................  
.................... 				break; 
0E3E:  GOTO   7A5
.................... 			} 
.................... 		} 
....................  
.................... 		case ( STATE_AUTO ): 
.................... 		{ 
.................... 			if ( cSelectFlag == ON )    // if switch is pressed 
0E3F:  DECFSZ 2D,W
0E40:  GOTO   64D
.................... 			{ 
.................... 				cSelectFlag = OFF;         // turn flag off 
0E41:  CLRF   2D
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
0E42:  MOVLW  01
0E43:  MOVWF  38
0E44:  BCF    0A.3
0E45:  CALL   207
0E46:  BSF    0A.3
.................... 				cDisplayDataFlag = ON; 
0E47:  MOVLW  01
0E48:  MOVWF  29
.................... 				cMenuSwitchOn = NO; 
0E49:  CLRF   2E
.................... 				cSelectSwitchOn = NO; 
0E4A:  CLRF   30
.................... 				cInterruptCount = 0;    // synchronize interrupt timing from here 
0E4B:  CLRF   2B
....................  
.................... 				break; 
0E4C:  GOTO   7A5
.................... 			} 
.................... 		} 
....................  
.................... 		case ( STATE_SETTINGS ): 
.................... 		{ 
.................... 			if ( cSelectFlag == ON )    // if switch is pressed 
0E4D:  DECFSZ 2D,W
0E4E:  GOTO   7A5
.................... 			{ 
.................... 				cSelectFlag = OFF;         // turn flag off 
0E4F:  CLRF   2D
....................  
.................... 				disable_interrupts ( INT_RTCC );     // turn on timer interrupt 
0E50:  BCF    0B.5
.................... 				disable_interrupts ( GLOBAL );       // enable interrupts 
0E51:  BCF    0B.6
0E52:  BCF    0B.7
0E53:  BTFSC  0B.7
0E54:  GOTO   652
....................  
....................  
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
0E55:  MOVLW  01
0E56:  MOVWF  38
0E57:  BCF    0A.3
0E58:  CALL   207
0E59:  BSF    0A.3
.................... 				LCD_SetPosition ( LINE_1 ); 
0E5A:  CLRF   40
0E5B:  BCF    0A.3
0E5C:  CALL   232
0E5D:  BSF    0A.3
.................... 				printf ( LCD_PutChar, " Humidity limit " ); 
0E5E:  CLRF   38
0E5F:  MOVF   38,W
0E60:  BCF    0A.3
0E61:  CALL   09C
0E62:  BSF    0A.3
0E63:  INCF   38,F
0E64:  MOVWF  77
0E65:  MOVWF  4D
0E66:  BCF    0A.3
0E67:  CALL   23F
0E68:  BSF    0A.3
0E69:  MOVLW  10
0E6A:  SUBWF  38,W
0E6B:  BTFSS  03.2
0E6C:  GOTO   65F
.................... 				LCD_SetPosition ( LINE_2 ); 
0E6D:  MOVLW  40
0E6E:  MOVWF  40
0E6F:  BCF    0A.3
0E70:  CALL   232
0E71:  BSF    0A.3
.................... 				if ( input (RH_LIMIT_2_JUMPER ) == LOW ) 
0E72:  BSF    03.5
0E73:  BSF    05.4
0E74:  BCF    03.5
0E75:  BTFSC  05.4
0E76:  GOTO   694
.................... 				{ 
.................... 					printf ( LCD_PutChar, "%u%c - default+10", MAXIMUM_RH_2, C_PERCENT ); 
0E77:  MOVLW  39
0E78:  MOVWF  39
0E79:  MOVLW  1B
0E7A:  MOVWF  3A
0E7B:  BCF    0A.3
0E7C:  CALL   7A7
0E7D:  BSF    0A.3
0E7E:  MOVLW  25
0E7F:  MOVWF  4D
0E80:  BCF    0A.3
0E81:  CALL   23F
0E82:  BSF    0A.3
0E83:  MOVLW  04
0E84:  MOVWF  38
0E85:  MOVF   38,W
0E86:  BCF    0A.3
0E87:  CALL   0B1
0E88:  BSF    0A.3
0E89:  INCF   38,F
0E8A:  MOVWF  77
0E8B:  MOVWF  4D
0E8C:  BCF    0A.3
0E8D:  CALL   23F
0E8E:  BSF    0A.3
0E8F:  MOVLW  11
0E90:  SUBWF  38,W
0E91:  BTFSS  03.2
0E92:  GOTO   685
.................... 				} 
.................... 				else 
0E93:  GOTO   6B2
.................... 				{ 
.................... 					printf ( LCD_PutChar, "      %u%c       ", MAXIMUM_RH_1, C_PERCENT ); 
0E94:  MOVLW  06
0E95:  MOVWF  38
0E96:  MOVLW  20
0E97:  MOVWF  4D
0E98:  BCF    0A.3
0E99:  CALL   23F
0E9A:  BSF    0A.3
0E9B:  DECFSZ 38,F
0E9C:  GOTO   696
0E9D:  MOVLW  2F
0E9E:  MOVWF  39
0E9F:  MOVLW  1B
0EA0:  MOVWF  3A
0EA1:  BCF    0A.3
0EA2:  CALL   7A7
0EA3:  BSF    0A.3
0EA4:  MOVLW  25
0EA5:  MOVWF  4D
0EA6:  BCF    0A.3
0EA7:  CALL   23F
0EA8:  BSF    0A.3
0EA9:  MOVLW  07
0EAA:  MOVWF  39
0EAB:  MOVLW  20
0EAC:  MOVWF  4D
0EAD:  BCF    0A.3
0EAE:  CALL   23F
0EAF:  BSF    0A.3
0EB0:  DECFSZ 39,F
0EB1:  GOTO   6AB
.................... 				} 
.................... 				delay_ms ( 3000 ); 
0EB2:  MOVLW  0C
0EB3:  MOVWF  38
0EB4:  MOVLW  FA
0EB5:  MOVWF  4E
0EB6:  BCF    0A.3
0EB7:  CALL   1B9
0EB8:  BSF    0A.3
0EB9:  DECFSZ 38,F
0EBA:  GOTO   6B4
....................  
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
0EBB:  MOVLW  01
0EBC:  MOVWF  38
0EBD:  BCF    0A.3
0EBE:  CALL   207
0EBF:  BSF    0A.3
.................... 				LCD_SetPosition ( LINE_1 ); 
0EC0:  CLRF   40
0EC1:  BCF    0A.3
0EC2:  CALL   232
0EC3:  BSF    0A.3
.................... 				printf ( LCD_PutChar, "Minimum run time" ); 
0EC4:  CLRF   38
0EC5:  MOVF   38,W
0EC6:  BCF    0A.3
0EC7:  CALL   0C7
0EC8:  BSF    0A.3
0EC9:  INCF   38,F
0ECA:  MOVWF  77
0ECB:  MOVWF  4D
0ECC:  BCF    0A.3
0ECD:  CALL   23F
0ECE:  BSF    0A.3
0ECF:  MOVLW  10
0ED0:  SUBWF  38,W
0ED1:  BTFSS  03.2
0ED2:  GOTO   6C5
.................... 				LCD_SetPosition ( LINE_2 ); 
0ED3:  MOVLW  40
0ED4:  MOVWF  40
0ED5:  BCF    0A.3
0ED6:  CALL   232
0ED7:  BSF    0A.3
.................... 				printf ( LCD_PutChar, "%umin if Auto ON", MINIMUM_INTERVAL ); 
0ED8:  MOVLW  01
0ED9:  MOVWF  39
0EDA:  MOVLW  1B
0EDB:  MOVWF  3A
0EDC:  BCF    0A.3
0EDD:  CALL   7A7
0EDE:  BSF    0A.3
0EDF:  MOVLW  02
0EE0:  MOVWF  38
0EE1:  MOVF   38,W
0EE2:  BCF    0A.3
0EE3:  CALL   0DC
0EE4:  BSF    0A.3
0EE5:  INCF   38,F
0EE6:  MOVWF  77
0EE7:  MOVWF  4D
0EE8:  BCF    0A.3
0EE9:  CALL   23F
0EEA:  BSF    0A.3
0EEB:  MOVLW  10
0EEC:  SUBWF  38,W
0EED:  BTFSS  03.2
0EEE:  GOTO   6E1
.................... 				delay_ms ( 3000 ); 
0EEF:  MOVLW  0C
0EF0:  MOVWF  38
0EF1:  MOVLW  FA
0EF2:  MOVWF  4E
0EF3:  BCF    0A.3
0EF4:  CALL   1B9
0EF5:  BSF    0A.3
0EF6:  DECFSZ 38,F
0EF7:  GOTO   6F1
....................  
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
0EF8:  MOVLW  01
0EF9:  MOVWF  38
0EFA:  BCF    0A.3
0EFB:  CALL   207
0EFC:  BSF    0A.3
.................... 				LCD_SetPosition ( LINE_1 ); 
0EFD:  CLRF   40
0EFE:  BCF    0A.3
0EFF:  CALL   232
0F00:  BSF    0A.3
.................... 				printf ( LCD_PutChar, "Not run if under" ); 
0F01:  CLRF   38
0F02:  MOVF   38,W
0F03:  BCF    0A.3
0F04:  CALL   0F1
0F05:  BSF    0A.3
0F06:  INCF   38,F
0F07:  MOVWF  77
0F08:  MOVWF  4D
0F09:  BCF    0A.3
0F0A:  CALL   23F
0F0B:  BSF    0A.3
0F0C:  MOVLW  10
0F0D:  SUBWF  38,W
0F0E:  BTFSS  03.2
0F0F:  GOTO   702
.................... 				LCD_SetPosition ( LINE_2 ); 
0F10:  MOVLW  40
0F11:  MOVWF  40
0F12:  BCF    0A.3
0F13:  CALL   232
0F14:  BSF    0A.3
.................... 				printf ( LCD_PutChar, "       %u%cC     ", MINIMUM_TEMP, C_DEGREES ); 
0F15:  MOVLW  07
0F16:  MOVWF  38
0F17:  MOVLW  20
0F18:  MOVWF  4D
0F19:  BCF    0A.3
0F1A:  CALL   23F
0F1B:  BSF    0A.3
0F1C:  DECFSZ 38,F
0F1D:  GOTO   717
0F1E:  MOVLW  16
0F1F:  MOVWF  39
0F20:  MOVLW  1B
0F21:  MOVWF  3A
0F22:  BCF    0A.3
0F23:  CALL   7A7
0F24:  BSF    0A.3
0F25:  MOVLW  DF
0F26:  MOVWF  4D
0F27:  BCF    0A.3
0F28:  CALL   23F
0F29:  BSF    0A.3
0F2A:  MOVLW  43
0F2B:  MOVWF  4D
0F2C:  BCF    0A.3
0F2D:  CALL   23F
0F2E:  BSF    0A.3
0F2F:  MOVLW  05
0F30:  MOVWF  39
0F31:  MOVLW  20
0F32:  MOVWF  4D
0F33:  BCF    0A.3
0F34:  CALL   23F
0F35:  BSF    0A.3
0F36:  DECFSZ 39,F
0F37:  GOTO   731
.................... 				delay_ms ( 3000 ); 
0F38:  MOVLW  0C
0F39:  MOVWF  38
0F3A:  MOVLW  FA
0F3B:  MOVWF  4E
0F3C:  BCF    0A.3
0F3D:  CALL   1B9
0F3E:  BSF    0A.3
0F3F:  DECFSZ 38,F
0F40:  GOTO   73A
....................  
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
0F41:  MOVLW  01
0F42:  MOVWF  38
0F43:  BCF    0A.3
0F44:  CALL   207
0F45:  BSF    0A.3
.................... 				LCD_SetPosition ( LINE_1 ); 
0F46:  CLRF   40
0F47:  BCF    0A.3
0F48:  CALL   232
0F49:  BSF    0A.3
.................... 				printf ( LCD_PutChar, "When auto mode:" ); 
0F4A:  CLRF   38
0F4B:  MOVF   38,W
0F4C:  BCF    0A.3
0F4D:  CALL   109
0F4E:  BSF    0A.3
0F4F:  INCF   38,F
0F50:  MOVWF  77
0F51:  MOVWF  4D
0F52:  BCF    0A.3
0F53:  CALL   23F
0F54:  BSF    0A.3
0F55:  MOVLW  0F
0F56:  SUBWF  38,W
0F57:  BTFSS  03.2
0F58:  GOTO   74B
.................... 				LCD_SetPosition ( LINE_2 ); 
0F59:  MOVLW  40
0F5A:  MOVWF  40
0F5B:  BCF    0A.3
0F5C:  CALL   232
0F5D:  BSF    0A.3
.................... 				if ( input (INCLUDE_TEMP_JUMPER) == LOW) 
0F5E:  BSF    28.2
0F5F:  MOVF   28,W
0F60:  BSF    03.5
0F61:  MOVWF  07
0F62:  BCF    03.5
0F63:  BTFSC  07.2
0F64:  GOTO   775
.................... 				{ 
.................... 					printf ( LCD_PutChar, "No check on temp" ); 
0F65:  CLRF   38
0F66:  MOVF   38,W
0F67:  BCF    0A.3
0F68:  CALL   11D
0F69:  BSF    0A.3
0F6A:  INCF   38,F
0F6B:  MOVWF  77
0F6C:  MOVWF  4D
0F6D:  BCF    0A.3
0F6E:  CALL   23F
0F6F:  BSF    0A.3
0F70:  MOVLW  10
0F71:  SUBWF  38,W
0F72:  BTFSS  03.2
0F73:  GOTO   766
.................... 				} 
.................... 				else 
0F74:  GOTO   78D
.................... 				{ 
.................... 					printf ( LCD_PutChar, "Check on temp   " ); 
0F75:  CLRF   38
0F76:  MOVF   38,W
0F77:  BCF    0A.3
0F78:  CALL   132
0F79:  BSF    0A.3
0F7A:  INCF   38,F
0F7B:  MOVWF  77
0F7C:  MOVWF  4D
0F7D:  BCF    0A.3
0F7E:  CALL   23F
0F7F:  BSF    0A.3
0F80:  MOVLW  0D
0F81:  SUBWF  38,W
0F82:  BTFSS  03.2
0F83:  GOTO   776
0F84:  MOVLW  03
0F85:  MOVWF  39
0F86:  MOVLW  20
0F87:  MOVWF  4D
0F88:  BCF    0A.3
0F89:  CALL   23F
0F8A:  BSF    0A.3
0F8B:  DECFSZ 39,F
0F8C:  GOTO   786
.................... 				} 
.................... 				delay_ms ( 3000 ); 
0F8D:  MOVLW  0C
0F8E:  MOVWF  38
0F8F:  MOVLW  FA
0F90:  MOVWF  4E
0F91:  BCF    0A.3
0F92:  CALL   1B9
0F93:  BSF    0A.3
0F94:  DECFSZ 38,F
0F95:  GOTO   78F
....................  
....................  
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
0F96:  MOVLW  01
0F97:  MOVWF  38
0F98:  BCF    0A.3
0F99:  CALL   207
0F9A:  BSF    0A.3
.................... 				cDisplayDataFlag = ON; 
0F9B:  MOVLW  01
0F9C:  MOVWF  29
.................... 				cMenuSwitchOn = NO; 
0F9D:  CLRF   2E
.................... 				cSelectSwitchOn = NO; 
0F9E:  CLRF   30
.................... 				cInterruptCount = 0;    // synchronize interrupt timing from here 
0F9F:  CLRF   2B
.................... 				enable_interrupts ( INT_RTCC );     // turn on timer interrupt again 
0FA0:  BSF    0B.5
.................... 				enable_interrupts ( GLOBAL );       // enable interrupts again 
0FA1:  MOVLW  C0
0FA2:  IORWF  0B,F
....................  
.................... 				cMenuState = STATE_AUTO;    // menu displays "AUTO" 
0FA3:  CLRF   2C
....................  
.................... 				break; 
0FA4:  GOTO   7A5
.................... 			} 
.................... 		} 
.................... 	} 
.................... } 
0FA5:  BCF    0A.3
0FA6:  BSF    0A.4
0FA7:  GOTO   122 (RETURN)
....................  
.................... void DisplayData ( void ) 
.................... { 
.................... 	float f_rh; 
.................... 	float f_temp; 
....................  
.................... 	f_rh = getRH(); 
*
0D0A:  BCF    0A.3
0D0B:  CALL   525
0D0C:  BSF    0A.3
0D0D:  MOVF   7A,W
0D0E:  MOVWF  3B
0D0F:  MOVF   79,W
0D10:  MOVWF  3A
0D11:  MOVF   78,W
0D12:  MOVWF  39
0D13:  MOVF   77,W
0D14:  MOVWF  38
....................  
.................... 	// Relative Humidity 
.................... 	LCD_SetPosition ( LINE_1 ); 
0D15:  CLRF   40
0D16:  BCF    0A.3
0D17:  CALL   232
0D18:  BSF    0A.3
....................  
.................... 	if ( f_rh == 0.0 ) // 1023 
0D19:  MOVF   3B,W
0D1A:  MOVWF  76
0D1B:  MOVF   3A,W
0D1C:  MOVWF  75
0D1D:  MOVF   39,W
0D1E:  MOVWF  74
0D1F:  MOVF   38,W
0D20:  MOVWF  73
0D21:  BSF    03.5
0D22:  CLRF   23
0D23:  CLRF   22
0D24:  CLRF   21
0D25:  CLRF   20
0D26:  BCF    0A.3
0D27:  BCF    03.5
0D28:  CALL   5FD
0D29:  BSF    0A.3
0D2A:  BTFSS  03.2
0D2B:  GOTO   53C
.................... 	{ 
.................... 		printf ( LCD_PutChar, "O/R" );    // out of range 
0D2C:  MOVLW  4F
0D2D:  MOVWF  4D
0D2E:  BCF    0A.3
0D2F:  CALL   23F
0D30:  BSF    0A.3
0D31:  MOVLW  2F
0D32:  MOVWF  4D
0D33:  BCF    0A.3
0D34:  CALL   23F
0D35:  BSF    0A.3
0D36:  MOVLW  52
0D37:  MOVWF  4D
0D38:  BCF    0A.3
0D39:  CALL   23F
0D3A:  BSF    0A.3
.................... 	} 
.................... 	else 
0D3B:  GOTO   550
.................... 	{ 
.................... 		printf ( LCD_PutChar, "%2.1f%c", f_rh, C_PERCENT ); 
0D3C:  MOVLW  01
0D3D:  MOVWF  04
0D3E:  MOVF   3B,W
0D3F:  MOVWF  43
0D40:  MOVF   3A,W
0D41:  MOVWF  42
0D42:  MOVF   39,W
0D43:  MOVWF  41
0D44:  MOVF   38,W
0D45:  MOVWF  40
0D46:  MOVLW  01
0D47:  MOVWF  44
0D48:  BCF    0A.3
0D49:  CALL   6A1
0D4A:  BSF    0A.3
0D4B:  MOVLW  25
0D4C:  MOVWF  4D
0D4D:  BCF    0A.3
0D4E:  CALL   23F
0D4F:  BSF    0A.3
.................... 	} 
....................  
.................... 	// Temperature from NTC device 
.................... 	LCD_SetPosition ( LINE_1 + 13 ); 
0D50:  MOVLW  0D
0D51:  MOVWF  40
0D52:  BCF    0A.3
0D53:  CALL   232
0D54:  BSF    0A.3
....................  
.................... 	f_temp = getTemp(); 
0D55:  CALL   000
0D56:  MOVF   7A,W
0D57:  MOVWF  3F
0D58:  MOVF   79,W
0D59:  MOVWF  3E
0D5A:  MOVF   78,W
0D5B:  MOVWF  3D
0D5C:  MOVF   77,W
0D5D:  MOVWF  3C
....................  
.................... 	if ( f_temp == 100 ) 
0D5E:  MOVF   3F,W
0D5F:  MOVWF  76
0D60:  MOVF   3E,W
0D61:  MOVWF  75
0D62:  MOVF   3D,W
0D63:  MOVWF  74
0D64:  MOVF   3C,W
0D65:  MOVWF  73
0D66:  BSF    03.5
0D67:  CLRF   23
0D68:  CLRF   22
0D69:  MOVLW  48
0D6A:  MOVWF  21
0D6B:  MOVLW  85
0D6C:  MOVWF  20
0D6D:  BCF    0A.3
0D6E:  BCF    03.5
0D6F:  CALL   5FD
0D70:  BSF    0A.3
0D71:  BTFSS  03.2
0D72:  GOTO   583
.................... 	{ 
.................... 		printf ( LCD_PutChar, "O/R" );    // out of range 
0D73:  MOVLW  4F
0D74:  MOVWF  4D
0D75:  BCF    0A.3
0D76:  CALL   23F
0D77:  BSF    0A.3
0D78:  MOVLW  2F
0D79:  MOVWF  4D
0D7A:  BCF    0A.3
0D7B:  CALL   23F
0D7C:  BSF    0A.3
0D7D:  MOVLW  52
0D7E:  MOVWF  4D
0D7F:  BCF    0A.3
0D80:  CALL   23F
0D81:  BSF    0A.3
.................... 	} 
.................... 	else 
0D82:  GOTO   596
.................... 	{ 
.................... 		printf ( LCD_PutChar, "%2.0f%c", f_temp, C_DEGREES ); 
0D83:  MOVLW  01
0D84:  MOVWF  04
0D85:  MOVF   3F,W
0D86:  MOVWF  43
0D87:  MOVF   3E,W
0D88:  MOVWF  42
0D89:  MOVF   3D,W
0D8A:  MOVWF  41
0D8B:  MOVF   3C,W
0D8C:  MOVWF  40
0D8D:  CLRF   44
0D8E:  BCF    0A.3
0D8F:  CALL   6A1
0D90:  BSF    0A.3
0D91:  MOVLW  DF
0D92:  MOVWF  4D
0D93:  BCF    0A.3
0D94:  CALL   23F
0D95:  BSF    0A.3
.................... 	} 
....................  
.................... 	// Display FAN operational status 
.................... 	LCD_SetPosition ( LINE_1 + 6); // '45.0% AU OFF 25°' 
0D96:  MOVLW  06
0D97:  MOVWF  40
0D98:  BCF    0A.3
0D99:  CALL   232
0D9A:  BSF    0A.3
.................... 	if( cMenuState == STATE_AUTO ) 
0D9B:  MOVF   2C,F
0D9C:  BTFSS  03.2
0D9D:  GOTO   5C1
.................... 	{ 
.................... 		if( cFan1AutoState == OFF ) 
0D9E:  MOVF   36,F
0D9F:  BTFSS  03.2
0DA0:  GOTO   5B1
.................... 		{ 
.................... 			printf ( LCD_PutChar, "AU OFF" ); 
0DA1:  CLRF   40
0DA2:  MOVF   40,W
0DA3:  BCF    0A.3
0DA4:  CALL   144
0DA5:  BSF    0A.3
0DA6:  INCF   40,F
0DA7:  MOVWF  77
0DA8:  MOVWF  4D
0DA9:  BCF    0A.3
0DAA:  CALL   23F
0DAB:  BSF    0A.3
0DAC:  MOVLW  06
0DAD:  SUBWF  40,W
0DAE:  BTFSS  03.2
0DAF:  GOTO   5A2
.................... 		} 
.................... 		else 
0DB0:  GOTO   5C0
.................... 		{ 
.................... 			printf ( LCD_PutChar, "AU ON " ); 
0DB1:  CLRF   40
0DB2:  MOVF   40,W
0DB3:  BCF    0A.3
0DB4:  CALL   14F
0DB5:  BSF    0A.3
0DB6:  INCF   40,F
0DB7:  MOVWF  77
0DB8:  MOVWF  4D
0DB9:  BCF    0A.3
0DBA:  CALL   23F
0DBB:  BSF    0A.3
0DBC:  MOVLW  06
0DBD:  SUBWF  40,W
0DBE:  BTFSS  03.2
0DBF:  GOTO   5B2
.................... 		} 
.................... 	} 
.................... 	else 
0DC0:  GOTO   5F9
.................... 	{ 
.................... 		if( cFan1Flag == ON ) 
0DC1:  DECFSZ 2A,W
0DC2:  GOTO   5E1
.................... 		{ 
.................... 			cToggleFlagLCD ^= 1; 
0DC3:  MOVLW  01
0DC4:  XORWF  34,F
.................... 			if ( cToggleFlagLCD == 1 ) 
0DC5:  DECFSZ 34,W
0DC6:  GOTO   5D7
.................... 			{ 
.................... 				printf ( LCD_PutChar, "  ON  " ); 
0DC7:  CLRF   40
0DC8:  MOVF   40,W
0DC9:  BCF    0A.3
0DCA:  CALL   15A
0DCB:  BSF    0A.3
0DCC:  INCF   40,F
0DCD:  MOVWF  77
0DCE:  MOVWF  4D
0DCF:  BCF    0A.3
0DD0:  CALL   23F
0DD1:  BSF    0A.3
0DD2:  MOVLW  06
0DD3:  SUBWF  40,W
0DD4:  BTFSS  03.2
0DD5:  GOTO   5C8
.................... 			} 
.................... 			else 
0DD6:  GOTO   5E0
.................... 			{ 
.................... 				printf ( LCD_PutChar, "      " ); 
0DD7:  MOVLW  06
0DD8:  MOVWF  40
0DD9:  MOVLW  20
0DDA:  MOVWF  4D
0DDB:  BCF    0A.3
0DDC:  CALL   23F
0DDD:  BSF    0A.3
0DDE:  DECFSZ 40,F
0DDF:  GOTO   5D9
.................... 			} 
.................... 		} 
.................... 		else 
0DE0:  GOTO   5F9
.................... 		{ 
.................... 			printf ( LCD_PutChar, "OFF   " ); 
0DE1:  MOVLW  4F
0DE2:  MOVWF  4D
0DE3:  BCF    0A.3
0DE4:  CALL   23F
0DE5:  BSF    0A.3
0DE6:  MOVLW  46
0DE7:  MOVWF  4D
0DE8:  BCF    0A.3
0DE9:  CALL   23F
0DEA:  BSF    0A.3
0DEB:  MOVLW  46
0DEC:  MOVWF  4D
0DED:  BCF    0A.3
0DEE:  CALL   23F
0DEF:  BSF    0A.3
0DF0:  MOVLW  03
0DF1:  MOVWF  40
0DF2:  MOVLW  20
0DF3:  MOVWF  4D
0DF4:  BCF    0A.3
0DF5:  CALL   23F
0DF6:  BSF    0A.3
0DF7:  DECFSZ 40,F
0DF8:  GOTO   5F2
.................... 		} 
.................... 	} 
.................... } 
....................  
....................  
.................... float getTemp() 
.................... { 
.................... 	int16 adc_value; 
.................... 	float ohm, tcelsius; 
....................  
....................  
.................... 	// see ntc.h and ntc.c 
....................  
.................... 	set_adc_channel ( 1 ); // RA1, pin 3 
*
0800:  MOVLW  08
0801:  MOVWF  78
0802:  MOVF   1F,W
0803:  ANDLW  C7
0804:  IORWF  78,W
0805:  MOVWF  1F
.................... 	delay_us(50); 
0806:  MOVLW  21
0807:  MOVWF  77
0808:  DECFSZ 77,F
0809:  GOTO   008
.................... 	adc_value = read_adc(); 
080A:  BSF    1F.2
080B:  BTFSC  1F.2
080C:  GOTO   00B
080D:  BSF    03.5
080E:  MOVF   1E,W
080F:  BCF    03.5
0810:  MOVWF  44
0811:  MOVF   1E,W
0812:  MOVWF  45
.................... 	ohm = adc_2_ohm ( adc_value ); 
0813:  MOVF   44,W
0814:  MOVWF  4E
*
0877:  MOVF   7A,W
0878:  MOVWF  49
0879:  MOVF   79,W
087A:  MOVWF  48
087B:  MOVF   78,W
087C:  MOVWF  47
087D:  MOVF   77,W
087E:  MOVWF  46
.................... 	tcelsius = r2temperature ( ohm ); 
087F:  MOVF   49,W
0880:  MOVWF  51
0881:  MOVF   48,W
0882:  MOVWF  50
0883:  MOVF   47,W
0884:  MOVWF  4F
0885:  MOVF   46,W
0886:  MOVWF  4E
*
0C65:  MOVF   7A,W
0C66:  MOVWF  4D
0C67:  MOVF   79,W
0C68:  MOVWF  4C
0C69:  MOVF   78,W
0C6A:  MOVWF  4B
0C6B:  MOVF   77,W
0C6C:  MOVWF  4A
....................  
.................... 	return ( float ) tcelsius; 
0C6D:  MOVF   4A,W
0C6E:  MOVWF  77
0C6F:  MOVF   4B,W
0C70:  MOVWF  78
0C71:  MOVF   4C,W
0C72:  MOVWF  79
0C73:  MOVF   4D,W
0C74:  MOVWF  7A
.................... } 
0C75:  RETLW  00
....................  
....................  
.................... float getRH() 
.................... { 
....................  
.................... 	int16 adc_value; 
.................... 	float adc_volt, rh; 
....................  
.................... 	rh = 0.0; 
*
0525:  CLRF   4D
0526:  CLRF   4C
0527:  CLRF   4B
0528:  CLRF   4A
....................  
.................... 	/* 
.................... 		Formulas for the HIH3610 sensor 
.................... 		RH: RH = ((A/D voltage / supply voltage) - 0.16) / 0.0062 
.................... 		volt adc = iAdcHumValue / 1024 * 5 
.................... 		(417 / 1024) * 5 = 2,0361328125 
.................... 		(2,0361328125 / 5) = 0,4072265625 - 0,16 = 0,2472265625 / 0,0062 = 39,87 RH 
.................... 		ELLER 
.................... 		(417 / 1024) = 0,4072265625 - 0,16 = 0,2472265625 / 0,0062 = 39,87 RH 
.................... 		0,4072265625 - 0,16 = 
.................... 	*/ 
.................... 	set_adc_channel ( 0 ); // RA0, pin 2 
0529:  MOVLW  00
052A:  MOVWF  78
052B:  MOVF   1F,W
052C:  ANDLW  C7
052D:  IORWF  78,W
052E:  MOVWF  1F
.................... 	delay_us(50); 
052F:  MOVLW  21
0530:  MOVWF  77
0531:  DECFSZ 77,F
0532:  GOTO   531
....................  
.................... 	adc_value = read_adc(); 
0533:  BSF    1F.2
0534:  BTFSC  1F.2
0535:  GOTO   534
0536:  BSF    03.5
0537:  MOVF   1E,W
0538:  BCF    03.5
0539:  MOVWF  44
053A:  MOVF   1E,W
053B:  MOVWF  45
....................  
.................... 	if ( adc_value < 1 || adc_value > 1023 ) 
053C:  MOVF   44,F
053D:  BTFSS  03.2
053E:  GOTO   542
053F:  MOVF   45,F
0540:  BTFSC  03.2
0541:  GOTO   546
0542:  MOVF   45,W
0543:  SUBLW  03
0544:  BTFSC  03.0
0545:  GOTO   54F
.................... 		return rh; 
0546:  MOVF   4A,W
0547:  MOVWF  77
0548:  MOVF   4B,W
0549:  MOVWF  78
054A:  MOVF   4C,W
054B:  MOVWF  79
054C:  MOVF   4D,W
054D:  MOVWF  7A
054E:  GOTO   5FC
....................  
.................... 	// calc relative humidity from 10bit adc value 
.................... 	adc_volt = ( float ) adc_value / 1023  * VDD; // 1023 leaves room for out-of-range 
054F:  MOVF   45,W
0550:  MOVWF  54
0551:  MOVF   44,W
0552:  MOVWF  53
0553:  CALL   270
0554:  MOVF   77,W
0555:  MOVWF  4E
0556:  MOVF   78,W
0557:  MOVWF  4F
0558:  MOVF   79,W
0559:  MOVWF  50
055A:  MOVF   7A,W
055B:  MOVWF  51
055C:  BSF    03.5
055D:  MOVWF  23
055E:  BCF    03.5
055F:  MOVF   79,W
0560:  BSF    03.5
0561:  MOVWF  22
0562:  BCF    03.5
0563:  MOVF   78,W
0564:  BSF    03.5
0565:  MOVWF  21
0566:  BCF    03.5
0567:  MOVF   77,W
0568:  BSF    03.5
0569:  MOVWF  20
056A:  CLRF   27
056B:  MOVLW  C0
056C:  MOVWF  26
056D:  MOVLW  7F
056E:  MOVWF  25
056F:  MOVLW  88
0570:  MOVWF  24
0571:  BCF    03.5
0572:  CALL   28D
0573:  MOVF   77,W
0574:  MOVWF  52
0575:  MOVF   78,W
0576:  MOVWF  53
0577:  MOVF   79,W
0578:  MOVWF  54
0579:  MOVF   7A,W
057A:  MOVWF  55
057B:  MOVWF  76
057C:  MOVF   79,W
057D:  MOVWF  75
057E:  MOVF   78,W
057F:  MOVWF  74
0580:  MOVF   77,W
0581:  MOVWF  73
0582:  BSF    03.5
0583:  CLRF   23
0584:  CLRF   22
0585:  MOVLW  20
0586:  MOVWF  21
0587:  MOVLW  81
0588:  MOVWF  20
0589:  BCF    03.5
058A:  CALL   359
058B:  MOVF   7A,W
058C:  MOVWF  49
058D:  MOVF   79,W
058E:  MOVWF  48
058F:  MOVF   78,W
0590:  MOVWF  47
0591:  MOVF   77,W
0592:  MOVWF  46
.................... 	rh = ( ( float ) adc_volt / VDD  - 0.16 ) / 0.0062; // v1.5 
0593:  MOVF   49,W
0594:  BSF    03.5
0595:  MOVWF  23
0596:  BCF    03.5
0597:  MOVF   48,W
0598:  BSF    03.5
0599:  MOVWF  22
059A:  BCF    03.5
059B:  MOVF   47,W
059C:  BSF    03.5
059D:  MOVWF  21
059E:  BCF    03.5
059F:  MOVF   46,W
05A0:  BSF    03.5
05A1:  MOVWF  20
05A2:  CLRF   27
05A3:  CLRF   26
05A4:  MOVLW  20
05A5:  MOVWF  25
05A6:  MOVLW  81
05A7:  MOVWF  24
05A8:  BCF    03.5
05A9:  CALL   28D
05AA:  MOVF   77,W
05AB:  MOVWF  4E
05AC:  MOVF   78,W
05AD:  MOVWF  4F
05AE:  MOVF   79,W
05AF:  MOVWF  50
05B0:  MOVF   7A,W
05B1:  MOVWF  51
05B2:  BSF    03.1
05B3:  MOVF   7A,W
05B4:  BSF    03.5
05B5:  MOVWF  23
05B6:  BCF    03.5
05B7:  MOVF   79,W
05B8:  BSF    03.5
05B9:  MOVWF  22
05BA:  BCF    03.5
05BB:  MOVF   78,W
05BC:  BSF    03.5
05BD:  MOVWF  21
05BE:  BCF    03.5
05BF:  MOVF   77,W
05C0:  BSF    03.5
05C1:  MOVWF  20
05C2:  MOVLW  0A
05C3:  MOVWF  27
05C4:  MOVLW  D7
05C5:  MOVWF  26
05C6:  MOVLW  23
05C7:  MOVWF  25
05C8:  MOVLW  7C
05C9:  MOVWF  24
05CA:  BCF    03.5
05CB:  CALL   3DF
05CC:  MOVF   77,W
05CD:  MOVWF  52
05CE:  MOVF   78,W
05CF:  MOVWF  53
05D0:  MOVF   79,W
05D1:  MOVWF  54
05D2:  MOVF   7A,W
05D3:  MOVWF  55
05D4:  BSF    03.5
05D5:  MOVWF  23
05D6:  BCF    03.5
05D7:  MOVF   79,W
05D8:  BSF    03.5
05D9:  MOVWF  22
05DA:  BCF    03.5
05DB:  MOVF   78,W
05DC:  BSF    03.5
05DD:  MOVWF  21
05DE:  BCF    03.5
05DF:  MOVF   77,W
05E0:  BSF    03.5
05E1:  MOVWF  20
05E2:  MOVLW  5F
05E3:  MOVWF  27
05E4:  MOVLW  29
05E5:  MOVWF  26
05E6:  MOVLW  4B
05E7:  MOVWF  25
05E8:  MOVLW  77
05E9:  MOVWF  24
05EA:  BCF    03.5
05EB:  CALL   28D
05EC:  MOVF   7A,W
05ED:  MOVWF  4D
05EE:  MOVF   79,W
05EF:  MOVWF  4C
05F0:  MOVF   78,W
05F1:  MOVWF  4B
05F2:  MOVF   77,W
05F3:  MOVWF  4A
....................  
.................... 	return rh; 
05F4:  MOVF   4A,W
05F5:  MOVWF  77
05F6:  MOVF   4B,W
05F7:  MOVWF  78
05F8:  MOVF   4C,W
05F9:  MOVWF  79
05FA:  MOVF   4D,W
05FB:  MOVWF  7A
....................  
.................... } 
05FC:  RETLW  00
....................  
....................  
.................... void Reboot( void ) 
.................... { 
.................... 	reset_cpu(); 
.................... } 
....................  
.................... void StartFan( void ) 
.................... { 
.................... 	cFan1Flag = ON; 
*
0E18:  MOVLW  01
0E19:  MOVWF  2A
.................... 	output_low ( FAN_1 ); 
0E1A:  BCF    28.0
0E1B:  MOVF   28,W
0E1C:  BSF    03.5
0E1D:  MOVWF  07
0E1E:  BCF    03.5
0E1F:  BCF    07.0
.................... } 
....................  
.................... void StopFan( void ) 
.................... { 
.................... 	cFan1Flag = OFF; 
*
0E2E:  CLRF   2A
.................... 	output_high ( FAN_1 ); 
0E2F:  BCF    28.0
0E30:  MOVF   28,W
0E31:  BSF    03.5
0E32:  MOVWF  07
0E33:  BCF    03.5
0E34:  BSF    07.0
.................... } 
....................  
....................  
.................... void AutoFan( void ) 
.................... { 
.................... 	float rh, tcelsius; 
.................... 	float SELECTED_RH_LIMIT; 
....................  
.................... 	if ( cMenuState != STATE_AUTO ) return; 
*
1000:  MOVF   2C,F
1001:  BTFSS  03.2
1002:  GOTO   084
....................  
.................... 	tcelsius = getTemp(); 
1003:  BCF    0A.4
1004:  BSF    0A.3
1005:  CALL   000
1006:  BSF    0A.4
1007:  BCF    0A.3
1008:  MOVF   7A,W
1009:  MOVWF  3F
100A:  MOVF   79,W
100B:  MOVWF  3E
100C:  MOVF   78,W
100D:  MOVWF  3D
100E:  MOVF   77,W
100F:  MOVWF  3C
.................... 	rh = getRH(); 
1010:  BCF    0A.4
1011:  CALL   525
1012:  BSF    0A.4
1013:  MOVF   7A,W
1014:  MOVWF  3B
1015:  MOVF   79,W
1016:  MOVWF  3A
1017:  MOVF   78,W
1018:  MOVWF  39
1019:  MOVF   77,W
101A:  MOVWF  38
....................  
.................... 	// Determine witch RH limit to use, based on jumper is on or not, can be changed on the fly 
.................... 	if ( input (RH_LIMIT_2_JUMPER ) == LOW ) 
101B:  BSF    03.5
101C:  BSF    05.4
101D:  BCF    03.5
101E:  BTFSC  05.4
101F:  GOTO   027
.................... 	{ 
.................... 		SELECTED_RH_LIMIT = MAXIMUM_RH_2; 
1020:  CLRF   43
1021:  CLRF   42
1022:  MOVLW  64
1023:  MOVWF  41
1024:  MOVLW  84
1025:  MOVWF  40
.................... 	} 
.................... 	else 
1026:  GOTO   02D
.................... 	{ 
.................... 		SELECTED_RH_LIMIT = MAXIMUM_RH_1; 
1027:  CLRF   43
1028:  CLRF   42
1029:  MOVLW  3C
102A:  MOVWF  41
102B:  MOVLW  84
102C:  MOVWF  40
.................... 	} 
....................  
.................... 	if( rh > SELECTED_RH_LIMIT ) 
102D:  MOVF   43,W
102E:  MOVWF  76
102F:  MOVF   42,W
1030:  MOVWF  75
1031:  MOVF   41,W
1032:  MOVWF  74
1033:  MOVF   40,W
1034:  MOVWF  73
1035:  MOVF   3B,W
1036:  BSF    03.5
1037:  MOVWF  23
1038:  BCF    03.5
1039:  MOVF   3A,W
103A:  BSF    03.5
103B:  MOVWF  22
103C:  BCF    03.5
103D:  MOVF   39,W
103E:  BSF    03.5
103F:  MOVWF  21
1040:  BCF    03.5
1041:  MOVF   38,W
1042:  BSF    03.5
1043:  MOVWF  20
1044:  BCF    0A.4
1045:  BCF    03.5
1046:  CALL   5FD
1047:  BSF    0A.4
1048:  BTFSS  03.0
1049:  GOTO   075
.................... 	{ 
.................... 		if ( input (INCLUDE_TEMP_JUMPER) == LOW && tcelsius < MINIMUM_TEMP ) 
104A:  BSF    28.2
104B:  MOVF   28,W
104C:  BSF    03.5
104D:  MOVWF  07
104E:  BCF    03.5
104F:  BTFSC  07.2
1050:  GOTO   067
1051:  MOVF   3F,W
1052:  MOVWF  76
1053:  MOVF   3E,W
1054:  MOVWF  75
1055:  MOVF   3D,W
1056:  MOVWF  74
1057:  MOVF   3C,W
1058:  MOVWF  73
1059:  BSF    03.5
105A:  CLRF   23
105B:  CLRF   22
105C:  MOVLW  30
105D:  MOVWF  21
105E:  MOVLW  83
105F:  MOVWF  20
1060:  BCF    0A.4
1061:  BCF    03.5
1062:  CALL   5FD
1063:  BSF    0A.4
1064:  BTFSS  03.0
1065:  GOTO   067
.................... 		{ 
.................... 			//don't run if temp to low and check-temp switch is on 
.................... 			return; 
1066:  GOTO   084
.................... 		} 
.................... 		// RH is above upper threshold and temp check is either ok or deactivated, start fan if not already running 
.................... 		if ( cFan1Flag == OFF ) 
1067:  MOVF   2A,F
1068:  BTFSS  03.2
1069:  GOTO   073
.................... 		{ 
.................... 			cFan1Flag = ON; 
106A:  MOVLW  01
106B:  MOVWF  2A
.................... 			cFan1CanStop = NO; 
106C:  CLRF   37
.................... 			output_low ( FAN_1 ); 
106D:  BCF    28.0
106E:  MOVF   28,W
106F:  BSF    03.5
1070:  MOVWF  07
1071:  BCF    03.5
1072:  BCF    07.0
....................  
.................... 		} 
....................  
.................... 		cFan1RunTime = 0; // reset interval counter. increases by interrupt timer. 
1073:  CLRF   35
.................... 	} 
.................... 	else 
1074:  GOTO   082
.................... 	{ 
.................... 		if( cFan1CanStop == NO ) 
1075:  MOVF   37,F
1076:  BTFSC  03.2
.................... 		{ 
.................... 			// time forces us to keep running (to prevent hysteresis) 
.................... 		} 
.................... 		else 
1077:  GOTO   082
.................... 		{ 
.................... 			if ( cFan1Flag == ON ) 
1078:  DECFSZ 2A,W
1079:  GOTO   082
.................... 			{ 
.................... 				cFan1Flag = OFF; 
107A:  CLRF   2A
.................... 				cFan1CanStop = NO; 
107B:  CLRF   37
.................... 				output_high ( FAN_1 ); 
107C:  BCF    28.0
107D:  MOVF   28,W
107E:  BSF    03.5
107F:  MOVWF  07
1080:  BCF    03.5
1081:  BSF    07.0
.................... 			} 
.................... 		} 
.................... 	} 
.................... 	cFan1AutoState = cFan1Flag; // for correct view in display 
1082:  MOVF   2A,W
1083:  MOVWF  36
.................... } 
1084:  BCF    0A.3
1085:  BSF    0A.4
1086:  GOTO   125 (RETURN)
....................  
....................  
....................  
....................  
....................  
.................... // LCD FUNCTIONS ================================= 
....................  
.................... void LCD_Init ( void ) 
.................... { 
.................... 	LCD_SetData ( 0x00 ); 
*
0212:  CLRF   4E
0213:  CALL   1CD
.................... 	delay_ms ( 200 );       // wait enough time after Vdd rise 
0214:  MOVLW  C8
0215:  MOVWF  4E
0216:  CALL   1B9
.................... 	output_low ( LCD_RS ); 
0217:  BSF    03.5
0218:  BCF    06.6
0219:  BCF    03.5
021A:  BCF    06.6
.................... 	LCD_SetData ( 0x03 );   // init with specific nibbles to start 4-bit mode 
021B:  MOVLW  03
021C:  MOVWF  4E
021D:  CALL   1CD
.................... 	LCD_PulseEnable(); 
021E:  CALL   1F6
.................... 	LCD_PulseEnable(); 
021F:  CALL   1F6
.................... 	LCD_PulseEnable(); 
0220:  CALL   1F6
.................... 	LCD_SetData ( 0x02 );   // set 4-bit interface 
0221:  MOVLW  02
0222:  MOVWF  4E
0223:  CALL   1CD
.................... 	LCD_PulseEnable();      // send dual nibbles hereafter, MSN first 
0224:  CALL   1F6
.................... 	LCD_PutCmd ( 0x2C );    // function set (all lines, 5x7 characters) 
0225:  MOVLW  2C
0226:  MOVWF  38
0227:  CALL   207
.................... 	LCD_PutCmd ( 0x0C );    // display ON, cursor off, no blink 
0228:  MOVLW  0C
0229:  MOVWF  38
022A:  CALL   207
.................... 	LCD_PutCmd ( 0x01 );    // clear display 
022B:  MOVLW  01
022C:  MOVWF  38
022D:  CALL   207
.................... 	LCD_PutCmd ( 0x06 );    // entry mode set, increment 
022E:  MOVLW  06
022F:  MOVWF  38
0230:  CALL   207
.................... } 
0231:  RETLW  00
....................  
.................... void LCD_SetPosition ( unsigned int cX ) 
.................... { 
.................... 	// this subroutine works specifically for 4-bit Port A 
.................... 	LCD_SetData ( swap ( cX ) | 0x08 ); 
0232:  SWAPF  40,F
0233:  MOVF   40,W
0234:  IORLW  08
0235:  MOVWF  41
0236:  MOVWF  4E
0237:  CALL   1CD
.................... 	LCD_PulseEnable(); 
0238:  CALL   1F6
.................... 	LCD_SetData ( swap ( cX ) ); 
0239:  SWAPF  40,F
023A:  MOVF   40,W
023B:  MOVWF  4E
023C:  CALL   1CD
.................... 	LCD_PulseEnable(); 
023D:  CALL   1F6
.................... } 
023E:  RETLW  00
....................  
.................... void LCD_PutChar ( unsigned int cX ) 
.................... { 
.................... 	// this subroutine works specifically for 4-bit Port A 
.................... 	output_high ( LCD_RS ); 
023F:  BSF    03.5
0240:  BCF    06.6
0241:  BCF    03.5
0242:  BSF    06.6
.................... 	LCD_SetData ( swap ( cX ) );     // send high nibble 
0243:  SWAPF  4D,F
0244:  MOVF   4D,W
0245:  MOVWF  4E
0246:  CALL   1CD
.................... 	LCD_PulseEnable(); 
0247:  CALL   1F6
.................... 	LCD_SetData ( swap ( cX ) );     // send low nibble 
0248:  SWAPF  4D,F
0249:  MOVF   4D,W
024A:  MOVWF  4E
024B:  CALL   1CD
.................... 	LCD_PulseEnable(); 
024C:  CALL   1F6
.................... 	output_low ( LCD_RS ); 
024D:  BSF    03.5
024E:  BCF    06.6
024F:  BCF    03.5
0250:  BCF    06.6
.................... } 
0251:  RETLW  00
....................  
.................... void LCD_PutCmd ( unsigned int cX ) 
.................... { 
.................... 	// this subroutine works specifically for 4-bit Port A 
.................... 	LCD_SetData ( swap ( cX ) );     // send high nibble 
*
0207:  SWAPF  38,F
0208:  MOVF   38,W
0209:  MOVWF  4E
020A:  CALL   1CD
.................... 	LCD_PulseEnable(); 
020B:  CALL   1F6
.................... 	LCD_SetData ( swap ( cX ) );     // send low nibble 
020C:  SWAPF  38,F
020D:  MOVF   38,W
020E:  MOVWF  4E
020F:  CALL   1CD
.................... 	LCD_PulseEnable(); 
0210:  CALL   1F6
.................... } 
0211:  RETLW  00
....................  
.................... void LCD_PulseEnable ( void ) 
.................... { 
.................... 	output_high ( LCD_EN ); 
*
01F6:  BSF    03.5
01F7:  BCF    06.5
01F8:  BCF    03.5
01F9:  BSF    06.5
.................... 	delay_us ( 10 ); 
01FA:  MOVLW  06
01FB:  MOVWF  77
01FC:  DECFSZ 77,F
01FD:  GOTO   1FC
01FE:  NOP
.................... 	output_low ( LCD_EN ); 
01FF:  BSF    03.5
0200:  BCF    06.5
0201:  BCF    03.5
0202:  BCF    06.5
.................... 	delay_ms ( 5 ); 
0203:  MOVLW  05
0204:  MOVWF  4E
0205:  CALL   1B9
.................... } 
0206:  RETLW  00
....................  
.................... void LCD_SetData ( unsigned int cX ) 
.................... { 
.................... 	output_bit ( LCD_D0, cX & 0x01 ); 
*
01CD:  BTFSC  4E.0
01CE:  GOTO   1D1
01CF:  BCF    07.3
01D0:  GOTO   1D2
01D1:  BSF    07.3
01D2:  BCF    28.3
01D3:  MOVF   28,W
01D4:  BSF    03.5
01D5:  MOVWF  07
.................... 	output_bit ( LCD_D1, cX & 0x02 ); 
01D6:  BCF    03.5
01D7:  BTFSC  4E.1
01D8:  GOTO   1DB
01D9:  BCF    07.4
01DA:  GOTO   1DC
01DB:  BSF    07.4
01DC:  BCF    28.4
01DD:  MOVF   28,W
01DE:  BSF    03.5
01DF:  MOVWF  07
.................... 	output_bit ( LCD_D2, cX & 0x04 ); 
01E0:  BCF    03.5
01E1:  BTFSC  4E.2
01E2:  GOTO   1E5
01E3:  BCF    07.5
01E4:  GOTO   1E6
01E5:  BSF    07.5
01E6:  BCF    28.5
01E7:  MOVF   28,W
01E8:  BSF    03.5
01E9:  MOVWF  07
.................... 	output_bit ( LCD_D3, cX & 0x08 ); 
01EA:  BCF    03.5
01EB:  BTFSC  4E.3
01EC:  GOTO   1EF
01ED:  BCF    07.6
01EE:  GOTO   1F0
01EF:  BSF    07.6
01F0:  BCF    28.6
01F1:  MOVF   28,W
01F2:  BSF    03.5
01F3:  MOVWF  07
.................... } 
01F4:  BCF    03.5
01F5:  RETLW  00

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG
