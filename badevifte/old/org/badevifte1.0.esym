d G "PIN_A0" 1 19 "40"
d G "PIN_A1" 1 20 "41"
d G "PIN_A2" 1 21 "42"
d G "PIN_A3" 1 22 "43"
d G "PIN_A4" 1 23 "44"
d G "PIN_A5" 1 24 "45"
d G "PIN_B0" 1 26 "48"
d G "PIN_B1" 1 27 "49"
d G "PIN_B2" 1 28 "50"
d G "PIN_B3" 1 29 "51"
d G "PIN_B4" 1 30 "52"
d G "PIN_B5" 1 31 "53"
d G "PIN_B6" 1 32 "54"
d G "PIN_B7" 1 33 "55"
d G "PIN_C0" 1 35 "56"
d G "PIN_C1" 1 36 "57"
d G "PIN_C2" 1 37 "58"
d G "PIN_C3" 1 38 "59"
d G "PIN_C4" 1 39 "60"
d G "PIN_C5" 1 40 "61"
d G "PIN_C6" 1 41 "62"
d G "PIN_C7" 1 42 "63"
d G "FALSE" 1 45 "0"
d G "TRUE" 1 46 "1"
d G "BYTE" 1 48 "int"
d G "BOOLEAN" 1 49 "short int"
d G "getc" 1 51 "getch"
d G "fgetc" 1 52 "getch"
d G "getchar" 1 53 "getch"
d G "putc" 1 54 "putchar"
d G "fputc" 1 55 "putchar"
d G "fgets" 1 56 "gets"
d G "fputs" 1 57 "puts"
d G "WDT_FROM_SLEEP" 1 62 "3"
d G "WDT_TIMEOUT" 1 63 "11"
d G "MCLR_FROM_SLEEP" 1 64 "19"
d G "MCLR_FROM_RUN" 1 65 "27"
d G "NORMAL_POWER_UP" 1 66 "24"
d G "BROWNOUT_RESTART" 1 67 "26"
d G "RTCC_INTERNAL" 1 75 "0"
d G "RTCC_EXT_L_TO_H" 1 76 "32"
d G "RTCC_EXT_H_TO_L" 1 77 "48"
d G "RTCC_DIV_1" 1 79 "8"
d G "RTCC_DIV_2" 1 80 "0"
d G "RTCC_DIV_4" 1 81 "1"
d G "RTCC_DIV_8" 1 82 "2"
d G "RTCC_DIV_16" 1 83 "3"
d G "RTCC_DIV_32" 1 84 "4"
d G "RTCC_DIV_64" 1 85 "5"
d G "RTCC_DIV_128" 1 86 "6"
d G "RTCC_DIV_256" 1 87 "7"
d G "RTCC_8_BIT" 1 90 "0"
d G "WDT_18MS" 1 100 "8"
d G "WDT_36MS" 1 101 "9"
d G "WDT_72MS" 1 102 "10"
d G "WDT_144MS" 1 103 "11"
d G "WDT_288MS" 1 104 "12"
d G "WDT_576MS" 1 105 "13"
d G "WDT_1152MS" 1 106 "14"
d G "WDT_2304MS" 1 107 "15"
d G "T1_DISABLED" 1 113 "0"
d G "T1_INTERNAL" 1 114 "0x85"
d G "T1_EXTERNAL" 1 115 "0x87"
d G "T1_EXTERNAL_SYNC" 1 116 "0x83"
d G "T1_CLK_OUT" 1 118 "8"
d G "T1_DIV_BY_1" 1 120 "0"
d G "T1_DIV_BY_2" 1 121 "0x10"
d G "T1_DIV_BY_4" 1 122 "0x20"
d G "T1_DIV_BY_8" 1 123 "0x30"
d G "T2_DISABLED" 1 128 "0"
d G "T2_DIV_BY_1" 1 129 "4"
d G "T2_DIV_BY_4" 1 130 "5"
d G "T2_DIV_BY_16" 1 131 "6"
d G "CCP_OFF" 1 137 "0"
d G "CCP_CAPTURE_FE" 1 138 "4"
d G "CCP_CAPTURE_RE" 1 139 "5"
d G "CCP_CAPTURE_DIV_4" 1 140 "6"
d G "CCP_CAPTURE_DIV_16" 1 141 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 142 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 143 "9"
d G "CCP_COMPARE_INT" 1 144 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 1 145 "0xB"
d G "CCP_PWM" 1 146 "0xC"
d G "CCP_PWM_PLUS_1" 1 147 "0x1c"
d G "CCP_PWM_PLUS_2" 1 148 "0x2c"
d G "CCP_PWM_PLUS_3" 1 149 "0x3c"
v G "CCP_1" 1 150 "int16"
v G "CCP_2" 1 154 "int16"
d G "SPI_MASTER" 1 161 "0x20"
d G "SPI_SLAVE" 1 162 "0x24"
d G "SPI_L_TO_H" 1 163 "0"
d G "SPI_H_TO_L" 1 164 "0x10"
d G "SPI_CLK_DIV_4" 1 165 "0"
d G "SPI_CLK_DIV_16" 1 166 "1"
d G "SPI_CLK_DIV_64" 1 167 "2"
d G "SPI_CLK_T2" 1 168 "3"
d G "SPI_SS_DISABLED" 1 169 "1"
d G "SPI_SAMPLE_AT_END" 1 171 "0x8000"
d G "SPI_XMIT_L_TO_H" 1 172 "0x4000"
d G "UART_ADDRESS" 1 178 "2"
d G "UART_DATA" 1 179 "4"
d G "ADC_OFF" 1 186 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 187 "0x100"
d G "ADC_CLOCK_DIV_8" 1 188 "0x40"
d G "ADC_CLOCK_DIV_32" 1 189 "0x80"
d G "ADC_CLOCK_INTERNAL" 1 190 "0xc0" "Internal 2-6us"
d G "NO_ANALOGS" 1 194 "7" "None"
d G "ALL_ANALOG" 1 195 "0" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 1 196 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 1 197 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 1 198 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_VREF_VREF" 1 199 "0x08" "A0 A1 A5 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 1 200 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 1 201 "0x0E" "A0"
d G "AN0_VREF_VREF" 1 202 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 1 203 "0x1" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 1 204 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 1 205 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 1 206 "0x8" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 1 207 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 1 208 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 1 209 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 1 213 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 214 "1"
d G "ADC_READ_ONLY" 1 215 "6"
d G "L_TO_H" 1 224 "0x40"
d G "H_TO_L" 1 225 "0"
d G "GLOBAL" 1 227 "0x0BC0"
d G "INT_RTCC" 1 228 "0x0B20"
d G "INT_RB" 1 229 "0xFF0B08"
d G "INT_EXT" 1 230 "0x0B10"
d G "INT_AD" 1 231 "0x8C40"
d G "INT_TBE" 1 232 "0x8C10"
d G "INT_RDA" 1 233 "0x8C20"
d G "INT_TIMER1" 1 234 "0x8C01"
d G "INT_TIMER2" 1 235 "0x8C02"
d G "INT_CCP1" 1 236 "0x8C04"
d G "INT_CCP2" 1 237 "0x8D01"
d G "INT_SSP" 1 238 "0x8C08"
d G "INT_BUSCOL" 1 239 "0x8D08"
d G "INT_EEPROM" 1 240 "0x8D10"
d G "INT_TIMER0" 1 241 "0x0B20"
D G "YES" 2 12 "1"
D G "NO" 2 16 "0"
D G "HIGH" 2 20 "1"
D G "LOW" 2 24 "0"
D G "ON" 2 28 "1"
D G "OFF" 2 32 "0"
D G "UP" 2 36 "1"
D G "DOWN" 2 40 "0"
D G "UCHAR" 2 44 "char"
D G "UINT" 2 48 "long"
D G "BIT" 2 52 "short"
D G "SCHAR" 2 56 "signed int"
D G "SINT" 2 60 "signed long"
D G "FLOAT" 2 64 "float"
D G "VDD" 0 13 "5.00"
D G "SAMPLE_INTERVAL_HI" 0 16 "0"
D G "SAMPLE_INTERVAL_LO" 0 17 "1"
D G "SAMPLE_COUNT_HI" 0 18 "2"
D G "SAMPLE_COUNT_LO" 0 19 "3"
D G "LOGGING_STATE" 0 20 "4"
D G "RANGE" 0 21 "5"
D G "LCD_D0" 0 31 "PIN_C3"
D G "LCD_D1" 0 32 "PIN_C4"
D G "LCD_D2" 0 33 "PIN_C5"
D G "LCD_D3" 0 34 "PIN_C6"
D G "LCD_EN" 0 35 "PIN_B5"
D G "LCD_RS" 0 36 "PIN_B6"
D G "LINE_1" 0 37 "0x00"
D G "LINE_2" 0 38 "0x40"
D G "CLEAR_DISP" 0 39 "0x01"
D G "PERCENT" 0 41 "'p'"
D G "CELCIUS" 0 42 "'C'"
D G "MENU_SWITCH" 0 45 "PIN_C1"
D G "SELECT_SWITCH" 0 46 "PIN_C2"
D G "LED_1" 0 49 "PIN_B3" "pinne 24"
D G "LED_2" 0 50 "PIN_B4" "pinne 25"
D G "FAN_1" 0 51 "PIN_C0"
D G "CMD_NUL" 0 53 "0"
D G "STATE_START" 0 56 "0"
D G "STATE_STOP" 0 57 "1"
D G "STATE_AUTO" 0 58 "2"
D G "MAX_MENU_STATE" 0 59 "2"
D G "MINIMUM_INTERVAL" 0 61 "20" "minimum minutes to run when auto started (prevent hysteresis)"
D G "UPPER_RH" 0 62 "40" "rh % when fan should start"
D G "hi" 0 66 "(x)  (*(&x+1))"
F G "LCD_Init" 0 74 "int8()"
V L "cX" 0 75 "int8"
F G "LCD_SetPosition" 0 75 "int8(int8 cX)"
V L "cX" 0 76 "int8"
F G "LCD_PutChar" 0 76 "int8(int8 cX)"
V L "cX" 0 77 "int8"
F G "LCD_PutCmd" 0 77 "int8(int8 cX)"
F G "LCD_PulseEnable" 0 78 "int8()"
V L "cX" 0 79 "int8"
F G "LCD_SetData" 0 79 "int8(int8 cX)"
F G "PrintMenu" 0 80 "int8()" "protos"
F G "SetTime" 0 81 "int8()"
F G "CheckSwitches" 0 82 "int8()"
F G "printVersionInfo" 0 83 "int8()"
F G "DisplayData" 0 84 "int8()"
F G "StartFan" 0 85 "int8()"
F G "StopFan" 0 86 "int8()"
F G "AutoFan" 0 87 "int8()"
F G "getRH" 0 88 "int16()" "void DisplayData ( long iAdcValue, char cLoc );"
V G "cDisplayDataFlag" 0 92 "int8"
V G "cFan1Flag" 0 92 "int8"
V G "cInterruptCount" 0 93 "int8"
V G "cMenuState" 0 94 "int8"
V G "cSelectFlag" 0 94 "int8"
V G "cMenuSwitchOn" 0 95 "int8"
V G "cMenuSwitchCount" 0 95 "int8"
V G "cSelectSwitchOn" 0 96 "int8"
V G "cSelectSwitchCount" 0 96 "int8" "static char cFan1State [ 9 ];"
V G "cDisplayUpdate" 0 98 "int8"
V G "cToggleFlag" 0 98 "int8"
V G "cFan1RunTime" 0 99 "int8"
V G "cFan1AutoState" 0 99 "int8" "The way to calculate the timing as an 8-bit timer is:"
C L "getRH" 0 12 14 "FUNCTION"
C L "TimerInterrupt" 0 12 1 "FUNCTION"
F G "TimerInterrupt" 0 128 "int8()"
C L "TimerInterrupt" 0 12 1 "FUNCTION"
C L "TimerInterrupt" 0 12 1 "FUNCTION"
C L "TimerInterrupt" 0 12 1 "FUNCTION"
C L "TimerInterrupt" 0 12 2 "FUNCTION"
C L "TimerInterrupt" 0 12 1 "FUNCTION"
C L "TimerInterrupt" 0 12 1 "FUNCTION"
C L "TimerInterrupt" 0 12 1 "FUNCTION"
C L "TimerInterrupt" 0 12 1 "FUNCTION"
C L "TimerInterrupt" 0 12 1 "FUNCTION"
C L "TimerInterrupt" 0 12 1 "FUNCTION"
C L "TimerInterrupt" 0 12 1 "FUNCTION"
C L "TimerInterrupt" 0 12 1 "FUNCTION"
C L "TimerInterrupt" 0 12 1 "FUNCTION"
C L "TimerInterrupt" 0 12 1 "FUNCTION"
C L "TimerInterrupt" 0 12 1 "FUNCTION"
C L "TimerInterrupt" 0 12 1 "FUNCTION"
F G "printVersionInfo" 0 204 "int8()"
F G "main" 0 212 "int8()" "char recChar;"
C L "main" 0 12 1 "FUNCTION"
C L "main" 0 12 1 "FUNCTION"
C L "main" 0 12 2 "FUNCTION"
C L "main" 0 12 1 "FUNCTION"
C L "main" 0 12 1 "FUNCTION"
C L "main" 0 12 1 "FUNCTION"
C L "main" 0 12 1 "FUNCTION"
C L "main" 0 12 2 "FUNCTION"
C L "main" 0 12 1 "FUNCTION"
C L "main" 0 12 1 "FUNCTION"
C L "main" 0 12 1 "FUNCTION"
C L "main" 0 12 1 "FUNCTION"
C L "main" 0 12 1 "FUNCTION"
C L "main" 0 12 1 "FUNCTION"
F G "PrintMenu" 0 269 "int8()" "PRINT LOWER LINE OF MENU"
C L "PrintMenu" 0 12 1 "FUNCTION"
C L "PrintMenu" 0 12 1 "FUNCTION"
F G "CheckSwitches" 0 304 "int8()" "INCREMENT/DECREMENT MENU"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
C L "CheckSwitches" 0 12 1 "FUNCTION"
F G "DisplayData" 0 384 "int8()"
V L "f_temp" 0 385 "float"
V L "f_rh" 0 385 "float"
C L "DisplayData" 0 12 1 "FUNCTION"
C L "DisplayData" 0 12 1 "FUNCTION"
C L "DisplayData" 0 12 1 "FUNCTION"
C L "DisplayData" 0 12 1 "FUNCTION"
C L "DisplayData" 0 12 1 "FUNCTION"
C L "DisplayData" 0 12 1 "FUNCTION"
C L "DisplayData" 0 12 1 "FUNCTION"
C L "DisplayData" 0 12 1 "FUNCTION"
F G "getRH" 0 433 "int16()"
V L "adc_value" 0 435 "int16"
V L "adc_volt" 0 436 "float"
V L "rh" 0 436 "float" "RH: RH = ((A/D voltage / supply voltage) - 0.16) / 0.0062"
C L "getRH" 0 12 6 "FUNCTION"
C L "getRH" 0 12 1 "FUNCTION"
C L "getRH" 0 12 1 "FUNCTION"
F G "Reboot" 0 459 "int8()"
F G "StartFan" 0 464 "int8()"
F G "StopFan" 0 471 "int8()"
C L "StopFan" 0 12 1 "FUNCTION"
F G "AutoFan" 0 479 "int8()"
V L "rh" 0 480 "float"
C L "AutoFan" 0 12 1 "FUNCTION"
C L "AutoFan" 0 12 1 "FUNCTION"
C L "AutoFan" 0 12 1 "FUNCTION"
C L "AutoFan" 0 12 1 "FUNCTION"
C L "AutoFan" 0 12 1 "FUNCTION"
C L "AutoFan" 0 12 1 "FUNCTION"
C L "LCD_Init" 0 12 1 "FUNCTION"
F G "LCD_Init" 0 521 "int8()"
C L "LCD_Init" 0 12 1 "FUNCTION"
C L "LCD_Init" 0 12 1 "FUNCTION"
C L "LCD_Init" 0 12 1 "FUNCTION"
C L "LCD_Init" 0 12 1 "FUNCTION"
C L "LCD_Init" 0 12 1 "FUNCTION"
C L "LCD_Init" 0 12 1 "FUNCTION"
C L "LCD_Init" 0 12 1 "FUNCTION"
C L "LCD_Init" 0 12 1 "FUNCTION"
V L "cX" 0 537 "int8"
F G "LCD_SetPosition" 0 538 "int8(int8 cX)" "this subroutine works specifically for 4-bit Port A"
V L "cX" 0 546 "int8"
F G "LCD_PutChar" 0 547 "int8(int8 cX)" "this subroutine works specifically for 4-bit Port A"
C L "LCD_PutChar" 0 12 1 "FUNCTION"
C L "LCD_PutChar" 0 12 1 "FUNCTION"
V L "cX" 0 557 "int8"
F G "LCD_PutCmd" 0 558 "int8(int8 cX)" "this subroutine works specifically for 4-bit Port A"
C L "LCD_PutCmd" 0 12 1 "FUNCTION"
C L "LCD_PutCmd" 0 12 1 "FUNCTION"
F G "LCD_PulseEnable" 0 567 "int8(int8 cX)"
V L "cX" 0 574 "int8"
F G "LCD_SetData" 0 575 "int8(int8 cX)"
