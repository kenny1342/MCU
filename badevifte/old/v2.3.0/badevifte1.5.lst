CCS PCM C Compiler, Version 4.013, 28193               15-okt-07 22:49

               Filename: \\10.0.0.13\storage\Elektronikk\PIC\badevifte\badevifte1.5.lst

               ROM used: 3842 words (47%)
                         Largest free fragment is 2048
               RAM used: 30 (8%) at main() level
                         111 (30%) worst case
               Stack:    6 worst case (5 in main + 1 for interrupts)

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   681
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   030
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   27,W
0028:  MOVWF  7B
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   109
.................... /* 
....................  
.................... Datastyring for baderomsvifte, basert på relativ luftfuktighet 
....................  
.................... Ken-Roger Andersen Oktober 2007 
....................  
.................... v2.2: Lagt inn temperatur sensor (NTC 1k@25°C) + menyvalget for visning av settings 
.................... v1.5: Fjernet OK knappen for valg av modus. Modus velges kun med 1 bryter, ettersom menyvalg increments, går den automatisk 
.................... til denne modusen. 
....................  
....................  
.................... */ 
....................  
.................... #include <16F876.H> 
.................... //////// Standard Header file for the PIC16F876 device //////////////// 
.................... #device PIC16F876 
.................... #list 
....................  
....................  
.................... #device ADC=10 
....................  
....................  
.................... #include <kenny.h> 
.................... #case 
....................  
.................... #ifndef TRUE 
.................... #define TRUE 1 
.................... #endif 
....................  
.................... #ifndef FALSE 
.................... #define FALSE 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO 0 
.................... #endif 
....................  
.................... #ifndef HIGH 
.................... #define HIGH 1 
.................... #endif 
....................  
.................... #ifndef LOW 
.................... #define LOW 0 
.................... #endif 
....................  
.................... #ifndef ON 
.................... #define ON 1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef UP 
.................... #define UP 1 
.................... #endif 
....................  
.................... #ifndef DOWN 
.................... #define DOWN 0 
.................... #endif 
....................  
.................... #ifndef UCHAR 
.................... #define UCHAR char 
.................... #endif 
....................  
.................... #ifndef UINT 
.................... #define UINT long 
.................... #endif 
....................  
.................... #ifndef BIT 
.................... #define BIT short 
.................... #endif 
....................  
.................... #ifndef SCHAR 
.................... #define SCHAR signed int 
.................... #endif 
....................  
.................... #ifndef SINT 
.................... #define SINT signed long 
.................... #endif 
....................  
.................... #ifndef FLOAT 
.................... #define FLOAT float 
.................... #endif 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.141592654 
....................  
....................  
.................... #define SQRT2  1.41421356 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float CEIL_FLOOR(float x, int n) 
.................... { 
....................    float y, res; 
....................    long l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float)(long)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (long)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float)l); 
....................   res = 32768.0*(float)l; 
....................   res += (float)(long)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float)(long)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float floor(float x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float ceil(float x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //	float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float x,float y) 
.................... { 
....................    float i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
....................  
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
....................  
.................... #define LN2 0.6931471806 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... float exp(float x) 
.................... { 
....................    float y, res, r; 
....................    signed int n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed long)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................    *(&res) = n + 0x7F; 
....................  
....................    y = y/LN2 - (float)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... /************************************************************/ 
....................  
.................... float const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float log(float x) 
.................... { 
....................    float y, res, r, y2; 
....................    signed n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
08D0:  MOVF   56,W
08D1:  MOVWF  5A
08D2:  MOVF   55,W
08D3:  MOVWF  59
08D4:  MOVF   54,W
08D5:  MOVWF  58
08D6:  MOVF   53,W
08D7:  MOVWF  57
....................  
....................    if (y != 1.0) 
08D8:  MOVF   5A,W
08D9:  MOVWF  6B
08DA:  MOVF   59,W
08DB:  MOVWF  6A
08DC:  MOVF   58,W
08DD:  MOVWF  69
08DE:  MOVF   57,W
08DF:  MOVWF  68
08E0:  CLRF   6F
08E1:  CLRF   6E
08E2:  CLRF   6D
08E3:  MOVLW  7F
08E4:  MOVWF  6C
08E5:  BCF    0A.3
08E6:  CALL   592
08E7:  BSF    0A.3
08E8:  BTFSC  03.2
08E9:  GOTO   32B
....................    { 
....................       *(&y) = 0x7E; 
08EA:  CLRF   7A
08EB:  MOVLW  57
08EC:  MOVWF  04
08ED:  BCF    03.7
08EE:  BTFSC  7A.0
08EF:  BSF    03.7
08F0:  MOVLW  7E
08F1:  MOVWF  00
....................  
....................       y = (y - 1.0)/(y + 1.0); 
08F2:  BSF    03.1
08F3:  MOVF   5A,W
08F4:  MOVWF  6F
08F5:  MOVF   59,W
08F6:  MOVWF  6E
08F7:  MOVF   58,W
08F8:  MOVWF  6D
08F9:  MOVF   57,W
08FA:  MOVWF  6C
08FB:  CLRF   73
08FC:  CLRF   72
08FD:  CLRF   71
08FE:  MOVLW  7F
08FF:  MOVWF  70
0900:  BCF    0A.3
0901:  CALL   37F
0902:  BSF    0A.3
0903:  MOVF   77,W
0904:  MOVWF  68
0905:  MOVF   78,W
0906:  MOVWF  69
0907:  MOVF   79,W
0908:  MOVWF  6A
0909:  MOVF   7A,W
090A:  MOVWF  6B
090B:  BCF    03.1
090C:  MOVF   5A,W
090D:  MOVWF  6F
090E:  MOVF   59,W
090F:  MOVWF  6E
0910:  MOVF   58,W
0911:  MOVWF  6D
0912:  MOVF   57,W
0913:  MOVWF  6C
0914:  CLRF   73
0915:  CLRF   72
0916:  CLRF   71
0917:  MOVLW  7F
0918:  MOVWF  70
0919:  BCF    0A.3
091A:  CALL   37F
091B:  BSF    0A.3
091C:  MOVF   6B,W
091D:  MOVWF  6F
091E:  MOVF   6A,W
091F:  MOVWF  6E
0920:  MOVF   69,W
0921:  MOVWF  6D
0922:  MOVF   68,W
0923:  MOVWF  6C
0924:  MOVF   7A,W
0925:  MOVWF  73
0926:  MOVF   79,W
0927:  MOVWF  72
0928:  MOVF   78,W
0929:  MOVWF  71
092A:  MOVF   77,W
092B:  MOVWF  70
092C:  BCF    0A.3
092D:  CALL   229
092E:  BSF    0A.3
092F:  MOVF   7A,W
0930:  MOVWF  5A
0931:  MOVF   79,W
0932:  MOVWF  59
0933:  MOVF   78,W
0934:  MOVWF  58
0935:  MOVF   77,W
0936:  MOVWF  57
....................  
....................       y2=y*y; 
0937:  MOVF   5A,W
0938:  MOVWF  6B
0939:  MOVF   59,W
093A:  MOVWF  6A
093B:  MOVF   58,W
093C:  MOVWF  69
093D:  MOVF   57,W
093E:  MOVWF  68
093F:  MOVF   5A,W
0940:  MOVWF  6F
0941:  MOVF   59,W
0942:  MOVWF  6E
0943:  MOVF   58,W
0944:  MOVWF  6D
0945:  MOVF   57,W
0946:  MOVWF  6C
0947:  BCF    0A.3
0948:  CALL   30A
0949:  BSF    0A.3
094A:  MOVF   7A,W
094B:  MOVWF  66
094C:  MOVF   79,W
094D:  MOVWF  65
094E:  MOVF   78,W
094F:  MOVWF  64
0950:  MOVF   77,W
0951:  MOVWF  63
....................  
....................       res = pl[0]*y2 + pl[1]; 
0952:  MOVLW  BC
0953:  MOVWF  6B
0954:  MOVLW  24
0955:  MOVWF  6A
0956:  MOVLW  67
0957:  MOVWF  69
0958:  MOVLW  7D
0959:  MOVWF  68
095A:  MOVF   66,W
095B:  MOVWF  6F
095C:  MOVF   65,W
095D:  MOVWF  6E
095E:  MOVF   64,W
095F:  MOVWF  6D
0960:  MOVF   63,W
0961:  MOVWF  6C
0962:  BCF    0A.3
0963:  CALL   30A
0964:  BSF    0A.3
0965:  MOVF   77,W
0966:  MOVWF  68
0967:  MOVF   78,W
0968:  MOVWF  69
0969:  MOVF   79,W
096A:  MOVWF  6A
096B:  MOVF   7A,W
096C:  MOVWF  6B
096D:  BCF    03.1
096E:  MOVF   7A,W
096F:  MOVWF  6F
0970:  MOVF   79,W
0971:  MOVWF  6E
0972:  MOVF   78,W
0973:  MOVWF  6D
0974:  MOVF   77,W
0975:  MOVWF  6C
0976:  MOVLW  E3
0977:  MOVWF  73
0978:  MOVLW  E4
0979:  MOVWF  72
097A:  MOVLW  90
097B:  MOVWF  71
097C:  MOVLW  82
097D:  MOVWF  70
097E:  BCF    0A.3
097F:  CALL   37F
0980:  BSF    0A.3
0981:  MOVF   7A,W
0982:  MOVWF  5E
0983:  MOVF   79,W
0984:  MOVWF  5D
0985:  MOVF   78,W
0986:  MOVWF  5C
0987:  MOVF   77,W
0988:  MOVWF  5B
....................       res = res*y2 + pl[2]; 
0989:  MOVF   5E,W
098A:  MOVWF  6B
098B:  MOVF   5D,W
098C:  MOVWF  6A
098D:  MOVF   5C,W
098E:  MOVWF  69
098F:  MOVF   5B,W
0990:  MOVWF  68
0991:  MOVF   66,W
0992:  MOVWF  6F
0993:  MOVF   65,W
0994:  MOVWF  6E
0995:  MOVF   64,W
0996:  MOVWF  6D
0997:  MOVF   63,W
0998:  MOVWF  6C
0999:  BCF    0A.3
099A:  CALL   30A
099B:  BSF    0A.3
099C:  MOVF   77,W
099D:  MOVWF  68
099E:  MOVF   78,W
099F:  MOVWF  69
09A0:  MOVF   79,W
09A1:  MOVWF  6A
09A2:  MOVF   7A,W
09A3:  MOVWF  6B
09A4:  BCF    03.1
09A5:  MOVF   7A,W
09A6:  MOVWF  6F
09A7:  MOVF   79,W
09A8:  MOVWF  6E
09A9:  MOVF   78,W
09AA:  MOVWF  6D
09AB:  MOVF   77,W
09AC:  MOVWF  6C
09AD:  MOVLW  1C
09AE:  MOVWF  73
09AF:  MOVLW  87
09B0:  MOVWF  72
09B1:  MOVLW  57
09B2:  MOVWF  71
09B3:  MOVLW  83
09B4:  MOVWF  70
09B5:  BCF    0A.3
09B6:  CALL   37F
09B7:  BSF    0A.3
09B8:  MOVF   7A,W
09B9:  MOVWF  5E
09BA:  MOVF   79,W
09BB:  MOVWF  5D
09BC:  MOVF   78,W
09BD:  MOVWF  5C
09BE:  MOVF   77,W
09BF:  MOVWF  5B
....................       res = res*y2 + pl[3]; 
09C0:  MOVF   5E,W
09C1:  MOVWF  6B
09C2:  MOVF   5D,W
09C3:  MOVWF  6A
09C4:  MOVF   5C,W
09C5:  MOVWF  69
09C6:  MOVF   5B,W
09C7:  MOVWF  68
09C8:  MOVF   66,W
09C9:  MOVWF  6F
09CA:  MOVF   65,W
09CB:  MOVWF  6E
09CC:  MOVF   64,W
09CD:  MOVWF  6D
09CE:  MOVF   63,W
09CF:  MOVWF  6C
09D0:  BCF    0A.3
09D1:  CALL   30A
09D2:  BSF    0A.3
09D3:  MOVF   77,W
09D4:  MOVWF  68
09D5:  MOVF   78,W
09D6:  MOVWF  69
09D7:  MOVF   79,W
09D8:  MOVWF  6A
09D9:  MOVF   7A,W
09DA:  MOVWF  6B
09DB:  BCF    03.1
09DC:  MOVF   7A,W
09DD:  MOVWF  6F
09DE:  MOVF   79,W
09DF:  MOVWF  6E
09E0:  MOVF   78,W
09E1:  MOVWF  6D
09E2:  MOVF   77,W
09E3:  MOVWF  6C
09E4:  MOVLW  AB
09E5:  MOVWF  73
09E6:  MOVLW  E1
09E7:  MOVWF  72
09E8:  MOVLW  9E
09E9:  MOVWF  71
09EA:  MOVLW  83
09EB:  MOVWF  70
09EC:  BCF    0A.3
09ED:  CALL   37F
09EE:  BSF    0A.3
09EF:  MOVF   7A,W
09F0:  MOVWF  5E
09F1:  MOVF   79,W
09F2:  MOVWF  5D
09F3:  MOVF   78,W
09F4:  MOVWF  5C
09F5:  MOVF   77,W
09F6:  MOVWF  5B
....................  
....................       r = ql[0]*y2 + ql[1]; 
09F7:  CLRF   6B
09F8:  CLRF   6A
09F9:  CLRF   69
09FA:  MOVLW  7F
09FB:  MOVWF  68
09FC:  MOVF   66,W
09FD:  MOVWF  6F
09FE:  MOVF   65,W
09FF:  MOVWF  6E
0A00:  MOVF   64,W
0A01:  MOVWF  6D
0A02:  MOVF   63,W
0A03:  MOVWF  6C
0A04:  BCF    0A.3
0A05:  CALL   30A
0A06:  BSF    0A.3
0A07:  MOVF   77,W
0A08:  MOVWF  68
0A09:  MOVF   78,W
0A0A:  MOVWF  69
0A0B:  MOVF   79,W
0A0C:  MOVWF  6A
0A0D:  MOVF   7A,W
0A0E:  MOVWF  6B
0A0F:  BCF    03.1
0A10:  MOVF   7A,W
0A11:  MOVWF  6F
0A12:  MOVF   79,W
0A13:  MOVWF  6E
0A14:  MOVF   78,W
0A15:  MOVWF  6D
0A16:  MOVF   77,W
0A17:  MOVWF  6C
0A18:  MOVLW  B4
0A19:  MOVWF  73
0A1A:  MOVLW  2A
0A1B:  MOVWF  72
0A1C:  MOVLW  82
0A1D:  MOVWF  71
0A1E:  MOVWF  70
0A1F:  BCF    0A.3
0A20:  CALL   37F
0A21:  BSF    0A.3
0A22:  MOVF   7A,W
0A23:  MOVWF  62
0A24:  MOVF   79,W
0A25:  MOVWF  61
0A26:  MOVF   78,W
0A27:  MOVWF  60
0A28:  MOVF   77,W
0A29:  MOVWF  5F
....................       r = r*y2 + ql[2]; 
0A2A:  MOVF   62,W
0A2B:  MOVWF  6B
0A2C:  MOVF   61,W
0A2D:  MOVWF  6A
0A2E:  MOVF   60,W
0A2F:  MOVWF  69
0A30:  MOVF   5F,W
0A31:  MOVWF  68
0A32:  MOVF   66,W
0A33:  MOVWF  6F
0A34:  MOVF   65,W
0A35:  MOVWF  6E
0A36:  MOVF   64,W
0A37:  MOVWF  6D
0A38:  MOVF   63,W
0A39:  MOVWF  6C
0A3A:  BCF    0A.3
0A3B:  CALL   30A
0A3C:  BSF    0A.3
0A3D:  MOVF   77,W
0A3E:  MOVWF  68
0A3F:  MOVF   78,W
0A40:  MOVWF  69
0A41:  MOVF   79,W
0A42:  MOVWF  6A
0A43:  MOVF   7A,W
0A44:  MOVWF  6B
0A45:  BCF    03.1
0A46:  MOVF   7A,W
0A47:  MOVWF  6F
0A48:  MOVF   79,W
0A49:  MOVWF  6E
0A4A:  MOVF   78,W
0A4B:  MOVWF  6D
0A4C:  MOVF   77,W
0A4D:  MOVWF  6C
0A4E:  MOVLW  80
0A4F:  MOVWF  73
0A50:  MOVLW  3E
0A51:  MOVWF  72
0A52:  MOVLW  06
0A53:  MOVWF  71
0A54:  MOVLW  83
0A55:  MOVWF  70
0A56:  BCF    0A.3
0A57:  CALL   37F
0A58:  BSF    0A.3
0A59:  MOVF   7A,W
0A5A:  MOVWF  62
0A5B:  MOVF   79,W
0A5C:  MOVWF  61
0A5D:  MOVF   78,W
0A5E:  MOVWF  60
0A5F:  MOVF   77,W
0A60:  MOVWF  5F
....................       r = r*y2 + ql[3]; 
0A61:  MOVF   62,W
0A62:  MOVWF  6B
0A63:  MOVF   61,W
0A64:  MOVWF  6A
0A65:  MOVF   60,W
0A66:  MOVWF  69
0A67:  MOVF   5F,W
0A68:  MOVWF  68
0A69:  MOVF   66,W
0A6A:  MOVWF  6F
0A6B:  MOVF   65,W
0A6C:  MOVWF  6E
0A6D:  MOVF   64,W
0A6E:  MOVWF  6D
0A6F:  MOVF   63,W
0A70:  MOVWF  6C
0A71:  BCF    0A.3
0A72:  CALL   30A
0A73:  BSF    0A.3
0A74:  MOVF   77,W
0A75:  MOVWF  68
0A76:  MOVF   78,W
0A77:  MOVWF  69
0A78:  MOVF   79,W
0A79:  MOVWF  6A
0A7A:  MOVF   7A,W
0A7B:  MOVWF  6B
0A7C:  BCF    03.1
0A7D:  MOVF   7A,W
0A7E:  MOVWF  6F
0A7F:  MOVF   79,W
0A80:  MOVWF  6E
0A81:  MOVF   78,W
0A82:  MOVWF  6D
0A83:  MOVF   77,W
0A84:  MOVWF  6C
0A85:  MOVLW  AB
0A86:  MOVWF  73
0A87:  MOVLW  E1
0A88:  MOVWF  72
0A89:  MOVLW  9E
0A8A:  MOVWF  71
0A8B:  MOVLW  82
0A8C:  MOVWF  70
0A8D:  BCF    0A.3
0A8E:  CALL   37F
0A8F:  BSF    0A.3
0A90:  MOVF   7A,W
0A91:  MOVWF  62
0A92:  MOVF   79,W
0A93:  MOVWF  61
0A94:  MOVF   78,W
0A95:  MOVWF  60
0A96:  MOVF   77,W
0A97:  MOVWF  5F
....................  
....................       res = y*res/r; 
0A98:  MOVF   5A,W
0A99:  MOVWF  6B
0A9A:  MOVF   59,W
0A9B:  MOVWF  6A
0A9C:  MOVF   58,W
0A9D:  MOVWF  69
0A9E:  MOVF   57,W
0A9F:  MOVWF  68
0AA0:  MOVF   5E,W
0AA1:  MOVWF  6F
0AA2:  MOVF   5D,W
0AA3:  MOVWF  6E
0AA4:  MOVF   5C,W
0AA5:  MOVWF  6D
0AA6:  MOVF   5B,W
0AA7:  MOVWF  6C
0AA8:  BCF    0A.3
0AA9:  CALL   30A
0AAA:  BSF    0A.3
0AAB:  MOVF   77,W
0AAC:  MOVWF  68
0AAD:  MOVF   78,W
0AAE:  MOVWF  69
0AAF:  MOVF   79,W
0AB0:  MOVWF  6A
0AB1:  MOVF   7A,W
0AB2:  MOVWF  6B
0AB3:  MOVWF  6F
0AB4:  MOVF   79,W
0AB5:  MOVWF  6E
0AB6:  MOVF   78,W
0AB7:  MOVWF  6D
0AB8:  MOVF   77,W
0AB9:  MOVWF  6C
0ABA:  MOVF   62,W
0ABB:  MOVWF  73
0ABC:  MOVF   61,W
0ABD:  MOVWF  72
0ABE:  MOVF   60,W
0ABF:  MOVWF  71
0AC0:  MOVF   5F,W
0AC1:  MOVWF  70
0AC2:  BCF    0A.3
0AC3:  CALL   229
0AC4:  BSF    0A.3
0AC5:  MOVF   7A,W
0AC6:  MOVWF  5E
0AC7:  MOVF   79,W
0AC8:  MOVWF  5D
0AC9:  MOVF   78,W
0ACA:  MOVWF  5C
0ACB:  MOVF   77,W
0ACC:  MOVWF  5B
....................  
....................       n = *(&x) - 0x7E; 
0ACD:  CLRF   7A
0ACE:  MOVLW  53
0ACF:  MOVWF  04
0AD0:  BCF    03.7
0AD1:  BTFSC  7A.0
0AD2:  BSF    03.7
0AD3:  MOVLW  7E
0AD4:  SUBWF  00,W
0AD5:  MOVWF  67
....................  
....................       if (n<0) 
0AD6:  BTFSS  67.7
0AD7:  GOTO   2EB
....................          r = -(float)-n; 
0AD8:  MOVF   67,W
0AD9:  SUBLW  00
0ADA:  CLRF   69
0ADB:  MOVWF  68
0ADC:  BTFSC  68.7
0ADD:  DECF   69,F
0ADE:  BCF    0A.3
0ADF:  CALL   700
0AE0:  BSF    0A.3
0AE1:  MOVF   77,W
0AE2:  MOVWF  5F
0AE3:  MOVF   78,W
0AE4:  XORLW  80
0AE5:  MOVWF  60
0AE6:  MOVF   79,W
0AE7:  MOVWF  61
0AE8:  MOVF   7A,W
0AE9:  MOVWF  62
....................       else 
0AEA:  GOTO   2FB
....................          r = (float)n; 
0AEB:  CLRF   69
0AEC:  MOVF   67,W
0AED:  MOVWF  68
0AEE:  BTFSC  68.7
0AEF:  DECF   69,F
0AF0:  BCF    0A.3
0AF1:  CALL   700
0AF2:  BSF    0A.3
0AF3:  MOVF   7A,W
0AF4:  MOVWF  62
0AF5:  MOVF   79,W
0AF6:  MOVWF  61
0AF7:  MOVF   78,W
0AF8:  MOVWF  60
0AF9:  MOVF   77,W
0AFA:  MOVWF  5F
....................  
....................       res += r*LN2; 
0AFB:  MOVF   62,W
0AFC:  MOVWF  6B
0AFD:  MOVF   61,W
0AFE:  MOVWF  6A
0AFF:  MOVF   60,W
0B00:  MOVWF  69
0B01:  MOVF   5F,W
0B02:  MOVWF  68
0B03:  MOVLW  18
0B04:  MOVWF  6F
0B05:  MOVLW  72
0B06:  MOVWF  6E
0B07:  MOVLW  31
0B08:  MOVWF  6D
0B09:  MOVLW  7E
0B0A:  MOVWF  6C
0B0B:  BCF    0A.3
0B0C:  CALL   30A
0B0D:  BSF    0A.3
0B0E:  BCF    03.1
0B0F:  MOVF   5E,W
0B10:  MOVWF  6F
0B11:  MOVF   5D,W
0B12:  MOVWF  6E
0B13:  MOVF   5C,W
0B14:  MOVWF  6D
0B15:  MOVF   5B,W
0B16:  MOVWF  6C
0B17:  MOVF   7A,W
0B18:  MOVWF  73
0B19:  MOVF   79,W
0B1A:  MOVWF  72
0B1B:  MOVF   78,W
0B1C:  MOVWF  71
0B1D:  MOVF   77,W
0B1E:  MOVWF  70
0B1F:  BCF    0A.3
0B20:  CALL   37F
0B21:  BSF    0A.3
0B22:  MOVF   7A,W
0B23:  MOVWF  5E
0B24:  MOVF   79,W
0B25:  MOVWF  5D
0B26:  MOVF   78,W
0B27:  MOVWF  5C
0B28:  MOVF   77,W
0B29:  MOVWF  5B
....................    } 
....................  
....................    else 
0B2A:  GOTO   32F
....................       res = 0.0; 
0B2B:  CLRF   5E
0B2C:  CLRF   5D
0B2D:  CLRF   5C
0B2E:  CLRF   5B
....................  
....................    return(res); 
0B2F:  MOVF   5B,W
0B30:  MOVWF  77
0B31:  MOVF   5C,W
0B32:  MOVWF  78
0B33:  MOVF   5D,W
0B34:  MOVWF  79
0B35:  MOVF   5E,W
0B36:  MOVWF  7A
.................... } 
....................  
.................... #define LN10 2.30258509 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float log10(float x) 
.................... { 
....................    float r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float modf(float value,float *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float pwr(float x,float y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float pow(float x,float y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float sqrt(float x) 
.................... { 
....................    float y, res; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p=&y; 
....................    (*p)=(BYTE)((((int16)(*p)) + 127) >> 1); 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................       (*p)--; 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
....................  
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO	1.570796326794896 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI 			0.6366197724 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float cos(float x) 
.................... { 
.................... 	float y, t, t2 = 1.0; 
.................... 	int quad, i; 
.................... 	float frac; 
.................... 	float p[4] = { 
.................... 		-0.499999993585, 
.................... 		 0.041666636258, 
.................... 		-0.0013888361399, 
.................... 		 0.00002476016134 
.................... 	}; 
....................  
.................... 	if (x < 0) x = -x;                  // absolute value of input 
....................  
.................... 	quad = (int)(x / PI_DIV_BY_TWO);    // quadrant 
.................... 	frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
.................... 	quad = quad % 4;                    // quadrant (0 to 3) 
....................  
.................... 	if (quad == 0 || quad == 2) 
.................... 		t = frac * PI_DIV_BY_TWO; 
.................... 	else if (quad == 1) 
.................... 		t = (1-frac) * PI_DIV_BY_TWO; 
.................... 	else // should be 3 
.................... 		t = (frac-1) * PI_DIV_BY_TWO; 
....................  
.................... 	y = 0.999999999781; 
.................... 	t = t * t; 
.................... 	for (i = 0; i <= 3; i++) 
.................... 	{ 
.................... 		t2 = t2 * t; 
.................... 		y = y + p[i] * t2; 
.................... 	} 
....................  
.................... 	if (quad == 2 || quad == 1) 
.................... 		y = -y;  // correct sign 
....................  
.................... 	return (y); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float sin(float x) 
.................... { 
.................... 	return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float tan(float x) 
.................... { 
....................    float c, s; 
....................  
....................    c = cos(x); 
.................... 	if (c == 0.0) 
.................... 	   return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
....................  
....................  
.................... float const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float ASIN_COS(float x, int n) 
.................... { 
....................    float y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float asin(float x) 
.................... { 
....................    float r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float acos(float x) 
.................... { 
....................    float r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... float const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float atan(float x) 
.................... { 
....................    float y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //	float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
....................  
.................... float atan2(float y,float x) 
.................... { 
....................    float z; 
....................    int1 sign; 
....................    int quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float cosh(float x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float sinh(float x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float tanh(float x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
....................  
....................  
.................... #define LOG2 .30102999566398119521 
.................... float frexp(float x, signed int *exp) 
.................... { 
....................    float res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //	float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float ldexp(float value, signed int exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #include <ntc.h> 
.................... /* 
....................  * Written by Kenny 
....................  * 
....................  */ 
.................... int r2temperature(float ohm); 
.................... float adc_2_ohm(int adc_value); 
....................  
.................... /* Note on calibration: many household thermometers are much worse than 
.................... * a not calibrated version of this thermometer. You many do more damage than 
.................... * good if you change too much here 
.................... */ 
....................  
.................... /* all calibrations should be done here if needed. Normally you will 
.................... * only compensate the variance in the value of the 10k resistor and 
.................... * the 1k NTC. The 78L05 has also influence. This all can be adjusted 
.................... * changing NTC_RN a bit. 
.................... */ 
....................  
.................... /* NTC temperature constant "B"-value: 3977K +/- 1% */ 
.................... // usually between 2000k - 5000k, I don't know the type i'm using, trial and error... 
.................... #define NTC_B 3977 
.................... /* 1 kOhm at 25 degree celsius */ 
.................... #define NTC_TN 25 
.................... /* 1 kOhm +/- 10%, change for calibration: */ 
.................... #define NTC_RN 1000 
....................  
....................  
.................... #include "ntc.c" 
....................  
....................  
.................... /* this function converts the ADC value into an Ohm value of the NTC 
....................  * here AVcc=5V is used as reference voltage 
....................  */ 
.................... float adc_2_ohm(int adc_value) 
.................... { 
.................... 	float ohm; 
....................  
.................... 	// 10bit adc=0..1023 over a voltage range from 0-5V 
.................... 	// Uref=5V = VDD 
.................... 	// 10000 / ( 1024/adc_value  - 1) -> ohm 
.................... 	// 
.................... 	// +5V 
.................... 	// ---+ 
.................... 	//    # 
.................... 	//    # 10k constant resistor 
.................... 	//    |---------> Uadc 
.................... 	//    # 
.................... 	//    # ntc 1k 
.................... 	// ---+ 
.................... 	// 
.................... 	// ADCval= Uadc * (1024/Uref) 
.................... 	// Rntc= 10K * ( 1 / ((5V/Uadc) -1) ) 
.................... 	if (adc_value < 1){ 
*
0815:  MOVF   49,F
0816:  BTFSS  03.2
0817:  GOTO   01A
.................... 		// never divide by zero: 
.................... 		adc_value=1; 
0818:  MOVLW  01
0819:  MOVWF  49
.................... 	} 
.................... 	ohm=10000.0 / (( 1024.0 / adc_value ) - 1 ); 
081A:  CLRF   50
081B:  MOVF   49,W
081C:  MOVWF  4F
081D:  BCF    0A.3
081E:  CALL   20C
081F:  BSF    0A.3
0820:  CLRF   6F
0821:  CLRF   6E
0822:  CLRF   6D
0823:  MOVLW  89
0824:  MOVWF  6C
0825:  MOVF   7A,W
0826:  MOVWF  73
0827:  MOVF   79,W
0828:  MOVWF  72
0829:  MOVF   78,W
082A:  MOVWF  71
082B:  MOVF   77,W
082C:  MOVWF  70
082D:  BCF    0A.3
082E:  CALL   229
082F:  BSF    0A.3
0830:  MOVF   77,W
0831:  MOVWF  4E
0832:  MOVF   78,W
0833:  MOVWF  4F
0834:  MOVF   79,W
0835:  MOVWF  50
0836:  MOVF   7A,W
0837:  MOVWF  51
0838:  BSF    03.1
0839:  MOVF   7A,W
083A:  MOVWF  6F
083B:  MOVF   79,W
083C:  MOVWF  6E
083D:  MOVF   78,W
083E:  MOVWF  6D
083F:  MOVF   77,W
0840:  MOVWF  6C
0841:  CLRF   73
0842:  CLRF   72
0843:  CLRF   71
0844:  MOVLW  7F
0845:  MOVWF  70
0846:  BCF    0A.3
0847:  CALL   37F
0848:  BSF    0A.3
0849:  CLRF   6F
084A:  MOVLW  40
084B:  MOVWF  6E
084C:  MOVLW  1C
084D:  MOVWF  6D
084E:  MOVLW  8C
084F:  MOVWF  6C
0850:  MOVF   7A,W
0851:  MOVWF  73
0852:  MOVF   79,W
0853:  MOVWF  72
0854:  MOVF   78,W
0855:  MOVWF  71
0856:  MOVF   77,W
0857:  MOVWF  70
0858:  BCF    0A.3
0859:  CALL   229
085A:  BSF    0A.3
085B:  MOVF   7A,W
085C:  MOVWF  4D
085D:  MOVF   79,W
085E:  MOVWF  4C
085F:  MOVF   78,W
0860:  MOVWF  4B
0861:  MOVF   77,W
0862:  MOVWF  4A
.................... 	return(ohm); 
0863:  MOVF   4A,W
0864:  MOVWF  77
0865:  MOVF   4B,W
0866:  MOVWF  78
0867:  MOVF   4C,W
0868:  MOVWF  79
0869:  MOVF   4D,W
086A:  MOVWF  7A
.................... } 
....................  
....................  
.................... /* convert a ntc resistance value given in kohm to 
....................  * temperature in celsius. The NTC follows a exponential 
....................  * characteristic. */ 
.................... int r2temperature(float ohm) 
.................... { 
.................... 	int tcelsius, tmp; 
....................  
....................  
.................... 	tcelsius = 100; 
*
087B:  MOVLW  64
087C:  MOVWF  4D
.................... 	tmp=1; 
087D:  MOVLW  01
087E:  MOVWF  4E
....................  
.................... 	if ((ohm/NTC_RN) < 0.1){ 
087F:  MOVF   4C,W
0880:  MOVWF  6F
0881:  MOVF   4B,W
0882:  MOVWF  6E
0883:  MOVF   4A,W
0884:  MOVWF  6D
0885:  MOVF   49,W
0886:  MOVWF  6C
0887:  CLRF   73
0888:  CLRF   72
0889:  MOVLW  7A
088A:  MOVWF  71
088B:  MOVLW  88
088C:  MOVWF  70
088D:  BCF    0A.3
088E:  CALL   229
088F:  BSF    0A.3
0890:  MOVF   77,W
0891:  MOVWF  4F
0892:  MOVF   78,W
0893:  MOVWF  50
0894:  MOVF   79,W
0895:  MOVWF  51
0896:  MOVF   7A,W
0897:  MOVWF  52
0898:  MOVWF  6B
0899:  MOVF   51,W
089A:  MOVWF  6A
089B:  MOVF   50,W
089C:  MOVWF  69
089D:  MOVF   4F,W
089E:  MOVWF  68
089F:  MOVLW  CD
08A0:  MOVWF  6F
08A1:  MOVLW  CC
08A2:  MOVWF  6E
08A3:  MOVLW  4C
08A4:  MOVWF  6D
08A5:  MOVLW  7B
08A6:  MOVWF  6C
08A7:  BCF    0A.3
08A8:  CALL   592
08A9:  BSF    0A.3
08AA:  BTFSS  03.0
08AB:  GOTO   0AF
.................... 		//ERROR: resistance value of NTC is too small (too hot here ;-) 
.................... 		return(tcelsius); 
08AC:  MOVF   4D,W
08AD:  MOVWF  78
08AE:  GOTO   3BE
.................... 	} 
.................... 	tmp=( (1.0/NTC_B) * log( (ohm/NTC_RN) ) ) + ( 1 / (NTC_TN+273.0) ); 
08AF:  MOVF   4C,W
08B0:  MOVWF  6F
08B1:  MOVF   4B,W
08B2:  MOVWF  6E
08B3:  MOVF   4A,W
08B4:  MOVWF  6D
08B5:  MOVF   49,W
08B6:  MOVWF  6C
08B7:  CLRF   73
08B8:  CLRF   72
08B9:  MOVLW  7A
08BA:  MOVWF  71
08BB:  MOVLW  88
08BC:  MOVWF  70
08BD:  BCF    0A.3
08BE:  CALL   229
08BF:  BSF    0A.3
08C0:  MOVF   77,W
08C1:  MOVWF  4F
08C2:  MOVF   78,W
08C3:  MOVWF  50
08C4:  MOVF   79,W
08C5:  MOVWF  51
08C6:  MOVF   7A,W
08C7:  MOVWF  52
08C8:  MOVF   52,W
08C9:  MOVWF  56
08CA:  MOVF   51,W
08CB:  MOVWF  55
08CC:  MOVF   50,W
08CD:  MOVWF  54
08CE:  MOVF   4F,W
08CF:  MOVWF  53
*
0B37:  MOVLW  7C
0B38:  MOVWF  6B
0B39:  MOVLW  D4
0B3A:  MOVWF  6A
0B3B:  MOVLW  03
0B3C:  MOVWF  69
0B3D:  MOVLW  73
0B3E:  MOVWF  68
0B3F:  MOVF   7A,W
0B40:  MOVWF  6F
0B41:  MOVF   79,W
0B42:  MOVWF  6E
0B43:  MOVF   78,W
0B44:  MOVWF  6D
0B45:  MOVF   77,W
0B46:  MOVWF  6C
0B47:  BCF    0A.3
0B48:  CALL   30A
0B49:  BSF    0A.3
0B4A:  MOVF   77,W
0B4B:  MOVWF  50
0B4C:  MOVF   78,W
0B4D:  MOVWF  51
0B4E:  MOVF   79,W
0B4F:  MOVWF  52
0B50:  MOVF   7A,W
0B51:  MOVWF  53
0B52:  CLRF   55
0B53:  MOVF   04,W
0B54:  MOVWF  54
0B55:  BCF    55.0
0B56:  BTFSC  03.7
0B57:  BSF    55.0
0B58:  BCF    03.1
0B59:  MOVF   7A,W
0B5A:  MOVWF  6F
0B5B:  MOVF   79,W
0B5C:  MOVWF  6E
0B5D:  MOVF   78,W
0B5E:  MOVWF  6D
0B5F:  MOVF   77,W
0B60:  MOVWF  6C
0B61:  MOVLW  62
0B62:  MOVWF  73
0B63:  MOVLW  EB
0B64:  MOVWF  72
0B65:  MOVLW  5B
0B66:  MOVWF  71
0B67:  MOVLW  76
0B68:  MOVWF  70
0B69:  BCF    0A.3
0B6A:  CALL   37F
0B6B:  BSF    0A.3
0B6C:  MOVF   54,W
0B6D:  MOVWF  04
0B6E:  BCF    03.7
0B6F:  BTFSC  55.0
0B70:  BSF    03.7
0B71:  MOVF   7A,W
0B72:  MOVWF  59
0B73:  MOVF   79,W
0B74:  MOVWF  58
0B75:  MOVF   78,W
0B76:  MOVWF  57
0B77:  MOVF   77,W
0B78:  MOVWF  56
0B79:  BCF    0A.3
0B7A:  CALL   725
0B7B:  BSF    0A.3
0B7C:  MOVF   78,W
0B7D:  MOVWF  4E
....................  
.................... 	tcelsius=(1.0/tmp) -273; 
0B7E:  CLRF   50
0B7F:  MOVF   4E,W
0B80:  MOVWF  4F
0B81:  BCF    0A.3
0B82:  CALL   20C
0B83:  BSF    0A.3
0B84:  CLRF   6F
0B85:  CLRF   6E
0B86:  CLRF   6D
0B87:  MOVLW  7F
0B88:  MOVWF  6C
0B89:  MOVF   7A,W
0B8A:  MOVWF  73
0B8B:  MOVF   79,W
0B8C:  MOVWF  72
0B8D:  MOVF   78,W
0B8E:  MOVWF  71
0B8F:  MOVF   77,W
0B90:  MOVWF  70
0B91:  BCF    0A.3
0B92:  CALL   229
0B93:  BSF    0A.3
0B94:  MOVF   77,W
0B95:  MOVWF  4F
0B96:  MOVF   78,W
0B97:  MOVWF  50
0B98:  MOVF   79,W
0B99:  MOVWF  51
0B9A:  MOVF   7A,W
0B9B:  MOVWF  52
0B9C:  BSF    03.1
0B9D:  MOVF   7A,W
0B9E:  MOVWF  6F
0B9F:  MOVF   79,W
0BA0:  MOVWF  6E
0BA1:  MOVF   78,W
0BA2:  MOVWF  6D
0BA3:  MOVF   77,W
0BA4:  MOVWF  6C
0BA5:  CLRF   73
0BA6:  MOVLW  80
0BA7:  MOVWF  72
0BA8:  MOVLW  08
0BA9:  MOVWF  71
0BAA:  MOVLW  87
0BAB:  MOVWF  70
0BAC:  BCF    0A.3
0BAD:  CALL   37F
0BAE:  BSF    0A.3
0BAF:  MOVF   7A,W
0BB0:  MOVWF  59
0BB1:  MOVF   79,W
0BB2:  MOVWF  58
0BB3:  MOVF   78,W
0BB4:  MOVWF  57
0BB5:  MOVF   77,W
0BB6:  MOVWF  56
0BB7:  BCF    0A.3
0BB8:  CALL   725
0BB9:  BSF    0A.3
0BBA:  MOVF   78,W
0BBB:  MOVWF  4D
.................... 	return(tcelsius); 
0BBC:  MOVF   4D,W
0BBD:  MOVWF  78
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
.................... #fuses XT, NOPROTECT, NOPUT, NOWDT, NOBROWNOUT, NOLVP, NOCPD, NOWRT 
....................  
.................... // ADC 
.................... #define VDD                 5.00 
....................  
.................... // LCD STUFF 
.................... #define LCD_D0  PIN_C3 
.................... #define LCD_D1  PIN_C4 
.................... #define LCD_D2  PIN_C5 
.................... #define LCD_D3  PIN_C6 
.................... #define LCD_EN  PIN_B5 
.................... #define LCD_RS  PIN_B6 
.................... #define LINE_1  0x00 
.................... #define LINE_2  0x40 
.................... #define CLEAR_DISP  0x01 
....................  
.................... #define C_PERCENT			0x25 // % = 00100101 = 25 = 0x25 
.................... #define C_DEGREES			0xDF // ° = 11011111 = DF = 0xDF 
....................  
....................  
.................... #define MENU_SWITCH        PIN_C1 
.................... //#define SELECT_SWITCH      PIN_C2 
.................... #define INCLUDE_TEMP_SWITCH		PIN_C2 
....................  
.................... //#define RX_IN               PIN_A4 //pinne 6 RA4 
.................... #define LED_1               PIN_B3 //pinne 24 
.................... #define LED_2               PIN_B4 //pinne 25 
.................... #define FAN_1               PIN_C0 
....................  
.................... #define CMD_NUL     0 
....................  
.................... #define STATE_AUTO         0 
.................... #define STATE_START        1 
.................... #define STATE_STOP         2 
.................... #define STATE_SETTINGS     3 
.................... #define MAX_MENU_STATE     3 
....................  
.................... #define MINIMUM_INTERVAL   1  // minimum minutes to run when auto started (prevent hysteresis) 
.................... #define MAXIMUM_RH         45 // rh % when fan should start 
.................... #define MINIMUM_TEMP       18 // °C, never auto run if under this 
....................  
....................  
.................... #define hi(x)  (*(&x+1)) 
....................  
.................... #use delay ( clock=8000000 ) 
*
0155:  MOVLW  4A
0156:  MOVWF  04
0157:  BCF    03.7
0158:  MOVF   00,W
0159:  BTFSC  03.2
015A:  GOTO   168
015B:  MOVLW  02
015C:  MOVWF  78
015D:  CLRF   77
015E:  DECFSZ 77,F
015F:  GOTO   15E
0160:  DECFSZ 78,F
0161:  GOTO   15D
0162:  MOVLW  97
0163:  MOVWF  77
0164:  DECFSZ 77,F
0165:  GOTO   164
0166:  DECFSZ 00,F
0167:  GOTO   15B
0168:  RETLW  00
.................... #use standard_io ( A ) 
.................... #use standard_io ( B ) 
.................... #use standard_io ( C ) 
*
0E8A:  MOVLW  FF
0E8B:  BCF    03.5
0E8C:  MOVWF  28
....................  
....................  
.................... void LCD_Init ( void ); 
.................... void LCD_SetPosition ( unsigned int cX ); 
.................... void LCD_PutChar ( unsigned int cX ); 
.................... void LCD_PutCmd ( unsigned int cX ); 
.................... void LCD_PulseEnable ( void ); 
.................... void LCD_SetData ( unsigned int cX ); 
.................... void PrintMenu ( void );       // protos 
.................... void SetTime ( void ); 
.................... void CheckSwitches ( void ); 
.................... void printVersionInfo ( void ); 
.................... void DisplayData ( void ); 
.................... void StartFan ( void ); 
.................... void StopFan ( void ); 
.................... void AutoFan ( void ); 
.................... float getRH ( void ); 
.................... float getTemp ( void ); 
....................  
.................... //void DisplayData ( long iAdcValue, char cLoc ); 
....................  
.................... static char cDisplayDataFlag, cFan1Flag; 
0E8D:  CLRF   29
0E8E:  CLRF   2A
.................... static char cInterruptCount; 
0E8F:  CLRF   2B
.................... static char cMenuState, cSelectFlag; 
0E90:  CLRF   2C
0E91:  CLRF   2D
.................... static char cMenuSwitchOn, cMenuSwitchCount; 
0E92:  CLRF   2E
0E93:  CLRF   2F
.................... static char cSelectSwitchOn, cSelectSwitchCount; 
0E94:  CLRF   30
0E95:  CLRF   31
.................... static char cDisplayUpdate, cToggleFlag; 
0E96:  CLRF   32
0E97:  CLRF   33
.................... static char cFan1RunTime, cFan1AutoState, /*cFan1IsAutoMode,*/ cFan1CanStop; 
0E98:  CLRF   34
0E99:  CLRF   35
0E9A:  CLRF   36
....................  
....................  
.................... /*******************************************************************/ 
....................  
.................... /* 
.................... The way to calculate the timing as an 8-bit timer is: 
.................... Fosc/4 /prescaler/256 = freq. 
.................... The main oscillator is divided by four. This is a hardware design and cannot be changed. 
.................... The prescaler is an 8-bit register that can be programmed to one of nine settings to be a 1:1 to 1:256 divider. 
.................... The 8-bit value in the setup statement tells the compiler to configure the timer as an 8-bit timer. 
.................... So, if you have a 20MHZ oscillator running, with the prescaler set to 8 the formula is: 
.................... 20MHZ/4/8/256 = 20,000,000 /4 / 8 / 256 
.................... This will give you aproximately 2441 interrupts each second or an interrupt every 409uS. 
....................  
....................  
.................... Fra http://www.vermontficks.org/pic_calculations.xls 
.................... (256-C5)*1 / (A5 * 1000000 / B5 / 4) * 1000 
.................... C5: Preset Timer0 count before leaving interrupt (0-255) 
.................... A5: Clock frequency (MHz) 
.................... B5: Prescaler value 
.................... = Resulting interrupt rate (mS) 
....................  
.................... */ 
....................  
.................... //interrupt rate (mS): (256-6)*1 / (8 * 1000000 / 128 / 4) * 1000 = 16,000 
....................  
.................... #int_rtcc 
.................... void TimerInterrupt ( void ) // Gets here every 16.4mS at 8MHz, 8.2mS at 16MHz 
.................... { 
.................... 	if ( cInterruptCount++ >= 31 )      // (16) if one second yet ! TROR DET SKAL VÆRE 31 !!! 
*
0109:  MOVF   2B,W
010A:  INCF   2B,F
010B:  SUBLW  1E
010C:  BTFSC  03.0
010D:  GOTO   13D
.................... 	{ 
....................  
.................... 		cInterruptCount = 0; 
010E:  CLRF   2B
....................  
.................... 		if(cDisplayUpdate ++ == 5) // update disp every 5 sec 
010F:  MOVF   32,W
0110:  INCF   32,F
0111:  SUBLW  05
0112:  BTFSS  03.2
0113:  GOTO   117
.................... 		{ 
.................... 			cDisplayUpdate = 0; 
0114:  CLRF   32
.................... 			cDisplayDataFlag = ON; // signal time to update temp/humidity 
0115:  MOVLW  01
0116:  MOVWF  29
.................... 		} 
....................  
....................  
.................... 		// Fan must run N minutes after auto mode is stopped, to avoid hysteresis 
.................... 		if ( cMenuState == STATE_AUTO && cFan1Flag == ON && cFan1CanStop == NO ) 
0117:  MOVF   2C,F
0118:  BTFSS  03.2
0119:  GOTO   12A
011A:  DECFSZ 2A,W
011B:  GOTO   12A
011C:  MOVF   36,F
011D:  BTFSS  03.2
011E:  GOTO   12A
.................... 		{ 
.................... 			if( cFan1RunTime ++ == ( MINIMUM_INTERVAL * 60 ) ) // (MINIMUM_INTERVAL*60) 
011F:  MOVF   34,W
0120:  INCF   34,F
0121:  SUBLW  3C
0122:  BTFSS  03.2
0123:  GOTO   128
.................... 			{ 
.................... 				cFan1CanStop = YES; // signal ok to turn off fan if rh is under limits 
0124:  MOVLW  01
0125:  MOVWF  36
.................... 				cDisplayDataFlag = ON; // signal time to update temp/humidity 
0126:  MOVWF  29
.................... 			} 
.................... 			else 
0127:  GOTO   129
.................... 			{ 
.................... 				cFan1CanStop = NO; // keep on running 
0128:  CLRF   36
.................... 			} 
.................... 		} 
.................... 		else 
0129:  GOTO   12B
.................... 		{ 
.................... 			cFan1RunTime = 0; 
012A:  CLRF   34
.................... 		} 
....................  
.................... 		//if ( input ( FAN_1 ) == LOW ) 
.................... 		if ( cFan1Flag == ON ) //v1.6 
012B:  DECFSZ 2A,W
012C:  GOTO   13A
.................... 		{ 
.................... 			cToggleFlag ^= 1;              // toggle (blink) LED while fan is running 
012D:  MOVLW  01
012E:  XORWF  33,F
.................... 			if ( cToggleFlag == 1) 
012F:  DECFSZ 33,W
0130:  GOTO   136
.................... 			{ 
.................... 				output_low ( LED_2 ); 
0131:  BSF    03.5
0132:  BCF    06.4
0133:  BCF    03.5
0134:  BCF    06.4
.................... 			} 
.................... 			else 
0135:  GOTO   139
.................... 			{ 
.................... 				output_float ( LED_2 ); 
0136:  BSF    03.5
0137:  BSF    06.4
0138:  BCF    03.5
.................... 			} 
.................... 		} 
.................... 		else 
0139:  GOTO   13D
.................... 		{ 
.................... 			output_float ( LED_2 ); // slå av LED hvis ikke vifte går 
013A:  BSF    03.5
013B:  BSF    06.4
013C:  BCF    03.5
.................... 		} 
....................  
.................... 	} 
.................... // bruk menystate 
.................... // if fan1flag run && rh > limit ikke kjørt output  etc 
....................  
.................... 	if ( input ( MENU_SWITCH ) == LOW ) 
013D:  BSF    28.1
013E:  MOVF   28,W
013F:  BSF    03.5
0140:  MOVWF  07
0141:  BCF    03.5
0142:  BTFSC  07.1
0143:  GOTO   14E
.................... 	{ 
.................... 		if ( cMenuSwitchCount++ == 1 )     // debounce for 30mS, (was 2) 
0144:  MOVF   2F,W
0145:  INCF   2F,F
0146:  SUBLW  01
0147:  BTFSS  03.2
0148:  GOTO   14D
.................... 		{ 
.................... 			cMenuSwitchOn = YES;        // signal that switch was pressed 
0149:  MOVLW  01
014A:  MOVWF  2E
.................... 			cMenuSwitchCount = 240; //cViewing ? 252 : 240;       // set up for auto repeat (faster if viewing) 
014B:  MOVLW  F0
014C:  MOVWF  2F
.................... 		} 
.................... 	} 
.................... 	else 
014D:  GOTO   14F
.................... 	{ 
.................... 		cMenuSwitchCount = 0;             // switch up, restart 
014E:  CLRF   2F
.................... 	} 
....................  
.................... /* 
.................... 	if ( input ( SELECT_SWITCH ) == LOW ) 
.................... 	{ 
.................... 		if ( cSelectSwitchCount++ == 1 )  // debounce for 30mS (was 2) 
.................... 		{ 
.................... 			cSelectSwitchOn = YES;        // signal that switch was pressed 
.................... 			cSelectSwitchCount = 240; // cViewing ? 252 : 240;       // set up for auto repeat (faster if viewing) 
.................... 		} 
.................... 	} 
.................... 	else 
.................... 	{ 
.................... 		cSelectSwitchCount = 0;             // switch is up, restart count 
.................... 	} 
.................... */ 
.................... 	set_rtcc ( 6 );     // Prescaler value, restart at adjusted value for 1-second accuracy 
014F:  MOVLW  06
0150:  MOVWF  01
.................... } 
....................  
.................... //***************************************************************************** 
....................  
0151:  BCF    0B.2
0152:  BCF    0A.3
0153:  BCF    0A.4
0154:  GOTO   01D
.................... void printVersionInfo ( void ) 
.................... { 
.................... 	LCD_SetPosition ( LINE_1 + 0 ); 
*
01EE:  CLRF   3C
01EF:  CALL   1CE
.................... 	printf ( LCD_PutChar, "BADEVIFTE v2.3.0" ); 
01F0:  CLRF   37
01F1:  MOVF   37,W
01F2:  CALL   033
01F3:  INCF   37,F
01F4:  MOVWF  77
01F5:  MOVWF  49
01F6:  CALL   1DB
01F7:  MOVLW  10
01F8:  SUBWF  37,W
01F9:  BTFSS  03.2
01FA:  GOTO   1F1
.................... 	LCD_SetPosition ( LINE_2+ 0 ); 
01FB:  MOVLW  40
01FC:  MOVWF  3C
01FD:  CALL   1CE
.................... 	printf ( LCD_PutChar, "Kenny 15.10.2007" ); 
01FE:  CLRF   37
01FF:  MOVF   37,W
0200:  CALL   048
0201:  INCF   37,F
0202:  MOVWF  77
0203:  MOVWF  49
0204:  CALL   1DB
0205:  MOVLW  10
0206:  SUBWF  37,W
0207:  BTFSS  03.2
0208:  GOTO   1FF
.................... } 
0209:  BSF    0A.3
020A:  BCF    0A.4
020B:  GOTO   6CC (RETURN)
....................  
.................... void main ( void ) 
.................... { 
*
0E81:  CLRF   04
0E82:  BCF    03.7
0E83:  MOVLW  1F
0E84:  ANDWF  03,F
0E85:  BSF    03.5
0E86:  BSF    1F.0
0E87:  BSF    1F.1
0E88:  BSF    1F.2
0E89:  BCF    1F.3
.................... 	//char recChar; 
.................... 	delay_ms ( 200 );           // wait enough time after VDD rise 
*
0E9B:  MOVLW  C8
0E9C:  MOVWF  4A
0E9D:  BCF    0A.3
0E9E:  CALL   155
0E9F:  BSF    0A.3
.................... 	setup_counters ( RTCC_INTERNAL, RTCC_DIV_128 );       // 16mS roll @8MHz 
0EA0:  MOVLW  06
0EA1:  MOVWF  77
0EA2:  BTFSS  77.3
0EA3:  GOTO   6AD
0EA4:  MOVLW  07
0EA5:  CLRF   01
0EA6:  MOVLW  81
0EA7:  MOVWF  04
0EA8:  BCF    03.7
0EA9:  MOVF   00,W
0EAA:  ANDLW  C0
0EAB:  IORLW  0F
0EAC:  MOVWF  00
0EAD:  CLRWDT
0EAE:  MOVLW  81
0EAF:  MOVWF  04
0EB0:  MOVF   00,W
0EB1:  ANDLW  C0
0EB2:  IORWF  77,W
0EB3:  MOVWF  00
....................  
.................... 	output_low ( FAN_1 ); 
0EB4:  BCF    28.0
0EB5:  MOVF   28,W
0EB6:  BSF    03.5
0EB7:  MOVWF  07
0EB8:  BCF    03.5
0EB9:  BCF    07.0
.................... 	output_low ( LED_1 ); 
0EBA:  BSF    03.5
0EBB:  BCF    06.3
0EBC:  BCF    03.5
0EBD:  BCF    06.3
.................... 	output_low ( LED_2 ); 
0EBE:  BSF    03.5
0EBF:  BCF    06.4
0EC0:  BCF    03.5
0EC1:  BCF    06.4
....................  
....................  
.................... 	LCD_Init(); 
0EC2:  BCF    0A.3
0EC3:  CALL   1AE
0EC4:  BSF    0A.3
.................... 	LCD_PutCmd ( CLEAR_DISP ); 
0EC5:  MOVLW  01
0EC6:  MOVWF  37
0EC7:  BCF    0A.3
0EC8:  CALL   1A3
0EC9:  BSF    0A.3
....................  
.................... 	printVersionInfo(); 
0ECA:  BCF    0A.3
0ECB:  GOTO   1EE
0ECC:  BSF    0A.3
.................... 	delay_ms ( 5000 ); 
0ECD:  MOVLW  14
0ECE:  MOVWF  37
0ECF:  MOVLW  FA
0ED0:  MOVWF  4A
0ED1:  BCF    0A.3
0ED2:  CALL   155
0ED3:  BSF    0A.3
0ED4:  DECFSZ 37,F
0ED5:  GOTO   6CF
.................... 	LCD_PutCmd ( CLEAR_DISP ); 
0ED6:  MOVLW  01
0ED7:  MOVWF  37
0ED8:  BCF    0A.3
0ED9:  CALL   1A3
0EDA:  BSF    0A.3
.................... 	LCD_Init(); 
0EDB:  BCF    0A.3
0EDC:  CALL   1AE
0EDD:  BSF    0A.3
....................  
.................... 	// SETUP 
.................... 	//port_c_pullups ( ON ); 
.................... 	setup_ccp1 ( CCP_OFF ); 
0EDE:  BSF    28.2
0EDF:  MOVF   28,W
0EE0:  BSF    03.5
0EE1:  MOVWF  07
0EE2:  BCF    03.5
0EE3:  CLRF   17
.................... 	setup_ccp2 ( CCP_OFF ); 
0EE4:  BSF    28.1
0EE5:  MOVF   28,W
0EE6:  BSF    03.5
0EE7:  MOVWF  07
0EE8:  BCF    03.5
0EE9:  CLRF   1D
....................  
....................  
.................... 	setup_adc_ports ( AN0_AN1_AN3 );	// set up the ADC 
0EEA:  BSF    03.5
0EEB:  BCF    1F.0
0EEC:  BCF    1F.1
0EED:  BSF    1F.2
0EEE:  BCF    1F.3
....................  
.................... 	//setup_adc_ports ( RA0_ANALOG );     // set up the ADC 
.................... 	setup_adc ( ADC_CLOCK_INTERNAL );   // clock source 
0EEF:  BCF    03.5
0EF0:  BSF    1F.6
0EF1:  BSF    1F.7
0EF2:  BSF    03.5
0EF3:  BSF    1F.7
0EF4:  BCF    03.5
0EF5:  BSF    1F.0
.................... 	//set_adc_channel ( 0 );              // select channel 
....................  
....................  
....................  
....................  
.................... 	enable_interrupts ( INT_RTCC );     // turn on timer interrupt 
0EF6:  BSF    0B.5
.................... 	enable_interrupts ( GLOBAL );       // enable interrupts 
0EF7:  MOVLW  C0
0EF8:  IORWF  0B,F
....................  
.................... 	// INITIALIZE VARIABLES 
.................... 	cFan1Flag = OFF; 
0EF9:  CLRF   2A
.................... 	cSelectFlag = OFF; 
0EFA:  CLRF   2D
.................... 	//cFan1IsAutoMode = NO; 
.................... 	cToggleFlag = 0; 
0EFB:  CLRF   33
.................... 	cMenuSwitchOn = OFF; 
0EFC:  CLRF   2E
.................... 	cSelectSwitchOn = OFF; 
0EFD:  CLRF   30
.................... 	cMenuSwitchCount = 0; 
0EFE:  CLRF   2F
.................... 	cSelectSwitchCount = 0; 
0EFF:  CLRF   31
....................  
.................... 	output_high ( FAN_1 ); 
0F00:  BCF    28.0
0F01:  MOVF   28,W
0F02:  BSF    03.5
0F03:  MOVWF  07
0F04:  BCF    03.5
0F05:  BSF    07.0
.................... 	output_float ( LED_2 ); 
0F06:  BSF    03.5
0F07:  BSF    06.4
....................  
....................  
.................... 	// start moduser 
.................... 	cMenuState = STATE_AUTO;  // set first menu 
0F08:  BCF    03.5
0F09:  CLRF   2C
.................... 	//cFan1IsAutoMode = YES; 
....................  
.................... 	//AutoFan(); 
....................  
....................  
.................... 	cDisplayDataFlag = ON; // update display 
0F0A:  MOVLW  01
0F0B:  MOVWF  29
....................  
....................  
....................  
.................... 	while ( TRUE )              // do forever 
.................... 	{ 
.................... 		PrintMenu();            // display screens and enviroment info 
0F0C:  GOTO   3D5
.................... 		CheckSwitches();        // check and do any switch activity 
0F0D:  GOTO   54D
.................... 		AutoFan();				// routine itself checks if automode enabled 
0F0E:  BCF    0A.3
0F0F:  GOTO   78E
0F10:  BSF    0A.3
.................... 	} 
0F11:  GOTO   70C
.................... } 
....................  
.................... //**************************************************************************** 
....................  
.................... void PrintMenu ( void ) 
.................... { 
0F12:  SLEEP
....................  
.................... 	// PRINT LOWER LINE OF MENU 
.................... 	LCD_SetPosition ( LINE_2 + 0 ); 
*
0BD5:  MOVLW  40
0BD6:  MOVWF  3C
0BD7:  BCF    0A.3
0BD8:  CALL   1CE
0BD9:  BSF    0A.3
.................... 	switch ( cMenuState ) 
.................... 	{ 
0BDA:  MOVF   2C,W
0BDB:  ADDLW  FC
0BDC:  BTFSC  03.0
0BDD:  GOTO   466
0BDE:  ADDLW  04
0BDF:  GOTO   545
.................... 		case STATE_START: 
.................... 		{ 
.................... 			printf ( LCD_PutChar, "ON        Change" ); 
0BE0:  MOVLW  4F
0BE1:  MOVWF  49
0BE2:  BCF    0A.3
0BE3:  CALL   1DB
0BE4:  BSF    0A.3
0BE5:  MOVLW  4E
0BE6:  MOVWF  49
0BE7:  BCF    0A.3
0BE8:  CALL   1DB
0BE9:  BSF    0A.3
0BEA:  MOVLW  08
0BEB:  MOVWF  37
0BEC:  MOVLW  20
0BED:  MOVWF  49
0BEE:  BCF    0A.3
0BEF:  CALL   1DB
0BF0:  BSF    0A.3
0BF1:  DECFSZ 37,F
0BF2:  GOTO   3EC
0BF3:  MOVLW  02
0BF4:  MOVWF  38
0BF5:  MOVF   38,W
0BF6:  BCF    0A.3
0BF7:  CALL   05D
0BF8:  BSF    0A.3
0BF9:  INCF   38,F
0BFA:  MOVWF  77
0BFB:  MOVWF  49
0BFC:  BCF    0A.3
0BFD:  CALL   1DB
0BFE:  BSF    0A.3
0BFF:  MOVLW  08
0C00:  SUBWF  38,W
0C01:  BTFSS  03.2
0C02:  GOTO   3F5
.................... 		} 
.................... 		break; 
0C03:  GOTO   466
....................  
.................... 		case STATE_STOP: 
.................... 		{ 
.................... 			printf ( LCD_PutChar, "OFF       Change" ); 
0C04:  MOVLW  4F
0C05:  MOVWF  49
0C06:  BCF    0A.3
0C07:  CALL   1DB
0C08:  BSF    0A.3
0C09:  MOVLW  46
0C0A:  MOVWF  49
0C0B:  BCF    0A.3
0C0C:  CALL   1DB
0C0D:  BSF    0A.3
0C0E:  MOVLW  46
0C0F:  MOVWF  49
0C10:  BCF    0A.3
0C11:  CALL   1DB
0C12:  BSF    0A.3
0C13:  MOVLW  07
0C14:  MOVWF  37
0C15:  MOVLW  20
0C16:  MOVWF  49
0C17:  BCF    0A.3
0C18:  CALL   1DB
0C19:  BSF    0A.3
0C1A:  DECFSZ 37,F
0C1B:  GOTO   415
0C1C:  MOVLW  03
0C1D:  MOVWF  38
0C1E:  MOVF   38,W
0C1F:  BCF    0A.3
0C20:  CALL   06A
0C21:  BSF    0A.3
0C22:  INCF   38,F
0C23:  MOVWF  77
0C24:  MOVWF  49
0C25:  BCF    0A.3
0C26:  CALL   1DB
0C27:  BSF    0A.3
0C28:  MOVLW  09
0C29:  SUBWF  38,W
0C2A:  BTFSS  03.2
0C2B:  GOTO   41E
.................... 		} 
.................... 		break; 
0C2C:  GOTO   466
....................  
.................... 		case STATE_AUTO: 
.................... 		{ 
.................... 			printf ( LCD_PutChar, "AUTO      Change" ); 
0C2D:  CLRF   37
0C2E:  MOVF   37,W
0C2F:  BCF    0A.3
0C30:  CALL   078
0C31:  BSF    0A.3
0C32:  INCF   37,F
0C33:  MOVWF  77
0C34:  MOVWF  49
0C35:  BCF    0A.3
0C36:  CALL   1DB
0C37:  BSF    0A.3
0C38:  MOVLW  04
0C39:  SUBWF  37,W
0C3A:  BTFSS  03.2
0C3B:  GOTO   42E
0C3C:  MOVLW  06
0C3D:  MOVWF  38
0C3E:  MOVLW  20
0C3F:  MOVWF  49
0C40:  BCF    0A.3
0C41:  CALL   1DB
0C42:  BSF    0A.3
0C43:  DECFSZ 38,F
0C44:  GOTO   43E
0C45:  MOVLW  04
0C46:  MOVWF  39
0C47:  MOVF   39,W
0C48:  BCF    0A.3
0C49:  CALL   078
0C4A:  BSF    0A.3
0C4B:  INCF   39,F
0C4C:  MOVWF  77
0C4D:  MOVWF  49
0C4E:  BCF    0A.3
0C4F:  CALL   1DB
0C50:  BSF    0A.3
0C51:  MOVLW  0A
0C52:  SUBWF  39,W
0C53:  BTFSS  03.2
0C54:  GOTO   447
.................... 		} 
.................... 		break; 
0C55:  GOTO   466
....................  
.................... 		case STATE_SETTINGS: 
.................... 		{ 
.................... 			printf ( LCD_PutChar, "Settings  Change" ); 
0C56:  CLRF   37
0C57:  MOVF   37,W
0C58:  BCF    0A.3
0C59:  CALL   087
0C5A:  BSF    0A.3
0C5B:  INCF   37,F
0C5C:  MOVWF  77
0C5D:  MOVWF  49
0C5E:  BCF    0A.3
0C5F:  CALL   1DB
0C60:  BSF    0A.3
0C61:  MOVLW  10
0C62:  SUBWF  37,W
0C63:  BTFSS  03.2
0C64:  GOTO   457
.................... 		} 
.................... 		break; 
0C65:  GOTO   466
....................  
.................... 	} 
....................  
.................... 	// DISPLAY KLIMA DATA 
.................... 	if ( cDisplayDataFlag == ON )                    // if interrupt signalled an ADC reading 
0C66:  DECFSZ 29,W
0C67:  GOTO   542
.................... 	{ 
.................... 		cDisplayDataFlag = OFF; 
0C68:  CLRF   29
.................... 		DisplayData(); 
.................... 	} 
.................... } 
*
0D42:  BSF    0A.3
0D43:  BCF    0A.4
0D44:  GOTO   70D (RETURN)
....................  
.................... void CheckSwitches ( void ) 
.................... { 
....................  
.................... 	// INCREMENT/DECREMENT MENU 
.................... 	if ( cMenuSwitchOn == YES )      // if interrupt caught the switch press 
*
0D4D:  DECFSZ 2E,W
0D4E:  GOTO   558
.................... 	{ 
.................... 		if ( cMenuState++ >= MAX_MENU_STATE )      // if at maximum 
0D4F:  MOVF   2C,W
0D50:  INCF   2C,F
0D51:  SUBLW  02
0D52:  BTFSC  03.0
0D53:  GOTO   555
.................... 		{ 
.................... 			cMenuState = 0;            // roll 
0D54:  CLRF   2C
.................... 		} 
.................... 		cMenuSwitchOn = NO;     // turn back off 
0D55:  CLRF   2E
....................  
.................... 		cSelectFlag = ON; // ny i v1.5 
0D56:  MOVLW  01
0D57:  MOVWF  2D
.................... 	} 
.................... /* 
....................    if ( cSelectSwitchOn == YES )      // if interrupt caught the switch press 
....................    { 
....................       cSelectFlag = ON; 
....................       cSelectSwitchOn = NO;     // turn back off 
....................    } 
.................... */ 
....................    // CHECK IF SWITCH IS PRESSED, PERFORM ACTION AND PRINT MENU 
.................... 	switch ( cMenuState ) 
.................... 	{ 
0D58:  MOVF   2C,W
0D59:  ADDLW  FC
0D5A:  BTFSC  03.0
0D5B:  GOTO   676
0D5C:  ADDLW  04
0D5D:  GOTO   679
.................... 		case ( STATE_START ): // START FAN 
.................... 		{ 
.................... 			if ( cSelectFlag == ON )    // if switch is pressed 
0D5E:  DECFSZ 2D,W
0D5F:  GOTO   578
.................... 			{ 
.................... 				cSelectFlag = OFF;         // turn flag off 
0D60:  CLRF   2D
....................  
.................... 				//cFan1AutoState = OFF; //v1.6 
.................... 				//cFan1IsAutoMode = NO; 
.................... 				StartFan(); 
....................  
.................... 				//delay_ms ( 1000 ); 
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
*
0D6D:  MOVLW  01
0D6E:  MOVWF  37
0D6F:  BCF    0A.3
0D70:  CALL   1A3
0D71:  BSF    0A.3
.................... 				cDisplayDataFlag = ON; 
0D72:  MOVLW  01
0D73:  MOVWF  29
.................... 				cMenuSwitchOn = NO; 
0D74:  CLRF   2E
.................... 				cSelectSwitchOn = NO; 
0D75:  CLRF   30
.................... 				cInterruptCount = 0;    // synchronize interrupt timing from here 
0D76:  CLRF   2B
.................... 				//cMenuState = STATE_STOP;    // menu displays "STOP" 
.................... 				break; 
0D77:  GOTO   676
.................... 			} 
.................... 		} 
....................  
.................... 		case ( STATE_STOP ): // STOP FAN 
.................... 		{ 
.................... 			if ( cSelectFlag == ON )    // if switch is pressed 
0D78:  DECFSZ 2D,W
0D79:  GOTO   58F
.................... 			{ 
.................... 				cSelectFlag = OFF;         // turn flag off 
0D7A:  CLRF   2D
....................  
.................... 				//cFan1AutoState = OFF; //v1.6 
.................... 				//cFan1IsAutoMode = NO; 
.................... 				StopFan(); 
....................  
.................... 				//delay_ms ( 1000 ); 
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
*
0D84:  MOVLW  01
0D85:  BCF    03.5
0D86:  MOVWF  37
0D87:  BCF    0A.3
0D88:  CALL   1A3
0D89:  BSF    0A.3
.................... 				cDisplayDataFlag = ON; 
0D8A:  MOVLW  01
0D8B:  MOVWF  29
.................... 				cMenuSwitchOn = NO; 
0D8C:  CLRF   2E
.................... 				cSelectSwitchOn = NO; 
0D8D:  CLRF   30
.................... 				//cMenuState = STATE_START;    // menu displays "START" 
....................  
.................... 				break; 
0D8E:  GOTO   676
.................... 			} 
.................... 		} 
....................  
.................... 		case ( STATE_AUTO ): 
.................... 		{ 
.................... 			if ( cSelectFlag == ON )    // if switch is pressed 
0D8F:  DECFSZ 2D,W
0D90:  GOTO   59D
.................... 			{ 
.................... 				cSelectFlag = OFF;         // turn flag off 
0D91:  CLRF   2D
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
0D92:  MOVLW  01
0D93:  MOVWF  37
0D94:  BCF    0A.3
0D95:  CALL   1A3
0D96:  BSF    0A.3
.................... 				cDisplayDataFlag = ON; 
0D97:  MOVLW  01
0D98:  MOVWF  29
.................... 				cMenuSwitchOn = NO; 
0D99:  CLRF   2E
.................... 				cSelectSwitchOn = NO; 
0D9A:  CLRF   30
.................... 				cInterruptCount = 0;    // synchronize interrupt timing from here 
0D9B:  CLRF   2B
....................  
.................... 				break; 
0D9C:  GOTO   676
.................... 			} 
.................... 		} 
....................  
.................... 		case ( STATE_SETTINGS ): 
.................... 		{ 
.................... 			if ( cSelectFlag == ON )    // if switch is pressed 
0D9D:  DECFSZ 2D,W
0D9E:  GOTO   676
.................... 			{ 
.................... 				cSelectFlag = OFF;         // turn flag off 
0D9F:  CLRF   2D
....................  
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
0DA0:  MOVLW  01
0DA1:  MOVWF  37
0DA2:  BCF    0A.3
0DA3:  CALL   1A3
0DA4:  BSF    0A.3
.................... 				LCD_SetPosition ( LINE_1 ); 
0DA5:  CLRF   3C
0DA6:  BCF    0A.3
0DA7:  CALL   1CE
0DA8:  BSF    0A.3
.................... 				printf ( LCD_PutChar, " Humidity limit " ); 
0DA9:  CLRF   37
0DAA:  MOVF   37,W
0DAB:  BCF    0A.3
0DAC:  CALL   09C
0DAD:  BSF    0A.3
0DAE:  INCF   37,F
0DAF:  MOVWF  77
0DB0:  MOVWF  49
0DB1:  BCF    0A.3
0DB2:  CALL   1DB
0DB3:  BSF    0A.3
0DB4:  MOVLW  10
0DB5:  SUBWF  37,W
0DB6:  BTFSS  03.2
0DB7:  GOTO   5AA
.................... 				LCD_SetPosition ( LINE_2 ); 
0DB8:  MOVLW  40
0DB9:  MOVWF  3C
0DBA:  BCF    0A.3
0DBB:  CALL   1CE
0DBC:  BSF    0A.3
.................... 				printf ( LCD_PutChar, "      %u%c       ", MAXIMUM_RH, C_PERCENT ); 
0DBD:  MOVLW  06
0DBE:  MOVWF  37
0DBF:  MOVLW  20
0DC0:  MOVWF  49
0DC1:  BCF    0A.3
0DC2:  CALL   1DB
0DC3:  BSF    0A.3
0DC4:  DECFSZ 37,F
0DC5:  GOTO   5BF
0DC6:  MOVLW  2D
0DC7:  MOVWF  3D
0DC8:  MOVLW  1B
0DC9:  MOVWF  3E
0DCA:  BCF    0A.3
0DCB:  CALL   759
0DCC:  BSF    0A.3
0DCD:  MOVLW  25
0DCE:  MOVWF  49
0DCF:  BCF    0A.3
0DD0:  CALL   1DB
0DD1:  BSF    0A.3
0DD2:  MOVLW  07
0DD3:  MOVWF  38
0DD4:  MOVLW  20
0DD5:  MOVWF  49
0DD6:  BCF    0A.3
0DD7:  CALL   1DB
0DD8:  BSF    0A.3
0DD9:  DECFSZ 38,F
0DDA:  GOTO   5D4
.................... 				delay_ms ( 3000 ); 
0DDB:  MOVLW  0C
0DDC:  MOVWF  37
0DDD:  MOVLW  FA
0DDE:  MOVWF  4A
0DDF:  BCF    0A.3
0DE0:  CALL   155
0DE1:  BSF    0A.3
0DE2:  DECFSZ 37,F
0DE3:  GOTO   5DD
....................  
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
0DE4:  MOVLW  01
0DE5:  MOVWF  37
0DE6:  BCF    0A.3
0DE7:  CALL   1A3
0DE8:  BSF    0A.3
.................... 				LCD_SetPosition ( LINE_1 ); 
0DE9:  CLRF   3C
0DEA:  BCF    0A.3
0DEB:  CALL   1CE
0DEC:  BSF    0A.3
.................... 				printf ( LCD_PutChar, "Minimum run time" ); 
0DED:  CLRF   37
0DEE:  MOVF   37,W
0DEF:  BCF    0A.3
0DF0:  CALL   0B1
0DF1:  BSF    0A.3
0DF2:  INCF   37,F
0DF3:  MOVWF  77
0DF4:  MOVWF  49
0DF5:  BCF    0A.3
0DF6:  CALL   1DB
0DF7:  BSF    0A.3
0DF8:  MOVLW  10
0DF9:  SUBWF  37,W
0DFA:  BTFSS  03.2
0DFB:  GOTO   5EE
.................... 				LCD_SetPosition ( LINE_2 ); 
0DFC:  MOVLW  40
0DFD:  MOVWF  3C
0DFE:  BCF    0A.3
0DFF:  CALL   1CE
0E00:  BSF    0A.3
.................... 				printf ( LCD_PutChar, "%umin if Auto ON", MINIMUM_INTERVAL ); 
0E01:  MOVLW  01
0E02:  MOVWF  3D
0E03:  MOVLW  1B
0E04:  MOVWF  3E
0E05:  BCF    0A.3
0E06:  CALL   759
0E07:  BSF    0A.3
0E08:  MOVLW  02
0E09:  MOVWF  37
0E0A:  MOVF   37,W
0E0B:  BCF    0A.3
0E0C:  CALL   0C6
0E0D:  BSF    0A.3
0E0E:  INCF   37,F
0E0F:  MOVWF  77
0E10:  MOVWF  49
0E11:  BCF    0A.3
0E12:  CALL   1DB
0E13:  BSF    0A.3
0E14:  MOVLW  10
0E15:  SUBWF  37,W
0E16:  BTFSS  03.2
0E17:  GOTO   60A
.................... 				delay_ms ( 3000 ); 
0E18:  MOVLW  0C
0E19:  MOVWF  37
0E1A:  MOVLW  FA
0E1B:  MOVWF  4A
0E1C:  BCF    0A.3
0E1D:  CALL   155
0E1E:  BSF    0A.3
0E1F:  DECFSZ 37,F
0E20:  GOTO   61A
....................  
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
0E21:  MOVLW  01
0E22:  MOVWF  37
0E23:  BCF    0A.3
0E24:  CALL   1A3
0E25:  BSF    0A.3
.................... 				LCD_SetPosition ( LINE_1 ); 
0E26:  CLRF   3C
0E27:  BCF    0A.3
0E28:  CALL   1CE
0E29:  BSF    0A.3
.................... 				printf ( LCD_PutChar, "Not run if under" ); 
0E2A:  CLRF   37
0E2B:  MOVF   37,W
0E2C:  BCF    0A.3
0E2D:  CALL   0DB
0E2E:  BSF    0A.3
0E2F:  INCF   37,F
0E30:  MOVWF  77
0E31:  MOVWF  49
0E32:  BCF    0A.3
0E33:  CALL   1DB
0E34:  BSF    0A.3
0E35:  MOVLW  10
0E36:  SUBWF  37,W
0E37:  BTFSS  03.2
0E38:  GOTO   62B
.................... 				LCD_SetPosition ( LINE_2 ); 
0E39:  MOVLW  40
0E3A:  MOVWF  3C
0E3B:  BCF    0A.3
0E3C:  CALL   1CE
0E3D:  BSF    0A.3
.................... 				printf ( LCD_PutChar, "       %u%cC     ", MINIMUM_TEMP, C_DEGREES ); 
0E3E:  MOVLW  07
0E3F:  MOVWF  37
0E40:  MOVLW  20
0E41:  MOVWF  49
0E42:  BCF    0A.3
0E43:  CALL   1DB
0E44:  BSF    0A.3
0E45:  DECFSZ 37,F
0E46:  GOTO   640
0E47:  MOVLW  12
0E48:  MOVWF  3D
0E49:  MOVLW  1B
0E4A:  MOVWF  3E
0E4B:  BCF    0A.3
0E4C:  CALL   759
0E4D:  BSF    0A.3
0E4E:  MOVLW  DF
0E4F:  MOVWF  49
0E50:  BCF    0A.3
0E51:  CALL   1DB
0E52:  BSF    0A.3
0E53:  MOVLW  43
0E54:  MOVWF  49
0E55:  BCF    0A.3
0E56:  CALL   1DB
0E57:  BSF    0A.3
0E58:  MOVLW  05
0E59:  MOVWF  38
0E5A:  MOVLW  20
0E5B:  MOVWF  49
0E5C:  BCF    0A.3
0E5D:  CALL   1DB
0E5E:  BSF    0A.3
0E5F:  DECFSZ 38,F
0E60:  GOTO   65A
.................... 				delay_ms ( 3000 ); 
0E61:  MOVLW  0C
0E62:  MOVWF  37
0E63:  MOVLW  FA
0E64:  MOVWF  4A
0E65:  BCF    0A.3
0E66:  CALL   155
0E67:  BSF    0A.3
0E68:  DECFSZ 37,F
0E69:  GOTO   663
....................  
....................  
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
0E6A:  MOVLW  01
0E6B:  MOVWF  37
0E6C:  BCF    0A.3
0E6D:  CALL   1A3
0E6E:  BSF    0A.3
.................... 				cDisplayDataFlag = ON; 
0E6F:  MOVLW  01
0E70:  MOVWF  29
.................... 				cMenuSwitchOn = NO; 
0E71:  CLRF   2E
.................... 				cSelectSwitchOn = NO; 
0E72:  CLRF   30
.................... 				cInterruptCount = 0;    // synchronize interrupt timing from here 
0E73:  CLRF   2B
.................... 				cMenuState = STATE_AUTO;    // menu displays "AUTO" 
0E74:  CLRF   2C
....................  
.................... 				break; 
0E75:  GOTO   676
.................... 			} 
.................... 		} 
.................... 	} 
.................... } 
0E76:  BSF    0A.3
0E77:  BCF    0A.4
0E78:  GOTO   70E (RETURN)
....................  
.................... void DisplayData ( void ) 
.................... { 
.................... 	float f_rh; 
.................... 	int f_temp; 
....................  
.................... 	f_rh = getRH(); 
*
0C69:  BCF    0A.3
0C6A:  CALL   4DC
0C6B:  BSF    0A.3
0C6C:  MOVF   7A,W
0C6D:  MOVWF  3A
0C6E:  MOVF   79,W
0C6F:  MOVWF  39
0C70:  MOVF   78,W
0C71:  MOVWF  38
0C72:  MOVF   77,W
0C73:  MOVWF  37
....................  
.................... 	// Relative Humidity 
.................... 	LCD_SetPosition ( LINE_1 ); 
0C74:  CLRF   3C
0C75:  BCF    0A.3
0C76:  CALL   1CE
0C77:  BSF    0A.3
....................  
.................... 	if ( f_rh == 0.0 ) // 1023 
0C78:  MOVF   3A,W
0C79:  MOVWF  6B
0C7A:  MOVF   39,W
0C7B:  MOVWF  6A
0C7C:  MOVF   38,W
0C7D:  MOVWF  69
0C7E:  MOVF   37,W
0C7F:  MOVWF  68
0C80:  CLRF   6F
0C81:  CLRF   6E
0C82:  CLRF   6D
0C83:  CLRF   6C
0C84:  BCF    0A.3
0C85:  CALL   592
0C86:  BSF    0A.3
0C87:  BTFSS  03.2
0C88:  GOTO   499
.................... 	{ 
.................... 		printf ( LCD_PutChar, "O/R" );    // out of range 
0C89:  MOVLW  4F
0C8A:  MOVWF  49
0C8B:  BCF    0A.3
0C8C:  CALL   1DB
0C8D:  BSF    0A.3
0C8E:  MOVLW  2F
0C8F:  MOVWF  49
0C90:  BCF    0A.3
0C91:  CALL   1DB
0C92:  BSF    0A.3
0C93:  MOVLW  52
0C94:  MOVWF  49
0C95:  BCF    0A.3
0C96:  CALL   1DB
0C97:  BSF    0A.3
.................... 	} 
.................... 	else 
0C98:  GOTO   4AD
.................... 	{ 
.................... 		printf ( LCD_PutChar, "%2.1f%c", f_rh, C_PERCENT ); 
0C99:  MOVLW  01
0C9A:  MOVWF  04
0C9B:  MOVF   3A,W
0C9C:  MOVWF  3F
0C9D:  MOVF   39,W
0C9E:  MOVWF  3E
0C9F:  MOVF   38,W
0CA0:  MOVWF  3D
0CA1:  MOVF   37,W
0CA2:  MOVWF  3C
0CA3:  MOVLW  01
0CA4:  MOVWF  40
0CA5:  BCF    0A.3
0CA6:  GOTO   634
0CA7:  BSF    0A.3
0CA8:  MOVLW  25
0CA9:  MOVWF  49
0CAA:  BCF    0A.3
0CAB:  CALL   1DB
0CAC:  BSF    0A.3
.................... 	} 
....................  
.................... 	// Temperature 
.................... 	LCD_SetPosition ( LINE_1 + 12 ); 
0CAD:  MOVLW  0C
0CAE:  MOVWF  3C
0CAF:  BCF    0A.3
0CB0:  CALL   1CE
0CB1:  BSF    0A.3
....................  
.................... 	//f_temp = 0; // not implemented yet 
.................... 	f_temp = getTemp(); 
0CB2:  CALL   000
0CB3:  MOVF   7A,W
0CB4:  MOVWF  59
0CB5:  MOVF   79,W
0CB6:  MOVWF  58
0CB7:  MOVF   78,W
0CB8:  MOVWF  57
0CB9:  MOVF   77,W
0CBA:  MOVWF  56
0CBB:  BCF    0A.3
0CBC:  CALL   725
0CBD:  BSF    0A.3
0CBE:  MOVF   78,W
0CBF:  MOVWF  3B
....................  
.................... 	if ( f_temp == 100 ) 
0CC0:  MOVF   3B,W
0CC1:  SUBLW  64
0CC2:  BTFSS  03.2
0CC3:  GOTO   4D4
.................... 	{ 
.................... 		printf ( LCD_PutChar, "O/R" );    // out of range 
0CC4:  MOVLW  4F
0CC5:  MOVWF  49
0CC6:  BCF    0A.3
0CC7:  CALL   1DB
0CC8:  BSF    0A.3
0CC9:  MOVLW  2F
0CCA:  MOVWF  49
0CCB:  BCF    0A.3
0CCC:  CALL   1DB
0CCD:  BSF    0A.3
0CCE:  MOVLW  52
0CCF:  MOVWF  49
0CD0:  BCF    0A.3
0CD1:  CALL   1DB
0CD2:  BSF    0A.3
.................... 	} 
.................... 	else 
0CD3:  GOTO   4E9
.................... 	{ 
.................... 		printf ( LCD_PutChar, "%.2u%c", f_temp, C_DEGREES ); 
0CD4:  MOVLW  07
0CD5:  MOVWF  3C
0CD6:  MOVLW  20
0CD7:  MOVWF  49
0CD8:  BCF    0A.3
0CD9:  CALL   1DB
0CDA:  BSF    0A.3
0CDB:  DECFSZ 3C,F
0CDC:  GOTO   4D6
0CDD:  MOVF   3B,W
0CDE:  MOVWF  3D
0CDF:  MOVLW  1B
0CE0:  MOVWF  3E
0CE1:  BCF    0A.3
0CE2:  CALL   759
0CE3:  BSF    0A.3
0CE4:  MOVLW  DF
0CE5:  MOVWF  49
0CE6:  BCF    0A.3
0CE7:  CALL   1DB
0CE8:  BSF    0A.3
.................... 	} 
....................  
.................... 	//printf ( LCD_PutChar, "%2f%c", f_temp, C_DEGREES ); 
....................  
....................  
....................  
.................... 	// FAN operational status 
.................... 	LCD_SetPosition ( LINE_1 + 6); // '45.0% AU OFF 25°' 
0CE9:  MOVLW  06
0CEA:  MOVWF  3C
0CEB:  BCF    0A.3
0CEC:  CALL   1CE
0CED:  BSF    0A.3
.................... 	if( cMenuState == STATE_AUTO ) 
0CEE:  MOVF   2C,F
0CEF:  BTFSS  03.2
0CF0:  GOTO   514
.................... 	{ 
.................... 		if( cFan1AutoState == OFF ) 
0CF1:  MOVF   35,F
0CF2:  BTFSS  03.2
0CF3:  GOTO   504
.................... 		{ 
.................... 			printf ( LCD_PutChar, "AU OFF" ); 
0CF4:  CLRF   3C
0CF5:  MOVF   3C,W
0CF6:  BCF    0A.3
0CF7:  CALL   0F0
0CF8:  BSF    0A.3
0CF9:  INCF   3C,F
0CFA:  MOVWF  77
0CFB:  MOVWF  49
0CFC:  BCF    0A.3
0CFD:  CALL   1DB
0CFE:  BSF    0A.3
0CFF:  MOVLW  06
0D00:  SUBWF  3C,W
0D01:  BTFSS  03.2
0D02:  GOTO   4F5
.................... 		} 
.................... 		else 
0D03:  GOTO   513
.................... 		{ 
.................... 			printf ( LCD_PutChar, "AU ON " ); 
0D04:  CLRF   3C
0D05:  MOVF   3C,W
0D06:  BCF    0A.3
0D07:  CALL   0FB
0D08:  BSF    0A.3
0D09:  INCF   3C,F
0D0A:  MOVWF  77
0D0B:  MOVWF  49
0D0C:  BCF    0A.3
0D0D:  CALL   1DB
0D0E:  BSF    0A.3
0D0F:  MOVLW  06
0D10:  SUBWF  3C,W
0D11:  BTFSS  03.2
0D12:  GOTO   505
.................... 		} 
.................... 	} 
.................... 	else 
0D13:  GOTO   542
.................... 	{ 
.................... 		if( cFan1Flag == ON ) 
0D14:  DECFSZ 2A,W
0D15:  GOTO   52A
.................... 		{ 
.................... 			printf ( LCD_PutChar, "ON    " ); 
0D16:  MOVLW  4F
0D17:  MOVWF  49
0D18:  BCF    0A.3
0D19:  CALL   1DB
0D1A:  BSF    0A.3
0D1B:  MOVLW  4E
0D1C:  MOVWF  49
0D1D:  BCF    0A.3
0D1E:  CALL   1DB
0D1F:  BSF    0A.3
0D20:  MOVLW  04
0D21:  MOVWF  3C
0D22:  MOVLW  20
0D23:  MOVWF  49
0D24:  BCF    0A.3
0D25:  CALL   1DB
0D26:  BSF    0A.3
0D27:  DECFSZ 3C,F
0D28:  GOTO   522
.................... 		} 
.................... 		else 
0D29:  GOTO   542
.................... 		{ 
.................... 			printf ( LCD_PutChar, "OFF   " ); 
0D2A:  MOVLW  4F
0D2B:  MOVWF  49
0D2C:  BCF    0A.3
0D2D:  CALL   1DB
0D2E:  BSF    0A.3
0D2F:  MOVLW  46
0D30:  MOVWF  49
0D31:  BCF    0A.3
0D32:  CALL   1DB
0D33:  BSF    0A.3
0D34:  MOVLW  46
0D35:  MOVWF  49
0D36:  BCF    0A.3
0D37:  CALL   1DB
0D38:  BSF    0A.3
0D39:  MOVLW  03
0D3A:  MOVWF  3C
0D3B:  MOVLW  20
0D3C:  MOVWF  49
0D3D:  BCF    0A.3
0D3E:  CALL   1DB
0D3F:  BSF    0A.3
0D40:  DECFSZ 3C,F
0D41:  GOTO   53B
.................... 		} 
.................... 	} 
.................... } 
....................  
....................  
.................... float getTemp() 
.................... { 
.................... 	int16 adc_value; 
.................... 	float ohm, tcelsius; 
....................  
....................  
.................... 	// see ntc.h and ntc.c 
....................  
.................... 	set_adc_channel ( 1 ); // RA1, pin 3 
*
0800:  MOVLW  08
0801:  MOVWF  78
0802:  MOVF   1F,W
0803:  ANDLW  C7
0804:  IORWF  78,W
0805:  MOVWF  1F
.................... 	delay_us(50); 
0806:  MOVLW  21
0807:  MOVWF  77
0808:  DECFSZ 77,F
0809:  GOTO   008
.................... 	adc_value = read_adc(); 
080A:  BSF    1F.2
080B:  BTFSC  1F.2
080C:  GOTO   00B
080D:  BSF    03.5
080E:  MOVF   1E,W
080F:  BCF    03.5
0810:  MOVWF  3F
0811:  MOVF   1E,W
0812:  MOVWF  40
.................... 	ohm = adc_2_ohm ( adc_value ); 
0813:  MOVF   3F,W
0814:  MOVWF  49
*
086B:  MOVF   7A,W
086C:  MOVWF  44
086D:  MOVF   79,W
086E:  MOVWF  43
086F:  MOVF   78,W
0870:  MOVWF  42
0871:  MOVF   77,W
0872:  MOVWF  41
.................... 	tcelsius = r2temperature ( ohm ); 
0873:  MOVF   44,W
0874:  MOVWF  4C
0875:  MOVF   43,W
0876:  MOVWF  4B
0877:  MOVF   42,W
0878:  MOVWF  4A
0879:  MOVF   41,W
087A:  MOVWF  49
*
0BBE:  CLRF   50
0BBF:  MOVF   78,W
0BC0:  MOVWF  4F
0BC1:  BCF    0A.3
0BC2:  CALL   20C
0BC3:  BSF    0A.3
0BC4:  MOVF   7A,W
0BC5:  MOVWF  48
0BC6:  MOVF   79,W
0BC7:  MOVWF  47
0BC8:  MOVF   78,W
0BC9:  MOVWF  46
0BCA:  MOVF   77,W
0BCB:  MOVWF  45
....................  
.................... 	return tcelsius; 
0BCC:  MOVF   45,W
0BCD:  MOVWF  77
0BCE:  MOVF   46,W
0BCF:  MOVWF  78
0BD0:  MOVF   47,W
0BD1:  MOVWF  79
0BD2:  MOVF   48,W
0BD3:  MOVWF  7A
.................... } 
0BD4:  RETLW  00
....................  
....................  
.................... float getRH() 
.................... { 
....................  
.................... 	int16 adc_value; 
.................... 	float adc_volt, rh; 
....................  
.................... 	rh = 0.0; 
*
04DC:  CLRF   48
04DD:  CLRF   47
04DE:  CLRF   46
04DF:  CLRF   45
....................  
.................... 	// RH: RH = ((A/D voltage / supply voltage) - 0.16) / 0.0062 
.................... 	// volt adc = iAdcHumValue / 1024 * 5 
.................... 	// (417 / 1024) * 5 = 2,0361328125 
.................... 	// (2,0361328125 / 5) = 0,4072265625 - 0,16 = 0,2472265625 / 0,0062 = 39,87 RH 
.................... 	// ELLER 
.................... 	// (417 / 1024) = 0,4072265625 - 0,16 = 0,2472265625 / 0,0062 = 39,87 RH 
.................... 	// 0,4072265625 - 0,16 = 
.................... 	// 
.................... 	set_adc_channel ( 0 ); // RA0, pin 2 
04E0:  MOVLW  00
04E1:  MOVWF  78
04E2:  MOVF   1F,W
04E3:  ANDLW  C7
04E4:  IORWF  78,W
04E5:  MOVWF  1F
.................... 	delay_us(50); 
04E6:  MOVLW  21
04E7:  MOVWF  77
04E8:  DECFSZ 77,F
04E9:  GOTO   4E8
....................  
.................... 	adc_value = read_adc(); 
04EA:  BSF    1F.2
04EB:  BTFSC  1F.2
04EC:  GOTO   4EB
04ED:  BSF    03.5
04EE:  MOVF   1E,W
04EF:  BCF    03.5
04F0:  MOVWF  3F
04F1:  MOVF   1E,W
04F2:  MOVWF  40
....................  
.................... 	if ( adc_value < 1 || adc_value > 1023 ) 
04F3:  MOVF   3F,F
04F4:  BTFSS  03.2
04F5:  GOTO   4F9
04F6:  MOVF   40,F
04F7:  BTFSC  03.2
04F8:  GOTO   4FD
04F9:  MOVF   40,W
04FA:  SUBLW  03
04FB:  BTFSC  03.0
04FC:  GOTO   506
.................... 		return rh; 
04FD:  MOVF   45,W
04FE:  MOVWF  77
04FF:  MOVF   46,W
0500:  MOVWF  78
0501:  MOVF   47,W
0502:  MOVWF  79
0503:  MOVF   48,W
0504:  MOVWF  7A
0505:  GOTO   591
....................  
.................... 	// calc relative humidity from adc value 
.................... 	adc_volt = ( float ) adc_value / 1023  * VDD; // 1023 leaves room for out-of-range 
0506:  MOVF   40,W
0507:  MOVWF  50
0508:  MOVF   3F,W
0509:  MOVWF  4F
050A:  CALL   20C
050B:  MOVF   77,W
050C:  MOVWF  49
050D:  MOVF   78,W
050E:  MOVWF  4A
050F:  MOVF   79,W
0510:  MOVWF  4B
0511:  MOVF   7A,W
0512:  MOVWF  4C
0513:  MOVWF  6F
0514:  MOVF   79,W
0515:  MOVWF  6E
0516:  MOVF   78,W
0517:  MOVWF  6D
0518:  MOVF   77,W
0519:  MOVWF  6C
051A:  CLRF   73
051B:  MOVLW  C0
051C:  MOVWF  72
051D:  MOVLW  7F
051E:  MOVWF  71
051F:  MOVLW  88
0520:  MOVWF  70
0521:  CALL   229
0522:  MOVF   77,W
0523:  MOVWF  4D
0524:  MOVF   78,W
0525:  MOVWF  4E
0526:  MOVF   79,W
0527:  MOVWF  4F
0528:  MOVF   7A,W
0529:  MOVWF  50
052A:  MOVWF  6B
052B:  MOVF   79,W
052C:  MOVWF  6A
052D:  MOVF   78,W
052E:  MOVWF  69
052F:  MOVF   77,W
0530:  MOVWF  68
0531:  CLRF   6F
0532:  CLRF   6E
0533:  MOVLW  20
0534:  MOVWF  6D
0535:  MOVLW  81
0536:  MOVWF  6C
0537:  CALL   30A
0538:  MOVF   7A,W
0539:  MOVWF  44
053A:  MOVF   79,W
053B:  MOVWF  43
053C:  MOVF   78,W
053D:  MOVWF  42
053E:  MOVF   77,W
053F:  MOVWF  41
.................... 	//rh = ( adc_volt / VDD  - 0.16 ) / 0.0062; 
.................... 	rh = ( ( float ) adc_volt / VDD  - 0.16 ) / 0.0062; // v1.5 
0540:  MOVF   44,W
0541:  MOVWF  6F
0542:  MOVF   43,W
0543:  MOVWF  6E
0544:  MOVF   42,W
0545:  MOVWF  6D
0546:  MOVF   41,W
0547:  MOVWF  6C
0548:  CLRF   73
0549:  CLRF   72
054A:  MOVLW  20
054B:  MOVWF  71
054C:  MOVLW  81
054D:  MOVWF  70
054E:  CALL   229
054F:  MOVF   77,W
0550:  MOVWF  49
0551:  MOVF   78,W
0552:  MOVWF  4A
0553:  MOVF   79,W
0554:  MOVWF  4B
0555:  MOVF   7A,W
0556:  MOVWF  4C
0557:  BSF    03.1
0558:  MOVF   7A,W
0559:  MOVWF  6F
055A:  MOVF   79,W
055B:  MOVWF  6E
055C:  MOVF   78,W
055D:  MOVWF  6D
055E:  MOVF   77,W
055F:  MOVWF  6C
0560:  MOVLW  0A
0561:  MOVWF  73
0562:  MOVLW  D7
0563:  MOVWF  72
0564:  MOVLW  23
0565:  MOVWF  71
0566:  MOVLW  7C
0567:  MOVWF  70
0568:  CALL   37F
0569:  MOVF   77,W
056A:  MOVWF  4D
056B:  MOVF   78,W
056C:  MOVWF  4E
056D:  MOVF   79,W
056E:  MOVWF  4F
056F:  MOVF   7A,W
0570:  MOVWF  50
0571:  MOVWF  6F
0572:  MOVF   79,W
0573:  MOVWF  6E
0574:  MOVF   78,W
0575:  MOVWF  6D
0576:  MOVF   77,W
0577:  MOVWF  6C
0578:  MOVLW  5F
0579:  MOVWF  73
057A:  MOVLW  29
057B:  MOVWF  72
057C:  MOVLW  4B
057D:  MOVWF  71
057E:  MOVLW  77
057F:  MOVWF  70
0580:  CALL   229
0581:  MOVF   7A,W
0582:  MOVWF  48
0583:  MOVF   79,W
0584:  MOVWF  47
0585:  MOVF   78,W
0586:  MOVWF  46
0587:  MOVF   77,W
0588:  MOVWF  45
....................  
.................... 	return rh; 
0589:  MOVF   45,W
058A:  MOVWF  77
058B:  MOVF   46,W
058C:  MOVWF  78
058D:  MOVF   47,W
058E:  MOVWF  79
058F:  MOVF   48,W
0590:  MOVWF  7A
....................  
.................... } 
0591:  RETLW  00
....................  
....................  
.................... void Reboot( void ) 
.................... { 
.................... 	reset_cpu(); 
.................... } 
....................  
.................... void StartFan( void ) 
.................... { 
.................... 	cFan1Flag = ON; 
*
0D61:  MOVLW  01
0D62:  MOVWF  2A
.................... 	// reset possible auto counters 
.................... 	//cFan1AutoState = OFF; 
.................... 	//cFan1RunTime = 0; // stopping fan, reset interval counter 
....................  
.................... 	output_low ( FAN_1 ); 
0D63:  BCF    28.0
0D64:  MOVF   28,W
0D65:  BSF    03.5
0D66:  MOVWF  07
0D67:  BCF    03.5
0D68:  BCF    07.0
.................... 	output_low ( LED_2 ); 
0D69:  BSF    03.5
0D6A:  BCF    06.4
0D6B:  BCF    03.5
0D6C:  BCF    06.4
.................... } 
....................  
.................... void StopFan( void ) 
.................... { 
.................... 	cFan1Flag = OFF; 
*
0D7B:  CLRF   2A
.................... 	// reset possible auto counters 
.................... 	//cFan1AutoState = OFF; 
.................... 	//cFan1RunTime = 0; // stopping fan, reset interval counter 
....................  
.................... 	output_high ( FAN_1 ); 
0D7C:  BCF    28.0
0D7D:  MOVF   28,W
0D7E:  BSF    03.5
0D7F:  MOVWF  07
0D80:  BCF    03.5
0D81:  BSF    07.0
.................... 	output_float ( LED_2 ); 
0D82:  BSF    03.5
0D83:  BSF    06.4
.................... } 
....................  
....................  
.................... void AutoFan( void ) 
.................... { 
.................... 	float rh, tcelsius; 
....................  
.................... 	if ( cMenuState != STATE_AUTO ) return; 
*
078E:  MOVF   2C,F
078F:  BTFSS  03.2
0790:  GOTO   7EC
....................  
.................... 	tcelsius = getTemp(); 
0791:  BSF    0A.3
0792:  CALL   000
0793:  BCF    0A.3
0794:  MOVF   7A,W
0795:  MOVWF  3E
0796:  MOVF   79,W
0797:  MOVWF  3D
0798:  MOVF   78,W
0799:  MOVWF  3C
079A:  MOVF   77,W
079B:  MOVWF  3B
.................... 	rh = getRH(); 
079C:  CALL   4DC
079D:  MOVF   7A,W
079E:  MOVWF  3A
079F:  MOVF   79,W
07A0:  MOVWF  39
07A1:  MOVF   78,W
07A2:  MOVWF  38
07A3:  MOVF   77,W
07A4:  MOVWF  37
....................  
.................... 	if( rh > MAXIMUM_RH ) 
07A5:  CLRF   6B
07A6:  CLRF   6A
07A7:  MOVLW  34
07A8:  MOVWF  69
07A9:  MOVLW  84
07AA:  MOVWF  68
07AB:  MOVF   3A,W
07AC:  MOVWF  6F
07AD:  MOVF   39,W
07AE:  MOVWF  6E
07AF:  MOVF   38,W
07B0:  MOVWF  6D
07B1:  MOVF   37,W
07B2:  MOVWF  6C
07B3:  CALL   592
07B4:  BTFSS  03.0
07B5:  GOTO   7DD
.................... 	{ 
.................... 		if ( input (INCLUDE_TEMP_SWITCH) == LOW && tcelsius < MINIMUM_TEMP ) 
07B6:  BSF    28.2
07B7:  MOVF   28,W
07B8:  BSF    03.5
07B9:  MOVWF  07
07BA:  BCF    03.5
07BB:  BTFSC  07.2
07BC:  GOTO   7CF
07BD:  MOVF   3E,W
07BE:  MOVWF  6B
07BF:  MOVF   3D,W
07C0:  MOVWF  6A
07C1:  MOVF   3C,W
07C2:  MOVWF  69
07C3:  MOVF   3B,W
07C4:  MOVWF  68
07C5:  CLRF   6F
07C6:  CLRF   6E
07C7:  MOVLW  10
07C8:  MOVWF  6D
07C9:  MOVLW  83
07CA:  MOVWF  6C
07CB:  CALL   592
07CC:  BTFSS  03.0
07CD:  GOTO   7CF
.................... 		{ 
.................... 			//don't run if temp to low and check-temp switch is on 
.................... 			return; 
07CE:  GOTO   7EC
.................... 		} 
.................... 		// RH is above upper threshold and temp check is either ok or deactivated, start fan if not already running 
.................... 		if ( cFan1Flag == OFF ) 
07CF:  MOVF   2A,F
07D0:  BTFSS  03.2
07D1:  GOTO   7DB
.................... 		{ 
.................... 			cFan1Flag = ON; 
07D2:  MOVLW  01
07D3:  MOVWF  2A
.................... 			cFan1CanStop = NO; 
07D4:  CLRF   36
.................... 			//cFan1AutoState = ON; 
.................... 			output_low ( FAN_1 ); 
07D5:  BCF    28.0
07D6:  MOVF   28,W
07D7:  BSF    03.5
07D8:  MOVWF  07
07D9:  BCF    03.5
07DA:  BCF    07.0
....................  
.................... 		} 
....................  
.................... 		cFan1RunTime = 0; // reset interval counter. increases by interrupt timer. 
07DB:  CLRF   34
.................... 	} 
.................... 	else 
07DC:  GOTO   7EA
.................... 	{ 
.................... 		if( cFan1CanStop == NO ) 
07DD:  MOVF   36,F
07DE:  BTFSC  03.2
.................... 		{ 
.................... 			// time forces us to keep running (to prevent hysteresis) 
.................... 		} 
.................... 		else 
07DF:  GOTO   7EA
.................... 		{ 
.................... 			if ( cFan1Flag == ON ) 
07E0:  DECFSZ 2A,W
07E1:  GOTO   7EA
.................... 			{ 
.................... 				cFan1Flag = OFF; 
07E2:  CLRF   2A
.................... 				cFan1CanStop = NO; 
07E3:  CLRF   36
.................... 				//cFan1AutoState = OFF; 
.................... 				//cFan1RunTime = 0; // stopping fan, reset interval counter 
.................... 				output_high ( FAN_1 ); 
07E4:  BCF    28.0
07E5:  MOVF   28,W
07E6:  BSF    03.5
07E7:  MOVWF  07
07E8:  BCF    03.5
07E9:  BSF    07.0
....................  
.................... 			} 
.................... 		} 
.................... 	} 
....................  
.................... 	cFan1AutoState = cFan1Flag; // for correct view in display 
07EA:  MOVF   2A,W
07EB:  MOVWF  35
....................  
.................... } 
07EC:  BSF    0A.3
07ED:  BCF    0A.4
07EE:  GOTO   710 (RETURN)
....................  
....................  
....................  
....................  
....................  
.................... // LCD FUNCTIONS ================================= 
....................  
.................... void LCD_Init ( void ) 
.................... { 
.................... 	LCD_SetData ( 0x00 ); 
*
01AE:  CLRF   4A
01AF:  CALL   169
.................... 	delay_ms ( 200 );       // wait enough time after Vdd rise 
01B0:  MOVLW  C8
01B1:  MOVWF  4A
01B2:  CALL   155
.................... 	output_low ( LCD_RS ); 
01B3:  BSF    03.5
01B4:  BCF    06.6
01B5:  BCF    03.5
01B6:  BCF    06.6
.................... 	LCD_SetData ( 0x03 );   // init with specific nibbles to start 4-bit mode 
01B7:  MOVLW  03
01B8:  MOVWF  4A
01B9:  CALL   169
.................... 	LCD_PulseEnable(); 
01BA:  CALL   192
.................... 	LCD_PulseEnable(); 
01BB:  CALL   192
.................... 	LCD_PulseEnable(); 
01BC:  CALL   192
.................... 	LCD_SetData ( 0x02 );   // set 4-bit interface 
01BD:  MOVLW  02
01BE:  MOVWF  4A
01BF:  CALL   169
.................... 	LCD_PulseEnable();      // send dual nibbles hereafter, MSN first 
01C0:  CALL   192
.................... 	LCD_PutCmd ( 0x2C );    // function set (all lines, 5x7 characters) 
01C1:  MOVLW  2C
01C2:  MOVWF  37
01C3:  CALL   1A3
.................... 	LCD_PutCmd ( 0x0C );    // display ON, cursor off, no blink 
01C4:  MOVLW  0C
01C5:  MOVWF  37
01C6:  CALL   1A3
.................... 	LCD_PutCmd ( 0x01 );    // clear display 
01C7:  MOVLW  01
01C8:  MOVWF  37
01C9:  CALL   1A3
.................... 	LCD_PutCmd ( 0x06 );    // entry mode set, increment 
01CA:  MOVLW  06
01CB:  MOVWF  37
01CC:  CALL   1A3
.................... } 
01CD:  RETLW  00
....................  
.................... void LCD_SetPosition ( unsigned int cX ) 
.................... { 
.................... 	// this subroutine works specifically for 4-bit Port A 
.................... 	LCD_SetData ( swap ( cX ) | 0x08 ); 
01CE:  SWAPF  3C,F
01CF:  MOVF   3C,W
01D0:  IORLW  08
01D1:  MOVWF  3D
01D2:  MOVWF  4A
01D3:  CALL   169
.................... 	LCD_PulseEnable(); 
01D4:  CALL   192
.................... 	LCD_SetData ( swap ( cX ) ); 
01D5:  SWAPF  3C,F
01D6:  MOVF   3C,W
01D7:  MOVWF  4A
01D8:  CALL   169
.................... 	LCD_PulseEnable(); 
01D9:  CALL   192
.................... } 
01DA:  RETLW  00
....................  
.................... void LCD_PutChar ( unsigned int cX ) 
.................... { 
.................... 	// this subroutine works specifically for 4-bit Port A 
.................... 	output_high ( LCD_RS ); 
01DB:  BSF    03.5
01DC:  BCF    06.6
01DD:  BCF    03.5
01DE:  BSF    06.6
.................... 	LCD_SetData ( swap ( cX ) );     // send high nibble 
01DF:  SWAPF  49,F
01E0:  MOVF   49,W
01E1:  MOVWF  4A
01E2:  CALL   169
.................... 	LCD_PulseEnable(); 
01E3:  CALL   192
.................... 	LCD_SetData ( swap ( cX ) );     // send low nibble 
01E4:  SWAPF  49,F
01E5:  MOVF   49,W
01E6:  MOVWF  4A
01E7:  CALL   169
.................... 	LCD_PulseEnable(); 
01E8:  CALL   192
.................... 	output_low ( LCD_RS ); 
01E9:  BSF    03.5
01EA:  BCF    06.6
01EB:  BCF    03.5
01EC:  BCF    06.6
.................... } 
01ED:  RETLW  00
....................  
.................... void LCD_PutCmd ( unsigned int cX ) 
.................... { 
.................... 	// this subroutine works specifically for 4-bit Port A 
.................... 	LCD_SetData ( swap ( cX ) );     // send high nibble 
*
01A3:  SWAPF  37,F
01A4:  MOVF   37,W
01A5:  MOVWF  4A
01A6:  CALL   169
.................... 	LCD_PulseEnable(); 
01A7:  CALL   192
.................... 	LCD_SetData ( swap ( cX ) );     // send low nibble 
01A8:  SWAPF  37,F
01A9:  MOVF   37,W
01AA:  MOVWF  4A
01AB:  CALL   169
.................... 	LCD_PulseEnable(); 
01AC:  CALL   192
.................... } 
01AD:  RETLW  00
....................  
.................... void LCD_PulseEnable ( void ) 
.................... { 
.................... 	output_high ( LCD_EN ); 
*
0192:  BSF    03.5
0193:  BCF    06.5
0194:  BCF    03.5
0195:  BSF    06.5
.................... 	delay_us ( 10 ); 
0196:  MOVLW  06
0197:  MOVWF  77
0198:  DECFSZ 77,F
0199:  GOTO   198
019A:  NOP
.................... 	output_low ( LCD_EN ); 
019B:  BSF    03.5
019C:  BCF    06.5
019D:  BCF    03.5
019E:  BCF    06.5
.................... 	delay_ms ( 5 ); 
019F:  MOVLW  05
01A0:  MOVWF  4A
01A1:  CALL   155
.................... } 
01A2:  RETLW  00
....................  
.................... void LCD_SetData ( unsigned int cX ) 
.................... { 
.................... 	output_bit ( LCD_D0, cX & 0x01 ); 
*
0169:  BTFSC  4A.0
016A:  GOTO   16D
016B:  BCF    07.3
016C:  GOTO   16E
016D:  BSF    07.3
016E:  BCF    28.3
016F:  MOVF   28,W
0170:  BSF    03.5
0171:  MOVWF  07
.................... 	output_bit ( LCD_D1, cX & 0x02 ); 
0172:  BCF    03.5
0173:  BTFSC  4A.1
0174:  GOTO   177
0175:  BCF    07.4
0176:  GOTO   178
0177:  BSF    07.4
0178:  BCF    28.4
0179:  MOVF   28,W
017A:  BSF    03.5
017B:  MOVWF  07
.................... 	output_bit ( LCD_D2, cX & 0x04 ); 
017C:  BCF    03.5
017D:  BTFSC  4A.2
017E:  GOTO   181
017F:  BCF    07.5
0180:  GOTO   182
0181:  BSF    07.5
0182:  BCF    28.5
0183:  MOVF   28,W
0184:  BSF    03.5
0185:  MOVWF  07
.................... 	output_bit ( LCD_D3, cX & 0x08 ); 
0186:  BCF    03.5
0187:  BTFSC  4A.3
0188:  GOTO   18B
0189:  BCF    07.6
018A:  GOTO   18C
018B:  BSF    07.6
018C:  BCF    28.6
018D:  MOVF   28,W
018E:  BSF    03.5
018F:  MOVWF  07
.................... } 
0190:  BCF    03.5
0191:  RETLW  00

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG
