CCS PCM C Compiler, Version 4.013, 28193               16-okt-07 21:14

               Filename: \\192.168.30.13\storage\Elektronikk\PIC\badevifte\badevifte1.5.lst

               ROM used: 3870 words (47%)
                         Largest free fragment is 2048
               RAM used: 30 (8%) at main() level
                         118 (32%) worst case
               Stack:    6 worst case (5 in main + 1 for interrupts)

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   6B8
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   030
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   27,W
0028:  MOVWF  7B
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   109
.................... /* 
....................  
.................... Datastyring for baderomsvifte, basert på relativ luftfuktighet 
....................  
.................... Ken-Roger Andersen Oktober 2007 
....................  
.................... v2.2: Lagt inn temperatur sensor (NTC 1k@25°C) + menyvalget for visning av settings 
.................... v1.5: Fjernet OK knappen for valg av modus. Modus velges kun med 1 bryter, ettersom menyvalg increments, går den automatisk 
.................... til denne modusen. 
....................  
....................  
.................... */ 
....................  
.................... #include <16F876.H> 
.................... //////// Standard Header file for the PIC16F876 device //////////////// 
.................... #device PIC16F876 
.................... #list 
....................  
....................  
.................... #device ADC=10 
....................  
....................  
.................... #include <kenny.h> 
.................... #case 
....................  
.................... #ifndef TRUE 
.................... #define TRUE 1 
.................... #endif 
....................  
.................... #ifndef FALSE 
.................... #define FALSE 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO 0 
.................... #endif 
....................  
.................... #ifndef HIGH 
.................... #define HIGH 1 
.................... #endif 
....................  
.................... #ifndef LOW 
.................... #define LOW 0 
.................... #endif 
....................  
.................... #ifndef ON 
.................... #define ON 1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef UP 
.................... #define UP 1 
.................... #endif 
....................  
.................... #ifndef DOWN 
.................... #define DOWN 0 
.................... #endif 
....................  
.................... #ifndef UCHAR 
.................... #define UCHAR char 
.................... #endif 
....................  
.................... #ifndef UINT 
.................... #define UINT long 
.................... #endif 
....................  
.................... #ifndef BIT 
.................... #define BIT short 
.................... #endif 
....................  
.................... #ifndef SCHAR 
.................... #define SCHAR signed int 
.................... #endif 
....................  
.................... #ifndef SINT 
.................... #define SINT signed long 
.................... #endif 
....................  
.................... #ifndef FLOAT 
.................... #define FLOAT float 
.................... #endif 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.141592654 
....................  
....................  
.................... #define SQRT2  1.41421356 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float CEIL_FLOOR(float x, int n) 
.................... { 
....................    float y, res; 
....................    long l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float)(long)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (long)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float)l); 
....................   res = 32768.0*(float)l; 
....................   res += (float)(long)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float)(long)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float floor(float x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float ceil(float x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //	float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float x,float y) 
.................... { 
....................    float i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
....................  
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
....................  
.................... #define LN2 0.6931471806 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... float exp(float x) 
.................... { 
....................    float y, res, r; 
....................    signed int n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed long)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................    *(&res) = n + 0x7F; 
....................  
....................    y = y/LN2 - (float)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... /************************************************************/ 
....................  
.................... float const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float log(float x) 
.................... { 
....................    float y, res, r, y2; 
....................    signed n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
08E7:  MOVF   5C,W
08E8:  MOVWF  60
08E9:  MOVF   5B,W
08EA:  MOVWF  5F
08EB:  MOVF   5A,W
08EC:  MOVWF  5E
08ED:  MOVF   59,W
08EE:  MOVWF  5D
....................  
....................    if (y != 1.0) 
08EF:  MOVF   60,W
08F0:  MOVWF  71
08F1:  MOVF   5F,W
08F2:  MOVWF  70
08F3:  MOVF   5E,W
08F4:  MOVWF  6F
08F5:  MOVF   5D,W
08F6:  MOVWF  6E
08F7:  CLRF   75
08F8:  CLRF   74
08F9:  CLRF   73
08FA:  MOVLW  7F
08FB:  MOVWF  72
08FC:  BCF    0A.3
08FD:  CALL   598
08FE:  BSF    0A.3
08FF:  BTFSC  03.2
0900:  GOTO   35E
....................    { 
....................       *(&y) = 0x7E; 
0901:  CLRF   7A
0902:  MOVLW  5D
0903:  MOVWF  04
0904:  BCF    03.7
0905:  BTFSC  7A.0
0906:  BSF    03.7
0907:  MOVLW  7E
0908:  MOVWF  00
....................  
....................       y = (y - 1.0)/(y + 1.0); 
0909:  BSF    03.1
090A:  MOVF   60,W
090B:  MOVWF  75
090C:  MOVF   5F,W
090D:  MOVWF  74
090E:  MOVF   5E,W
090F:  MOVWF  73
0910:  MOVF   5D,W
0911:  MOVWF  72
0912:  BSF    03.5
0913:  CLRF   23
0914:  CLRF   22
0915:  CLRF   21
0916:  MOVLW  7F
0917:  MOVWF  20
0918:  BCF    0A.3
0919:  BCF    03.5
091A:  CALL   394
091B:  BSF    0A.3
091C:  MOVF   77,W
091D:  MOVWF  6E
091E:  MOVF   78,W
091F:  MOVWF  6F
0920:  MOVF   79,W
0921:  MOVWF  70
0922:  MOVF   7A,W
0923:  MOVWF  71
0924:  BCF    03.1
0925:  MOVF   60,W
0926:  MOVWF  75
0927:  MOVF   5F,W
0928:  MOVWF  74
0929:  MOVF   5E,W
092A:  MOVWF  73
092B:  MOVF   5D,W
092C:  MOVWF  72
092D:  BSF    03.5
092E:  CLRF   23
092F:  CLRF   22
0930:  CLRF   21
0931:  MOVLW  7F
0932:  MOVWF  20
0933:  BCF    0A.3
0934:  BCF    03.5
0935:  CALL   394
0936:  BSF    0A.3
0937:  MOVF   71,W
0938:  MOVWF  75
0939:  MOVF   70,W
093A:  MOVWF  74
093B:  MOVF   6F,W
093C:  MOVWF  73
093D:  MOVF   6E,W
093E:  MOVWF  72
093F:  MOVF   7A,W
0940:  BSF    03.5
0941:  MOVWF  23
0942:  MOVF   79,W
0943:  MOVWF  22
0944:  MOVF   78,W
0945:  MOVWF  21
0946:  MOVF   77,W
0947:  MOVWF  20
0948:  BCF    0A.3
0949:  BCF    03.5
094A:  CALL   231
094B:  BSF    0A.3
094C:  MOVF   7A,W
094D:  MOVWF  60
094E:  MOVF   79,W
094F:  MOVWF  5F
0950:  MOVF   78,W
0951:  MOVWF  5E
0952:  MOVF   77,W
0953:  MOVWF  5D
....................  
....................       y2=y*y; 
0954:  MOVF   60,W
0955:  MOVWF  71
0956:  MOVF   5F,W
0957:  MOVWF  70
0958:  MOVF   5E,W
0959:  MOVWF  6F
095A:  MOVF   5D,W
095B:  MOVWF  6E
095C:  MOVF   60,W
095D:  MOVWF  75
095E:  MOVF   5F,W
095F:  MOVWF  74
0960:  MOVF   5E,W
0961:  MOVWF  73
0962:  MOVF   5D,W
0963:  MOVWF  72
0964:  BCF    0A.3
0965:  CALL   30A
0966:  BSF    0A.3
0967:  MOVF   7A,W
0968:  MOVWF  6C
0969:  MOVF   79,W
096A:  MOVWF  6B
096B:  MOVF   78,W
096C:  MOVWF  6A
096D:  MOVF   77,W
096E:  MOVWF  69
....................  
....................       res = pl[0]*y2 + pl[1]; 
096F:  MOVLW  BC
0970:  MOVWF  71
0971:  MOVLW  24
0972:  MOVWF  70
0973:  MOVLW  67
0974:  MOVWF  6F
0975:  MOVLW  7D
0976:  MOVWF  6E
0977:  MOVF   6C,W
0978:  MOVWF  75
0979:  MOVF   6B,W
097A:  MOVWF  74
097B:  MOVF   6A,W
097C:  MOVWF  73
097D:  MOVF   69,W
097E:  MOVWF  72
097F:  BCF    0A.3
0980:  CALL   30A
0981:  BSF    0A.3
0982:  MOVF   77,W
0983:  MOVWF  6E
0984:  MOVF   78,W
0985:  MOVWF  6F
0986:  MOVF   79,W
0987:  MOVWF  70
0988:  MOVF   7A,W
0989:  MOVWF  71
098A:  BCF    03.1
098B:  MOVF   7A,W
098C:  MOVWF  75
098D:  MOVF   79,W
098E:  MOVWF  74
098F:  MOVF   78,W
0990:  MOVWF  73
0991:  MOVF   77,W
0992:  MOVWF  72
0993:  MOVLW  E3
0994:  BSF    03.5
0995:  MOVWF  23
0996:  MOVLW  E4
0997:  MOVWF  22
0998:  MOVLW  90
0999:  MOVWF  21
099A:  MOVLW  82
099B:  MOVWF  20
099C:  BCF    0A.3
099D:  BCF    03.5
099E:  CALL   394
099F:  BSF    0A.3
09A0:  MOVF   7A,W
09A1:  MOVWF  64
09A2:  MOVF   79,W
09A3:  MOVWF  63
09A4:  MOVF   78,W
09A5:  MOVWF  62
09A6:  MOVF   77,W
09A7:  MOVWF  61
....................       res = res*y2 + pl[2]; 
09A8:  MOVF   64,W
09A9:  MOVWF  71
09AA:  MOVF   63,W
09AB:  MOVWF  70
09AC:  MOVF   62,W
09AD:  MOVWF  6F
09AE:  MOVF   61,W
09AF:  MOVWF  6E
09B0:  MOVF   6C,W
09B1:  MOVWF  75
09B2:  MOVF   6B,W
09B3:  MOVWF  74
09B4:  MOVF   6A,W
09B5:  MOVWF  73
09B6:  MOVF   69,W
09B7:  MOVWF  72
09B8:  BCF    0A.3
09B9:  CALL   30A
09BA:  BSF    0A.3
09BB:  MOVF   77,W
09BC:  MOVWF  6E
09BD:  MOVF   78,W
09BE:  MOVWF  6F
09BF:  MOVF   79,W
09C0:  MOVWF  70
09C1:  MOVF   7A,W
09C2:  MOVWF  71
09C3:  BCF    03.1
09C4:  MOVF   7A,W
09C5:  MOVWF  75
09C6:  MOVF   79,W
09C7:  MOVWF  74
09C8:  MOVF   78,W
09C9:  MOVWF  73
09CA:  MOVF   77,W
09CB:  MOVWF  72
09CC:  MOVLW  1C
09CD:  BSF    03.5
09CE:  MOVWF  23
09CF:  MOVLW  87
09D0:  MOVWF  22
09D1:  MOVLW  57
09D2:  MOVWF  21
09D3:  MOVLW  83
09D4:  MOVWF  20
09D5:  BCF    0A.3
09D6:  BCF    03.5
09D7:  CALL   394
09D8:  BSF    0A.3
09D9:  MOVF   7A,W
09DA:  MOVWF  64
09DB:  MOVF   79,W
09DC:  MOVWF  63
09DD:  MOVF   78,W
09DE:  MOVWF  62
09DF:  MOVF   77,W
09E0:  MOVWF  61
....................       res = res*y2 + pl[3]; 
09E1:  MOVF   64,W
09E2:  MOVWF  71
09E3:  MOVF   63,W
09E4:  MOVWF  70
09E5:  MOVF   62,W
09E6:  MOVWF  6F
09E7:  MOVF   61,W
09E8:  MOVWF  6E
09E9:  MOVF   6C,W
09EA:  MOVWF  75
09EB:  MOVF   6B,W
09EC:  MOVWF  74
09ED:  MOVF   6A,W
09EE:  MOVWF  73
09EF:  MOVF   69,W
09F0:  MOVWF  72
09F1:  BCF    0A.3
09F2:  CALL   30A
09F3:  BSF    0A.3
09F4:  MOVF   77,W
09F5:  MOVWF  6E
09F6:  MOVF   78,W
09F7:  MOVWF  6F
09F8:  MOVF   79,W
09F9:  MOVWF  70
09FA:  MOVF   7A,W
09FB:  MOVWF  71
09FC:  BCF    03.1
09FD:  MOVF   7A,W
09FE:  MOVWF  75
09FF:  MOVF   79,W
0A00:  MOVWF  74
0A01:  MOVF   78,W
0A02:  MOVWF  73
0A03:  MOVF   77,W
0A04:  MOVWF  72
0A05:  MOVLW  AB
0A06:  BSF    03.5
0A07:  MOVWF  23
0A08:  MOVLW  E1
0A09:  MOVWF  22
0A0A:  MOVLW  9E
0A0B:  MOVWF  21
0A0C:  MOVLW  83
0A0D:  MOVWF  20
0A0E:  BCF    0A.3
0A0F:  BCF    03.5
0A10:  CALL   394
0A11:  BSF    0A.3
0A12:  MOVF   7A,W
0A13:  MOVWF  64
0A14:  MOVF   79,W
0A15:  MOVWF  63
0A16:  MOVF   78,W
0A17:  MOVWF  62
0A18:  MOVF   77,W
0A19:  MOVWF  61
....................  
....................       r = ql[0]*y2 + ql[1]; 
0A1A:  CLRF   71
0A1B:  CLRF   70
0A1C:  CLRF   6F
0A1D:  MOVLW  7F
0A1E:  MOVWF  6E
0A1F:  MOVF   6C,W
0A20:  MOVWF  75
0A21:  MOVF   6B,W
0A22:  MOVWF  74
0A23:  MOVF   6A,W
0A24:  MOVWF  73
0A25:  MOVF   69,W
0A26:  MOVWF  72
0A27:  BCF    0A.3
0A28:  CALL   30A
0A29:  BSF    0A.3
0A2A:  MOVF   77,W
0A2B:  MOVWF  6E
0A2C:  MOVF   78,W
0A2D:  MOVWF  6F
0A2E:  MOVF   79,W
0A2F:  MOVWF  70
0A30:  MOVF   7A,W
0A31:  MOVWF  71
0A32:  BCF    03.1
0A33:  MOVF   7A,W
0A34:  MOVWF  75
0A35:  MOVF   79,W
0A36:  MOVWF  74
0A37:  MOVF   78,W
0A38:  MOVWF  73
0A39:  MOVF   77,W
0A3A:  MOVWF  72
0A3B:  MOVLW  B4
0A3C:  BSF    03.5
0A3D:  MOVWF  23
0A3E:  MOVLW  2A
0A3F:  MOVWF  22
0A40:  MOVLW  82
0A41:  MOVWF  21
0A42:  MOVWF  20
0A43:  BCF    0A.3
0A44:  BCF    03.5
0A45:  CALL   394
0A46:  BSF    0A.3
0A47:  MOVF   7A,W
0A48:  MOVWF  68
0A49:  MOVF   79,W
0A4A:  MOVWF  67
0A4B:  MOVF   78,W
0A4C:  MOVWF  66
0A4D:  MOVF   77,W
0A4E:  MOVWF  65
....................       r = r*y2 + ql[2]; 
0A4F:  MOVF   68,W
0A50:  MOVWF  71
0A51:  MOVF   67,W
0A52:  MOVWF  70
0A53:  MOVF   66,W
0A54:  MOVWF  6F
0A55:  MOVF   65,W
0A56:  MOVWF  6E
0A57:  MOVF   6C,W
0A58:  MOVWF  75
0A59:  MOVF   6B,W
0A5A:  MOVWF  74
0A5B:  MOVF   6A,W
0A5C:  MOVWF  73
0A5D:  MOVF   69,W
0A5E:  MOVWF  72
0A5F:  BCF    0A.3
0A60:  CALL   30A
0A61:  BSF    0A.3
0A62:  MOVF   77,W
0A63:  MOVWF  6E
0A64:  MOVF   78,W
0A65:  MOVWF  6F
0A66:  MOVF   79,W
0A67:  MOVWF  70
0A68:  MOVF   7A,W
0A69:  MOVWF  71
0A6A:  BCF    03.1
0A6B:  MOVF   7A,W
0A6C:  MOVWF  75
0A6D:  MOVF   79,W
0A6E:  MOVWF  74
0A6F:  MOVF   78,W
0A70:  MOVWF  73
0A71:  MOVF   77,W
0A72:  MOVWF  72
0A73:  MOVLW  80
0A74:  BSF    03.5
0A75:  MOVWF  23
0A76:  MOVLW  3E
0A77:  MOVWF  22
0A78:  MOVLW  06
0A79:  MOVWF  21
0A7A:  MOVLW  83
0A7B:  MOVWF  20
0A7C:  BCF    0A.3
0A7D:  BCF    03.5
0A7E:  CALL   394
0A7F:  BSF    0A.3
0A80:  MOVF   7A,W
0A81:  MOVWF  68
0A82:  MOVF   79,W
0A83:  MOVWF  67
0A84:  MOVF   78,W
0A85:  MOVWF  66
0A86:  MOVF   77,W
0A87:  MOVWF  65
....................       r = r*y2 + ql[3]; 
0A88:  MOVF   68,W
0A89:  MOVWF  71
0A8A:  MOVF   67,W
0A8B:  MOVWF  70
0A8C:  MOVF   66,W
0A8D:  MOVWF  6F
0A8E:  MOVF   65,W
0A8F:  MOVWF  6E
0A90:  MOVF   6C,W
0A91:  MOVWF  75
0A92:  MOVF   6B,W
0A93:  MOVWF  74
0A94:  MOVF   6A,W
0A95:  MOVWF  73
0A96:  MOVF   69,W
0A97:  MOVWF  72
0A98:  BCF    0A.3
0A99:  CALL   30A
0A9A:  BSF    0A.3
0A9B:  MOVF   77,W
0A9C:  MOVWF  6E
0A9D:  MOVF   78,W
0A9E:  MOVWF  6F
0A9F:  MOVF   79,W
0AA0:  MOVWF  70
0AA1:  MOVF   7A,W
0AA2:  MOVWF  71
0AA3:  BCF    03.1
0AA4:  MOVF   7A,W
0AA5:  MOVWF  75
0AA6:  MOVF   79,W
0AA7:  MOVWF  74
0AA8:  MOVF   78,W
0AA9:  MOVWF  73
0AAA:  MOVF   77,W
0AAB:  MOVWF  72
0AAC:  MOVLW  AB
0AAD:  BSF    03.5
0AAE:  MOVWF  23
0AAF:  MOVLW  E1
0AB0:  MOVWF  22
0AB1:  MOVLW  9E
0AB2:  MOVWF  21
0AB3:  MOVLW  82
0AB4:  MOVWF  20
0AB5:  BCF    0A.3
0AB6:  BCF    03.5
0AB7:  CALL   394
0AB8:  BSF    0A.3
0AB9:  MOVF   7A,W
0ABA:  MOVWF  68
0ABB:  MOVF   79,W
0ABC:  MOVWF  67
0ABD:  MOVF   78,W
0ABE:  MOVWF  66
0ABF:  MOVF   77,W
0AC0:  MOVWF  65
....................  
....................       res = y*res/r; 
0AC1:  MOVF   60,W
0AC2:  MOVWF  71
0AC3:  MOVF   5F,W
0AC4:  MOVWF  70
0AC5:  MOVF   5E,W
0AC6:  MOVWF  6F
0AC7:  MOVF   5D,W
0AC8:  MOVWF  6E
0AC9:  MOVF   64,W
0ACA:  MOVWF  75
0ACB:  MOVF   63,W
0ACC:  MOVWF  74
0ACD:  MOVF   62,W
0ACE:  MOVWF  73
0ACF:  MOVF   61,W
0AD0:  MOVWF  72
0AD1:  BCF    0A.3
0AD2:  CALL   30A
0AD3:  BSF    0A.3
0AD4:  MOVF   77,W
0AD5:  MOVWF  6E
0AD6:  MOVF   78,W
0AD7:  MOVWF  6F
0AD8:  MOVF   79,W
0AD9:  MOVWF  70
0ADA:  MOVF   7A,W
0ADB:  MOVWF  71
0ADC:  MOVWF  75
0ADD:  MOVF   79,W
0ADE:  MOVWF  74
0ADF:  MOVF   78,W
0AE0:  MOVWF  73
0AE1:  MOVF   77,W
0AE2:  MOVWF  72
0AE3:  MOVF   68,W
0AE4:  BSF    03.5
0AE5:  MOVWF  23
0AE6:  BCF    03.5
0AE7:  MOVF   67,W
0AE8:  BSF    03.5
0AE9:  MOVWF  22
0AEA:  BCF    03.5
0AEB:  MOVF   66,W
0AEC:  BSF    03.5
0AED:  MOVWF  21
0AEE:  BCF    03.5
0AEF:  MOVF   65,W
0AF0:  BSF    03.5
0AF1:  MOVWF  20
0AF2:  BCF    0A.3
0AF3:  BCF    03.5
0AF4:  CALL   231
0AF5:  BSF    0A.3
0AF6:  MOVF   7A,W
0AF7:  MOVWF  64
0AF8:  MOVF   79,W
0AF9:  MOVWF  63
0AFA:  MOVF   78,W
0AFB:  MOVWF  62
0AFC:  MOVF   77,W
0AFD:  MOVWF  61
....................  
....................       n = *(&x) - 0x7E; 
0AFE:  CLRF   7A
0AFF:  MOVLW  59
0B00:  MOVWF  04
0B01:  BCF    03.7
0B02:  BTFSC  7A.0
0B03:  BSF    03.7
0B04:  MOVLW  7E
0B05:  SUBWF  00,W
0B06:  MOVWF  6D
....................  
....................       if (n<0) 
0B07:  BTFSS  6D.7
0B08:  GOTO   31C
....................          r = -(float)-n; 
0B09:  MOVF   6D,W
0B0A:  SUBLW  00
0B0B:  CLRF   6F
0B0C:  MOVWF  6E
0B0D:  BTFSC  6E.7
0B0E:  DECF   6F,F
0B0F:  BCF    0A.3
0B10:  CALL   704
0B11:  BSF    0A.3
0B12:  MOVF   77,W
0B13:  MOVWF  65
0B14:  MOVF   78,W
0B15:  XORLW  80
0B16:  MOVWF  66
0B17:  MOVF   79,W
0B18:  MOVWF  67
0B19:  MOVF   7A,W
0B1A:  MOVWF  68
....................       else 
0B1B:  GOTO   32C
....................          r = (float)n; 
0B1C:  CLRF   6F
0B1D:  MOVF   6D,W
0B1E:  MOVWF  6E
0B1F:  BTFSC  6E.7
0B20:  DECF   6F,F
0B21:  BCF    0A.3
0B22:  CALL   704
0B23:  BSF    0A.3
0B24:  MOVF   7A,W
0B25:  MOVWF  68
0B26:  MOVF   79,W
0B27:  MOVWF  67
0B28:  MOVF   78,W
0B29:  MOVWF  66
0B2A:  MOVF   77,W
0B2B:  MOVWF  65
....................  
....................       res += r*LN2; 
0B2C:  MOVF   68,W
0B2D:  MOVWF  71
0B2E:  MOVF   67,W
0B2F:  MOVWF  70
0B30:  MOVF   66,W
0B31:  MOVWF  6F
0B32:  MOVF   65,W
0B33:  MOVWF  6E
0B34:  MOVLW  18
0B35:  MOVWF  75
0B36:  MOVLW  72
0B37:  MOVWF  74
0B38:  MOVLW  31
0B39:  MOVWF  73
0B3A:  MOVLW  7E
0B3B:  MOVWF  72
0B3C:  BCF    0A.3
0B3D:  CALL   30A
0B3E:  BSF    0A.3
0B3F:  BCF    03.1
0B40:  MOVF   64,W
0B41:  MOVWF  75
0B42:  MOVF   63,W
0B43:  MOVWF  74
0B44:  MOVF   62,W
0B45:  MOVWF  73
0B46:  MOVF   61,W
0B47:  MOVWF  72
0B48:  MOVF   7A,W
0B49:  BSF    03.5
0B4A:  MOVWF  23
0B4B:  MOVF   79,W
0B4C:  MOVWF  22
0B4D:  MOVF   78,W
0B4E:  MOVWF  21
0B4F:  MOVF   77,W
0B50:  MOVWF  20
0B51:  BCF    0A.3
0B52:  BCF    03.5
0B53:  CALL   394
0B54:  BSF    0A.3
0B55:  MOVF   7A,W
0B56:  MOVWF  64
0B57:  MOVF   79,W
0B58:  MOVWF  63
0B59:  MOVF   78,W
0B5A:  MOVWF  62
0B5B:  MOVF   77,W
0B5C:  MOVWF  61
....................    } 
....................  
....................    else 
0B5D:  GOTO   362
....................       res = 0.0; 
0B5E:  CLRF   64
0B5F:  CLRF   63
0B60:  CLRF   62
0B61:  CLRF   61
....................  
....................    return(res); 
0B62:  MOVF   61,W
0B63:  MOVWF  77
0B64:  MOVF   62,W
0B65:  MOVWF  78
0B66:  MOVF   63,W
0B67:  MOVWF  79
0B68:  MOVF   64,W
0B69:  MOVWF  7A
.................... } 
....................  
.................... #define LN10 2.30258509 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float log10(float x) 
.................... { 
....................    float r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float modf(float value,float *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float pwr(float x,float y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float pow(float x,float y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float sqrt(float x) 
.................... { 
....................    float y, res; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p=&y; 
....................    (*p)=(BYTE)((((int16)(*p)) + 127) >> 1); 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................       (*p)--; 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
....................  
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO	1.570796326794896 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI 			0.6366197724 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float cos(float x) 
.................... { 
.................... 	float y, t, t2 = 1.0; 
.................... 	int quad, i; 
.................... 	float frac; 
.................... 	float p[4] = { 
.................... 		-0.499999993585, 
.................... 		 0.041666636258, 
.................... 		-0.0013888361399, 
.................... 		 0.00002476016134 
.................... 	}; 
....................  
.................... 	if (x < 0) x = -x;                  // absolute value of input 
....................  
.................... 	quad = (int)(x / PI_DIV_BY_TWO);    // quadrant 
.................... 	frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
.................... 	quad = quad % 4;                    // quadrant (0 to 3) 
....................  
.................... 	if (quad == 0 || quad == 2) 
.................... 		t = frac * PI_DIV_BY_TWO; 
.................... 	else if (quad == 1) 
.................... 		t = (1-frac) * PI_DIV_BY_TWO; 
.................... 	else // should be 3 
.................... 		t = (frac-1) * PI_DIV_BY_TWO; 
....................  
.................... 	y = 0.999999999781; 
.................... 	t = t * t; 
.................... 	for (i = 0; i <= 3; i++) 
.................... 	{ 
.................... 		t2 = t2 * t; 
.................... 		y = y + p[i] * t2; 
.................... 	} 
....................  
.................... 	if (quad == 2 || quad == 1) 
.................... 		y = -y;  // correct sign 
....................  
.................... 	return (y); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float sin(float x) 
.................... { 
.................... 	return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float tan(float x) 
.................... { 
....................    float c, s; 
....................  
....................    c = cos(x); 
.................... 	if (c == 0.0) 
.................... 	   return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
....................  
....................  
.................... float const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float ASIN_COS(float x, int n) 
.................... { 
....................    float y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float asin(float x) 
.................... { 
....................    float r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float acos(float x) 
.................... { 
....................    float r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... float const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float atan(float x) 
.................... { 
....................    float y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //	float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
....................  
.................... float atan2(float y,float x) 
.................... { 
....................    float z; 
....................    int1 sign; 
....................    int quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float cosh(float x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float sinh(float x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float tanh(float x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //	float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
....................  
....................  
.................... #define LOG2 .30102999566398119521 
.................... float frexp(float x, signed int *exp) 
.................... { 
....................    float res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //	float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float ldexp(float value, signed int exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #include <ntc.h> 
.................... /* 
....................  * Written by Kenny 
....................  * 
....................  */ 
.................... float r2temperature(float ohm); 
.................... float adc_2_ohm(int adc_value); 
....................  
.................... // +5V 
.................... // ---+ 
.................... //    # 
.................... //    # 10k constant resistor 
.................... //    |---------> Uadc 
.................... //    # 
.................... //    # ntc 1k 
.................... // ---+ 
.................... // 
....................  
.................... /* All calibrations should be done here if needed. Normally you will 
.................... * only compensate the variance in the value of the 10k resistor and 
.................... * the 1k NTC. The 78L05 has also influence. This all can be adjusted 
.................... * changing NTC_RN a bit. 
.................... */ 
....................  
....................  
.................... /* Constant pullup resistor value */ 
.................... #define NTC_PULLUP_R 9850.0	//calibrated 10k 
....................  
.................... /* 
.................... NTC temperature constant "B"-value: 3977K +/- 1% 
.................... usually between 2000k - 5000k, I don't know the type i'm using, trial and error... 
.................... - see PHP test script in comments under 
.................... */ 
.................... #define NTC_B 3177 
.................... /* NTC datasheet is 1 kOhm at 25 degree celsius */ 
.................... #define NTC_TN 25 
.................... /* 1 kOhm +/- 10%, change for calibration: */ 
.................... #define NTC_RN 1000 
....................  
....................  
.................... /* 
.................... PHP script for B value trial and error on a linux box 
....................  
.................... <? 
....................  
.................... $NTC_B=3177; 
.................... $NTC_RN=1000; 
.................... $NTC_TN=25; 
.................... $ohm = $argv[1]; //1000ohm @25, 653ohm @~37.5 (under my arm....) 
....................  
.................... $tmp = ( ( 1/$NTC_B ) * log( ($ohm/$NTC_RN) ) ) + ( 1 / ($NTC_TN+273) ); 
....................  
.................... $c = (1 / $tmp) - 273; 
.................... print "\n$c C\n"; 
.................... ?> 
....................  
.................... */ 
....................  
....................  
.................... #include "ntc.c" 
....................  
....................  
.................... /* this function converts the ADC value into an Ohm value of the NTC 
....................  * here AVcc=5V is used as reference voltage 
....................  */ 
.................... float adc_2_ohm(int adc_value) 
.................... { 
.................... 	float ohm; 
....................  
.................... 	// 10bit adc=0..1023 over a voltage range from 0-5V 
.................... 	// Uref=5V = VDD 
.................... 	// 10000 / ( 1024/adc_value  - 1) -> ohm 
.................... 	// 
....................  
.................... 	// ADCval= Uadc * (1024/Uref) 
.................... 	// Rntc= 10K * ( 1 / ((5V/Uadc) -1) ) 
.................... 	if (adc_value < 1){ 
*
0815:  MOVF   49,F
0816:  BTFSS  03.2
0817:  GOTO   01A
.................... 		// never divide by zero: 
.................... 		adc_value=1; 
0818:  MOVLW  01
0819:  MOVWF  49
.................... 	} 
.................... 	ohm=NTC_PULLUP_R / (( 1024.0 / adc_value ) - 1 ); 
081A:  CLRF   4F
081B:  MOVF   49,W
081C:  MOVWF  4E
081D:  BCF    0A.3
081E:  CALL   214
081F:  BSF    0A.3
0820:  CLRF   75
0821:  CLRF   74
0822:  CLRF   73
0823:  MOVLW  89
0824:  MOVWF  72
0825:  MOVF   7A,W
0826:  BSF    03.5
0827:  MOVWF  23
0828:  MOVF   79,W
0829:  MOVWF  22
082A:  MOVF   78,W
082B:  MOVWF  21
082C:  MOVF   77,W
082D:  MOVWF  20
082E:  BCF    0A.3
082F:  BCF    03.5
0830:  CALL   231
0831:  BSF    0A.3
0832:  MOVF   77,W
0833:  MOVWF  4E
0834:  MOVF   78,W
0835:  MOVWF  4F
0836:  MOVF   79,W
0837:  MOVWF  50
0838:  MOVF   7A,W
0839:  MOVWF  51
083A:  BSF    03.1
083B:  MOVF   7A,W
083C:  MOVWF  75
083D:  MOVF   79,W
083E:  MOVWF  74
083F:  MOVF   78,W
0840:  MOVWF  73
0841:  MOVF   77,W
0842:  MOVWF  72
0843:  BSF    03.5
0844:  CLRF   23
0845:  CLRF   22
0846:  CLRF   21
0847:  MOVLW  7F
0848:  MOVWF  20
0849:  BCF    0A.3
084A:  BCF    03.5
084B:  CALL   394
084C:  BSF    0A.3
084D:  CLRF   75
084E:  MOVLW  E8
084F:  MOVWF  74
0850:  MOVLW  19
0851:  MOVWF  73
0852:  MOVLW  8C
0853:  MOVWF  72
0854:  MOVF   7A,W
0855:  BSF    03.5
0856:  MOVWF  23
0857:  MOVF   79,W
0858:  MOVWF  22
0859:  MOVF   78,W
085A:  MOVWF  21
085B:  MOVF   77,W
085C:  MOVWF  20
085D:  BCF    0A.3
085E:  BCF    03.5
085F:  CALL   231
0860:  BSF    0A.3
0861:  MOVF   7A,W
0862:  MOVWF  4D
0863:  MOVF   79,W
0864:  MOVWF  4C
0865:  MOVF   78,W
0866:  MOVWF  4B
0867:  MOVF   77,W
0868:  MOVWF  4A
.................... 	return(ohm); 
0869:  MOVF   4A,W
086A:  MOVWF  77
086B:  MOVF   4B,W
086C:  MOVWF  78
086D:  MOVF   4C,W
086E:  MOVWF  79
086F:  MOVF   4D,W
0870:  MOVWF  7A
.................... } 
....................  
....................  
.................... /* convert a ntc resistance value given in kohm to 
....................  * temperature in celsius. The NTC follows a exponential 
....................  * characteristic. */ 
.................... float r2temperature(float ohm) 
.................... { 
.................... 	float tcelsius; 
.................... 	float tmp; 
....................  
....................  
.................... 	tcelsius = 100; 
*
0881:  CLRF   50
0882:  CLRF   4F
0883:  MOVLW  48
0884:  MOVWF  4E
0885:  MOVLW  85
0886:  MOVWF  4D
.................... 	tmp=1; 
0887:  CLRF   54
0888:  CLRF   53
0889:  CLRF   52
088A:  MOVLW  7F
088B:  MOVWF  51
....................  
.................... 	if ((ohm/NTC_RN) < 0.1){ 
088C:  MOVF   4C,W
088D:  MOVWF  75
088E:  MOVF   4B,W
088F:  MOVWF  74
0890:  MOVF   4A,W
0891:  MOVWF  73
0892:  MOVF   49,W
0893:  MOVWF  72
0894:  BSF    03.5
0895:  CLRF   23
0896:  CLRF   22
0897:  MOVLW  7A
0898:  MOVWF  21
0899:  MOVLW  88
089A:  MOVWF  20
089B:  BCF    0A.3
089C:  BCF    03.5
089D:  CALL   231
089E:  BSF    0A.3
089F:  MOVF   77,W
08A0:  MOVWF  55
08A1:  MOVF   78,W
08A2:  MOVWF  56
08A3:  MOVF   79,W
08A4:  MOVWF  57
08A5:  MOVF   7A,W
08A6:  MOVWF  58
08A7:  MOVWF  71
08A8:  MOVF   57,W
08A9:  MOVWF  70
08AA:  MOVF   56,W
08AB:  MOVWF  6F
08AC:  MOVF   55,W
08AD:  MOVWF  6E
08AE:  MOVLW  CD
08AF:  MOVWF  75
08B0:  MOVLW  CC
08B1:  MOVWF  74
08B2:  MOVLW  4C
08B3:  MOVWF  73
08B4:  MOVLW  7B
08B5:  MOVWF  72
08B6:  BCF    0A.3
08B7:  CALL   598
08B8:  BSF    0A.3
08B9:  BTFSS  03.0
08BA:  GOTO   0C4
.................... 		//ERROR: resistance value of NTC is too small (too hot here ;-) 
.................... 		return(tcelsius); 
08BB:  MOVF   4D,W
08BC:  MOVWF  77
08BD:  MOVF   4E,W
08BE:  MOVWF  78
08BF:  MOVF   4F,W
08C0:  MOVWF  79
08C1:  MOVF   50,W
08C2:  MOVWF  7A
08C3:  GOTO   3F3
.................... 	} 
.................... 	tmp = ( (1.0/NTC_B) * log( (ohm/NTC_RN) ) ) + ( 1 / (NTC_TN+273.0) ); 
08C4:  MOVF   4C,W
08C5:  MOVWF  75
08C6:  MOVF   4B,W
08C7:  MOVWF  74
08C8:  MOVF   4A,W
08C9:  MOVWF  73
08CA:  MOVF   49,W
08CB:  MOVWF  72
08CC:  BSF    03.5
08CD:  CLRF   23
08CE:  CLRF   22
08CF:  MOVLW  7A
08D0:  MOVWF  21
08D1:  MOVLW  88
08D2:  MOVWF  20
08D3:  BCF    0A.3
08D4:  BCF    03.5
08D5:  CALL   231
08D6:  BSF    0A.3
08D7:  MOVF   77,W
08D8:  MOVWF  55
08D9:  MOVF   78,W
08DA:  MOVWF  56
08DB:  MOVF   79,W
08DC:  MOVWF  57
08DD:  MOVF   7A,W
08DE:  MOVWF  58
08DF:  MOVF   58,W
08E0:  MOVWF  5C
08E1:  MOVF   57,W
08E2:  MOVWF  5B
08E3:  MOVF   56,W
08E4:  MOVWF  5A
08E5:  MOVF   55,W
08E6:  MOVWF  59
*
0B6A:  MOVLW  B0
0B6B:  MOVWF  71
0B6C:  MOVLW  06
0B6D:  MOVWF  70
0B6E:  MOVLW  25
0B6F:  MOVWF  6F
0B70:  MOVLW  73
0B71:  MOVWF  6E
0B72:  MOVF   7A,W
0B73:  MOVWF  75
0B74:  MOVF   79,W
0B75:  MOVWF  74
0B76:  MOVF   78,W
0B77:  MOVWF  73
0B78:  MOVF   77,W
0B79:  MOVWF  72
0B7A:  BCF    0A.3
0B7B:  CALL   30A
0B7C:  BSF    0A.3
0B7D:  MOVF   77,W
0B7E:  MOVWF  56
0B7F:  MOVF   78,W
0B80:  MOVWF  57
0B81:  MOVF   79,W
0B82:  MOVWF  58
0B83:  MOVF   7A,W
0B84:  MOVWF  59
0B85:  CLRF   5B
0B86:  MOVF   04,W
0B87:  MOVWF  5A
0B88:  BCF    5B.0
0B89:  BTFSC  03.7
0B8A:  BSF    5B.0
0B8B:  BCF    03.1
0B8C:  MOVF   7A,W
0B8D:  MOVWF  75
0B8E:  MOVF   79,W
0B8F:  MOVWF  74
0B90:  MOVF   78,W
0B91:  MOVWF  73
0B92:  MOVF   77,W
0B93:  MOVWF  72
0B94:  MOVLW  62
0B95:  BSF    03.5
0B96:  MOVWF  23
0B97:  MOVLW  EB
0B98:  MOVWF  22
0B99:  MOVLW  5B
0B9A:  MOVWF  21
0B9B:  MOVLW  76
0B9C:  MOVWF  20
0B9D:  BCF    0A.3
0B9E:  BCF    03.5
0B9F:  CALL   394
0BA0:  BSF    0A.3
0BA1:  MOVF   5A,W
0BA2:  MOVWF  04
0BA3:  BCF    03.7
0BA4:  BTFSC  5B.0
0BA5:  BSF    03.7
0BA6:  MOVF   7A,W
0BA7:  MOVWF  54
0BA8:  MOVF   79,W
0BA9:  MOVWF  53
0BAA:  MOVF   78,W
0BAB:  MOVWF  52
0BAC:  MOVF   77,W
0BAD:  MOVWF  51
....................  
.................... 	tcelsius = (float) (1.0/tmp) -273; 
0BAE:  CLRF   75
0BAF:  CLRF   74
0BB0:  CLRF   73
0BB1:  MOVLW  7F
0BB2:  MOVWF  72
0BB3:  MOVF   54,W
0BB4:  BSF    03.5
0BB5:  MOVWF  23
0BB6:  BCF    03.5
0BB7:  MOVF   53,W
0BB8:  BSF    03.5
0BB9:  MOVWF  22
0BBA:  BCF    03.5
0BBB:  MOVF   52,W
0BBC:  BSF    03.5
0BBD:  MOVWF  21
0BBE:  BCF    03.5
0BBF:  MOVF   51,W
0BC0:  BSF    03.5
0BC1:  MOVWF  20
0BC2:  BCF    0A.3
0BC3:  BCF    03.5
0BC4:  CALL   231
0BC5:  BSF    0A.3
0BC6:  MOVF   77,W
0BC7:  MOVWF  55
0BC8:  MOVF   78,W
0BC9:  MOVWF  56
0BCA:  MOVF   79,W
0BCB:  MOVWF  57
0BCC:  MOVF   7A,W
0BCD:  MOVWF  58
0BCE:  BSF    03.1
0BCF:  MOVF   7A,W
0BD0:  MOVWF  75
0BD1:  MOVF   79,W
0BD2:  MOVWF  74
0BD3:  MOVF   78,W
0BD4:  MOVWF  73
0BD5:  MOVF   77,W
0BD6:  MOVWF  72
0BD7:  BSF    03.5
0BD8:  CLRF   23
0BD9:  MOVLW  80
0BDA:  MOVWF  22
0BDB:  MOVLW  08
0BDC:  MOVWF  21
0BDD:  MOVLW  87
0BDE:  MOVWF  20
0BDF:  BCF    0A.3
0BE0:  BCF    03.5
0BE1:  CALL   394
0BE2:  BSF    0A.3
0BE3:  MOVF   7A,W
0BE4:  MOVWF  50
0BE5:  MOVF   79,W
0BE6:  MOVWF  4F
0BE7:  MOVF   78,W
0BE8:  MOVWF  4E
0BE9:  MOVF   77,W
0BEA:  MOVWF  4D
.................... 	return(tcelsius); 
0BEB:  MOVF   4D,W
0BEC:  MOVWF  77
0BED:  MOVF   4E,W
0BEE:  MOVWF  78
0BEF:  MOVF   4F,W
0BF0:  MOVWF  79
0BF1:  MOVF   50,W
0BF2:  MOVWF  7A
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
.................... #fuses XT, NOPROTECT, NOPUT, NOWDT, NOBROWNOUT, NOLVP, NOCPD, NOWRT 
....................  
.................... // ADC 
.................... #define VDD                 5.00 
....................  
.................... // LCD STUFF 
.................... #define LCD_D0  PIN_C3 
.................... #define LCD_D1  PIN_C4 
.................... #define LCD_D2  PIN_C5 
.................... #define LCD_D3  PIN_C6 
.................... #define LCD_EN  PIN_B5 
.................... #define LCD_RS  PIN_B6 
.................... #define LINE_1  0x00 
.................... #define LINE_2  0x40 
.................... #define CLEAR_DISP  0x01 
....................  
.................... #define C_PERCENT			0x25 // % = 00100101 = 25 = 0x25 
.................... #define C_DEGREES			0xDF // ° = 11011111 = DF = 0xDF 
....................  
....................  
.................... #define MENU_SWITCH        PIN_C1 
.................... //#define SELECT_SWITCH      PIN_C2 
.................... #define INCLUDE_TEMP_SWITCH		PIN_C2 
....................  
.................... //#define RX_IN               PIN_A4 //pinne 6 RA4 
.................... #define LED_1               PIN_B3 //pinne 24 
.................... #define LED_2               PIN_B4 //pinne 25 
.................... #define FAN_1               PIN_C0 
....................  
.................... #define CMD_NUL     0 
....................  
.................... #define STATE_AUTO         0 
.................... #define STATE_START        1 
.................... #define STATE_STOP         2 
.................... #define STATE_SETTINGS     3 
.................... #define MAX_MENU_STATE     3 
....................  
.................... #define MINIMUM_INTERVAL   1  // minimum minutes to run when auto started (prevent hysteresis) 
.................... #define MAXIMUM_RH         47 // rh % when fan should start 
.................... #define MINIMUM_TEMP       22 // °C, never auto run if under this 
....................  
....................  
.................... #define hi(x)  (*(&x+1)) 
....................  
.................... #use delay ( clock=8000000 ) 
*
015D:  MOVLW  4D
015E:  MOVWF  04
015F:  BCF    03.7
0160:  MOVF   00,W
0161:  BTFSC  03.2
0162:  GOTO   170
0163:  MOVLW  02
0164:  MOVWF  78
0165:  CLRF   77
0166:  DECFSZ 77,F
0167:  GOTO   166
0168:  DECFSZ 78,F
0169:  GOTO   165
016A:  MOVLW  97
016B:  MOVWF  77
016C:  DECFSZ 77,F
016D:  GOTO   16C
016E:  DECFSZ 00,F
016F:  GOTO   163
0170:  RETLW  00
.................... #use standard_io ( A ) 
.................... #use standard_io ( B ) 
.................... #use standard_io ( C ) 
*
0EC1:  MOVLW  FF
0EC2:  BCF    03.5
0EC3:  MOVWF  28
....................  
....................  
.................... void LCD_Init ( void ); 
.................... void LCD_SetPosition ( unsigned int cX ); 
.................... void LCD_PutChar ( unsigned int cX ); 
.................... void LCD_PutCmd ( unsigned int cX ); 
.................... void LCD_PulseEnable ( void ); 
.................... void LCD_SetData ( unsigned int cX ); 
.................... void PrintMenu ( void );       // protos 
.................... void SetTime ( void ); 
.................... void CheckSwitches ( void ); 
.................... void printVersionInfo ( void ); 
.................... void DisplayData ( void ); 
.................... void StartFan ( void ); 
.................... void StopFan ( void ); 
.................... void AutoFan ( void ); 
.................... float getRH ( void ); 
.................... float getTemp ( void ); 
....................  
.................... //void DisplayData ( long iAdcValue, char cLoc ); 
....................  
.................... static char cDisplayDataFlag, cFan1Flag; 
0EC4:  CLRF   29
0EC5:  CLRF   2A
.................... static char cInterruptCount; 
0EC6:  CLRF   2B
.................... static char cMenuState, cSelectFlag; 
0EC7:  CLRF   2C
0EC8:  CLRF   2D
.................... static char cMenuSwitchOn, cMenuSwitchCount; 
0EC9:  CLRF   2E
0ECA:  CLRF   2F
.................... static char cSelectSwitchOn, cSelectSwitchCount; 
0ECB:  CLRF   30
0ECC:  CLRF   31
.................... static char cDisplayUpdate, cToggleFlag; 
0ECD:  CLRF   32
0ECE:  CLRF   33
.................... static char cFan1RunTime, cFan1AutoState, /*cFan1IsAutoMode,*/ cFan1CanStop; 
0ECF:  CLRF   34
0ED0:  CLRF   35
0ED1:  CLRF   36
....................  
....................  
.................... /*******************************************************************/ 
....................  
.................... /* 
.................... The way to calculate the timing as an 8-bit timer is: 
.................... Fosc/4 /prescaler/256 = freq. 
.................... The main oscillator is divided by four. This is a hardware design and cannot be changed. 
.................... The prescaler is an 8-bit register that can be programmed to one of nine settings to be a 1:1 to 1:256 divider. 
.................... The 8-bit value in the setup statement tells the compiler to configure the timer as an 8-bit timer. 
.................... So, if you have a 20MHZ oscillator running, with the prescaler set to 8 the formula is: 
.................... 20MHZ/4/8/256 = 20,000,000 /4 / 8 / 256 
.................... This will give you aproximately 2441 interrupts each second or an interrupt every 409uS. 
....................  
....................  
.................... Fra http://www.vermontficks.org/pic_calculations.xls 
.................... (256-C5)*1 / (A5 * 1000000 / B5 / 4) * 1000 
.................... C5: Preset Timer0 count before leaving interrupt (0-255) 
.................... A5: Clock frequency (MHz) 
.................... B5: Prescaler value 
.................... = Resulting interrupt rate (mS) 
....................  
.................... */ 
....................  
.................... //interrupt rate (mS): (256-6)*1 / (8 * 1000000 / 128 / 4) * 1000 = 16,000 
....................  
.................... #int_rtcc 
.................... void TimerInterrupt ( void ) // Gets here every 16.4mS at 8MHz, 8.2mS at 16MHz 
.................... { 
.................... 	if ( cInterruptCount++ >= 31 )      // (16) if one second yet ! TROR DET SKAL VÆRE 31 !!! 
*
0109:  MOVF   2B,W
010A:  INCF   2B,F
010B:  SUBLW  1E
010C:  BTFSC  03.0
010D:  GOTO   13D
.................... 	{ 
....................  
.................... 		cInterruptCount = 0; 
010E:  CLRF   2B
....................  
.................... 		if(cDisplayUpdate ++ == 5) // update disp every 5 sec 
010F:  MOVF   32,W
0110:  INCF   32,F
0111:  SUBLW  05
0112:  BTFSS  03.2
0113:  GOTO   117
.................... 		{ 
.................... 			cDisplayUpdate = 0; 
0114:  CLRF   32
.................... 			cDisplayDataFlag = ON; // signal time to update temp/humidity 
0115:  MOVLW  01
0116:  MOVWF  29
.................... 		} 
....................  
....................  
.................... 		// Fan must run N minutes after auto mode is stopped, to avoid hysteresis 
.................... 		if ( cMenuState == STATE_AUTO && cFan1Flag == ON && cFan1CanStop == NO ) 
0117:  MOVF   2C,F
0118:  BTFSS  03.2
0119:  GOTO   12A
011A:  DECFSZ 2A,W
011B:  GOTO   12A
011C:  MOVF   36,F
011D:  BTFSS  03.2
011E:  GOTO   12A
.................... 		{ 
.................... 			if( cFan1RunTime ++ == ( MINIMUM_INTERVAL * 60 ) ) // (MINIMUM_INTERVAL*60) 
011F:  MOVF   34,W
0120:  INCF   34,F
0121:  SUBLW  3C
0122:  BTFSS  03.2
0123:  GOTO   128
.................... 			{ 
.................... 				cFan1CanStop = YES; // signal ok to turn off fan if rh is under limits 
0124:  MOVLW  01
0125:  MOVWF  36
.................... 				cDisplayDataFlag = ON; // signal time to update temp/humidity 
0126:  MOVWF  29
.................... 			} 
.................... 			else 
0127:  GOTO   129
.................... 			{ 
.................... 				cFan1CanStop = NO; // keep on running 
0128:  CLRF   36
.................... 			} 
.................... 		} 
.................... 		else 
0129:  GOTO   12B
.................... 		{ 
.................... 			cFan1RunTime = 0; 
012A:  CLRF   34
.................... 		} 
....................  
.................... 		//if ( input ( FAN_1 ) == LOW ) 
.................... 		if ( cFan1Flag == ON ) //v1.6 
012B:  DECFSZ 2A,W
012C:  GOTO   13A
.................... 		{ 
.................... 			cToggleFlag ^= 1;              // toggle (blink) LED while fan is running 
012D:  MOVLW  01
012E:  XORWF  33,F
.................... 			if ( cToggleFlag == 1) 
012F:  DECFSZ 33,W
0130:  GOTO   136
.................... 			{ 
.................... 				output_low ( LED_2 ); 
0131:  BSF    03.5
0132:  BCF    06.4
0133:  BCF    03.5
0134:  BCF    06.4
.................... 			} 
.................... 			else 
0135:  GOTO   139
.................... 			{ 
.................... 				output_float ( LED_2 ); 
0136:  BSF    03.5
0137:  BSF    06.4
0138:  BCF    03.5
.................... 			} 
.................... 		} 
.................... 		else 
0139:  GOTO   13D
.................... 		{ 
.................... 			output_float ( LED_2 ); // slå av LED hvis ikke vifte går 
013A:  BSF    03.5
013B:  BSF    06.4
013C:  BCF    03.5
.................... 		} 
....................  
.................... 	} 
....................  
.................... 	if ( input ( MENU_SWITCH ) == LOW )	// if button still pressed 
013D:  BSF    28.1
013E:  MOVF   28,W
013F:  BSF    03.5
0140:  MOVWF  07
0141:  BCF    03.5
0142:  BTFSC  07.1
0143:  GOTO   14A
.................... 	{ 
.................... 		if ( cMenuSwitchCount < 128 )	// hold at 128 
0144:  MOVF   2F,W
0145:  SUBLW  7F
0146:  BTFSS  03.0
0147:  GOTO   149
.................... 		{ 
.................... 			cMenuSwitchCount++;			// otherwise increment 
0148:  INCF   2F,F
.................... 		} 
....................  
.................... 	} 
.................... 	else								// if button is unpressed 
0149:  GOTO   157
.................... 	{ 
.................... 		if ( cMenuSwitchCount > 2 )			// filter out glitches 
014A:  MOVF   2F,W
014B:  SUBLW  02
014C:  BTFSC  03.0
014D:  GOTO   156
.................... 		{ 
.................... 			// If button press is greater than 3.9 seconds (31msec * 128 / 1000), cold reset 
.................... 			if ( cMenuSwitchCount == 128 ) 
014E:  MOVF   2F,W
014F:  SUBLW  80
0150:  BTFSS  03.2
0151:  GOTO   154
.................... 			{ 
.................... 				reset_cpu(); 
0152:  CLRF   0A
0153:  GOTO   000
.................... 			} 
....................  
.................... 			cMenuSwitchOn = YES;        	// signal that switch was pressed 
0154:  MOVLW  01
0155:  MOVWF  2E
.................... 		} 
....................  
.................... 		cMenuSwitchCount = 0;             // switch up, restart 
0156:  CLRF   2F
.................... 	} 
....................  
.................... /* 
.................... 	if ( input ( MENU_SWITCH ) == LOW ) 
.................... 	{ 
.................... 		if ( cMenuSwitchCount++ == 1 )     // debounce for 30mS, (was 2) 
.................... 		{ 
.................... 			cMenuSwitchOn = YES;        // signal that switch was pressed 
.................... 			cMenuSwitchCount = 240; //cViewing ? 252 : 240;       // set up for auto repeat (faster if viewing) 
.................... 		} 
.................... 	} 
.................... 	else 
.................... 	{ 
.................... 		cMenuSwitchCount = 0;             // switch up, restart 
.................... 	} 
.................... */ 
....................  
.................... 	set_rtcc ( 6 );     // Prescaler value, restart at adjusted value for 1-second accuracy 
0157:  MOVLW  06
0158:  MOVWF  01
.................... } 
....................  
.................... //***************************************************************************** 
....................  
0159:  BCF    0B.2
015A:  BCF    0A.3
015B:  BCF    0A.4
015C:  GOTO   01D
.................... void printVersionInfo ( void ) 
.................... { 
.................... 	LCD_SetPosition ( LINE_1 + 0 ); 
*
01F6:  CLRF   3F
01F7:  CALL   1D6
.................... 	printf ( LCD_PutChar, "BADEVIFTE  v2.36" ); 
01F8:  CLRF   37
01F9:  MOVF   37,W
01FA:  CALL   033
01FB:  INCF   37,F
01FC:  MOVWF  77
01FD:  MOVWF  4C
01FE:  CALL   1E3
01FF:  MOVLW  10
0200:  SUBWF  37,W
0201:  BTFSS  03.2
0202:  GOTO   1F9
.................... 	LCD_SetPosition ( LINE_2+ 0 ); 
0203:  MOVLW  40
0204:  MOVWF  3F
0205:  CALL   1D6
.................... 	printf ( LCD_PutChar, "Kenny 16.10.2007" ); 
0206:  CLRF   37
0207:  MOVF   37,W
0208:  CALL   048
0209:  INCF   37,F
020A:  MOVWF  77
020B:  MOVWF  4C
020C:  CALL   1E3
020D:  MOVLW  10
020E:  SUBWF  37,W
020F:  BTFSS  03.2
0210:  GOTO   207
.................... } 
0211:  BSF    0A.3
0212:  BCF    0A.4
0213:  GOTO   703 (RETURN)
....................  
.................... void main ( void ) 
.................... { 
*
0EB8:  CLRF   04
0EB9:  BCF    03.7
0EBA:  MOVLW  1F
0EBB:  ANDWF  03,F
0EBC:  BSF    03.5
0EBD:  BSF    1F.0
0EBE:  BSF    1F.1
0EBF:  BSF    1F.2
0EC0:  BCF    1F.3
.................... 	//char recChar; 
.................... 	delay_ms ( 200 );           // wait enough time after VDD rise 
*
0ED2:  MOVLW  C8
0ED3:  MOVWF  4D
0ED4:  BCF    0A.3
0ED5:  CALL   15D
0ED6:  BSF    0A.3
.................... 	setup_counters ( RTCC_INTERNAL, RTCC_DIV_128 );       // 16mS roll @8MHz 
0ED7:  MOVLW  06
0ED8:  MOVWF  77
0ED9:  BTFSS  77.3
0EDA:  GOTO   6E4
0EDB:  MOVLW  07
0EDC:  CLRF   01
0EDD:  MOVLW  81
0EDE:  MOVWF  04
0EDF:  BCF    03.7
0EE0:  MOVF   00,W
0EE1:  ANDLW  C0
0EE2:  IORLW  0F
0EE3:  MOVWF  00
0EE4:  CLRWDT
0EE5:  MOVLW  81
0EE6:  MOVWF  04
0EE7:  MOVF   00,W
0EE8:  ANDLW  C0
0EE9:  IORWF  77,W
0EEA:  MOVWF  00
....................  
.................... 	output_low ( FAN_1 ); 
0EEB:  BCF    28.0
0EEC:  MOVF   28,W
0EED:  BSF    03.5
0EEE:  MOVWF  07
0EEF:  BCF    03.5
0EF0:  BCF    07.0
.................... 	output_low ( LED_1 ); 
0EF1:  BSF    03.5
0EF2:  BCF    06.3
0EF3:  BCF    03.5
0EF4:  BCF    06.3
.................... 	output_low ( LED_2 ); 
0EF5:  BSF    03.5
0EF6:  BCF    06.4
0EF7:  BCF    03.5
0EF8:  BCF    06.4
....................  
....................  
.................... 	LCD_Init(); 
0EF9:  BCF    0A.3
0EFA:  CALL   1B6
0EFB:  BSF    0A.3
.................... 	LCD_PutCmd ( CLEAR_DISP ); 
0EFC:  MOVLW  01
0EFD:  MOVWF  37
0EFE:  BCF    0A.3
0EFF:  CALL   1AB
0F00:  BSF    0A.3
....................  
.................... 	printVersionInfo(); 
0F01:  BCF    0A.3
0F02:  GOTO   1F6
0F03:  BSF    0A.3
.................... 	delay_ms ( 5000 ); 
0F04:  MOVLW  14
0F05:  MOVWF  37
0F06:  MOVLW  FA
0F07:  MOVWF  4D
0F08:  BCF    0A.3
0F09:  CALL   15D
0F0A:  BSF    0A.3
0F0B:  DECFSZ 37,F
0F0C:  GOTO   706
.................... 	LCD_PutCmd ( CLEAR_DISP ); 
0F0D:  MOVLW  01
0F0E:  MOVWF  37
0F0F:  BCF    0A.3
0F10:  CALL   1AB
0F11:  BSF    0A.3
.................... 	LCD_Init(); 
0F12:  BCF    0A.3
0F13:  CALL   1B6
0F14:  BSF    0A.3
....................  
.................... 	// SETUP 
.................... 	//port_c_pullups ( ON ); 
.................... 	setup_ccp1 ( CCP_OFF ); 
0F15:  BSF    28.2
0F16:  MOVF   28,W
0F17:  BSF    03.5
0F18:  MOVWF  07
0F19:  BCF    03.5
0F1A:  CLRF   17
.................... 	setup_ccp2 ( CCP_OFF ); 
0F1B:  BSF    28.1
0F1C:  MOVF   28,W
0F1D:  BSF    03.5
0F1E:  MOVWF  07
0F1F:  BCF    03.5
0F20:  CLRF   1D
....................  
....................  
.................... 	setup_adc_ports ( AN0_AN1_AN3 );	// set up the ADC 
0F21:  BSF    03.5
0F22:  BCF    1F.0
0F23:  BCF    1F.1
0F24:  BSF    1F.2
0F25:  BCF    1F.3
....................  
.................... 	//setup_adc_ports ( RA0_ANALOG );     // set up the ADC 
.................... 	setup_adc ( ADC_CLOCK_INTERNAL );   // clock source 
0F26:  BCF    03.5
0F27:  BSF    1F.6
0F28:  BSF    1F.7
0F29:  BSF    03.5
0F2A:  BSF    1F.7
0F2B:  BCF    03.5
0F2C:  BSF    1F.0
.................... 	//set_adc_channel ( 0 );              // select channel 
....................  
....................  
....................  
....................  
.................... 	enable_interrupts ( INT_RTCC );     // turn on timer interrupt 
0F2D:  BSF    0B.5
.................... 	enable_interrupts ( GLOBAL );       // enable interrupts 
0F2E:  MOVLW  C0
0F2F:  IORWF  0B,F
....................  
.................... 	// INITIALIZE VARIABLES 
.................... 	cFan1Flag = OFF; 
0F30:  CLRF   2A
.................... 	cSelectFlag = OFF; 
0F31:  CLRF   2D
.................... 	//cFan1IsAutoMode = NO; 
.................... 	cToggleFlag = 0; 
0F32:  CLRF   33
.................... 	cMenuSwitchOn = OFF; 
0F33:  CLRF   2E
.................... 	cSelectSwitchOn = OFF; 
0F34:  CLRF   30
.................... 	cMenuSwitchCount = 0; 
0F35:  CLRF   2F
.................... 	cSelectSwitchCount = 0; 
0F36:  CLRF   31
....................  
.................... 	output_high ( FAN_1 ); 
0F37:  BCF    28.0
0F38:  MOVF   28,W
0F39:  BSF    03.5
0F3A:  MOVWF  07
0F3B:  BCF    03.5
0F3C:  BSF    07.0
.................... 	output_float ( LED_2 ); 
0F3D:  BSF    03.5
0F3E:  BSF    06.4
....................  
....................  
.................... 	// start moduser 
.................... 	cMenuState = STATE_AUTO;  // set first menu 
0F3F:  BCF    03.5
0F40:  CLRF   2C
.................... 	//cFan1IsAutoMode = YES; 
....................  
.................... 	//AutoFan(); 
....................  
....................  
.................... 	cDisplayDataFlag = ON; // update display 
0F41:  MOVLW  01
0F42:  MOVWF  29
....................  
....................  
....................  
.................... 	while ( TRUE )              // do forever 
.................... 	{ 
.................... 		PrintMenu();            // display screens and enviroment info 
0F43:  GOTO   404
.................... 		CheckSwitches();        // check and do any switch activity 
0F44:  GOTO   584
.................... 		AutoFan();				// routine itself checks if automode enabled 
0F45:  BCF    0A.3
0F46:  GOTO   773
0F47:  BSF    0A.3
.................... 	} 
0F48:  GOTO   743
.................... } 
....................  
.................... //**************************************************************************** 
....................  
.................... void PrintMenu ( void ) 
.................... { 
0F49:  SLEEP
....................  
.................... 	// PRINT LOWER LINE OF MENU 
.................... 	LCD_SetPosition ( LINE_2 + 0 ); 
*
0C04:  MOVLW  40
0C05:  MOVWF  3F
0C06:  BCF    0A.3
0C07:  CALL   1D6
0C08:  BSF    0A.3
.................... 	switch ( cMenuState ) 
.................... 	{ 
0C09:  MOVF   2C,W
0C0A:  ADDLW  FC
0C0B:  BTFSC  03.0
0C0C:  GOTO   495
0C0D:  ADDLW  04
0C0E:  GOTO   57C
.................... 		case STATE_START: 
.................... 		{ 
.................... 			printf ( LCD_PutChar, "ON        Change" ); 
0C0F:  MOVLW  4F
0C10:  MOVWF  4C
0C11:  BCF    0A.3
0C12:  CALL   1E3
0C13:  BSF    0A.3
0C14:  MOVLW  4E
0C15:  MOVWF  4C
0C16:  BCF    0A.3
0C17:  CALL   1E3
0C18:  BSF    0A.3
0C19:  MOVLW  08
0C1A:  MOVWF  37
0C1B:  MOVLW  20
0C1C:  MOVWF  4C
0C1D:  BCF    0A.3
0C1E:  CALL   1E3
0C1F:  BSF    0A.3
0C20:  DECFSZ 37,F
0C21:  GOTO   41B
0C22:  MOVLW  02
0C23:  MOVWF  38
0C24:  MOVF   38,W
0C25:  BCF    0A.3
0C26:  CALL   05D
0C27:  BSF    0A.3
0C28:  INCF   38,F
0C29:  MOVWF  77
0C2A:  MOVWF  4C
0C2B:  BCF    0A.3
0C2C:  CALL   1E3
0C2D:  BSF    0A.3
0C2E:  MOVLW  08
0C2F:  SUBWF  38,W
0C30:  BTFSS  03.2
0C31:  GOTO   424
.................... 		} 
.................... 		break; 
0C32:  GOTO   495
....................  
.................... 		case STATE_STOP: 
.................... 		{ 
.................... 			printf ( LCD_PutChar, "OFF       Change" ); 
0C33:  MOVLW  4F
0C34:  MOVWF  4C
0C35:  BCF    0A.3
0C36:  CALL   1E3
0C37:  BSF    0A.3
0C38:  MOVLW  46
0C39:  MOVWF  4C
0C3A:  BCF    0A.3
0C3B:  CALL   1E3
0C3C:  BSF    0A.3
0C3D:  MOVLW  46
0C3E:  MOVWF  4C
0C3F:  BCF    0A.3
0C40:  CALL   1E3
0C41:  BSF    0A.3
0C42:  MOVLW  07
0C43:  MOVWF  37
0C44:  MOVLW  20
0C45:  MOVWF  4C
0C46:  BCF    0A.3
0C47:  CALL   1E3
0C48:  BSF    0A.3
0C49:  DECFSZ 37,F
0C4A:  GOTO   444
0C4B:  MOVLW  03
0C4C:  MOVWF  38
0C4D:  MOVF   38,W
0C4E:  BCF    0A.3
0C4F:  CALL   06A
0C50:  BSF    0A.3
0C51:  INCF   38,F
0C52:  MOVWF  77
0C53:  MOVWF  4C
0C54:  BCF    0A.3
0C55:  CALL   1E3
0C56:  BSF    0A.3
0C57:  MOVLW  09
0C58:  SUBWF  38,W
0C59:  BTFSS  03.2
0C5A:  GOTO   44D
.................... 		} 
.................... 		break; 
0C5B:  GOTO   495
....................  
.................... 		case STATE_AUTO: 
.................... 		{ 
.................... 			printf ( LCD_PutChar, "AUTO      Change" ); 
0C5C:  CLRF   37
0C5D:  MOVF   37,W
0C5E:  BCF    0A.3
0C5F:  CALL   078
0C60:  BSF    0A.3
0C61:  INCF   37,F
0C62:  MOVWF  77
0C63:  MOVWF  4C
0C64:  BCF    0A.3
0C65:  CALL   1E3
0C66:  BSF    0A.3
0C67:  MOVLW  04
0C68:  SUBWF  37,W
0C69:  BTFSS  03.2
0C6A:  GOTO   45D
0C6B:  MOVLW  06
0C6C:  MOVWF  38
0C6D:  MOVLW  20
0C6E:  MOVWF  4C
0C6F:  BCF    0A.3
0C70:  CALL   1E3
0C71:  BSF    0A.3
0C72:  DECFSZ 38,F
0C73:  GOTO   46D
0C74:  MOVLW  04
0C75:  MOVWF  39
0C76:  MOVF   39,W
0C77:  BCF    0A.3
0C78:  CALL   078
0C79:  BSF    0A.3
0C7A:  INCF   39,F
0C7B:  MOVWF  77
0C7C:  MOVWF  4C
0C7D:  BCF    0A.3
0C7E:  CALL   1E3
0C7F:  BSF    0A.3
0C80:  MOVLW  0A
0C81:  SUBWF  39,W
0C82:  BTFSS  03.2
0C83:  GOTO   476
.................... 		} 
.................... 		break; 
0C84:  GOTO   495
....................  
.................... 		case STATE_SETTINGS: 
.................... 		{ 
.................... 			printf ( LCD_PutChar, "Settings  Change" ); 
0C85:  CLRF   37
0C86:  MOVF   37,W
0C87:  BCF    0A.3
0C88:  CALL   087
0C89:  BSF    0A.3
0C8A:  INCF   37,F
0C8B:  MOVWF  77
0C8C:  MOVWF  4C
0C8D:  BCF    0A.3
0C8E:  CALL   1E3
0C8F:  BSF    0A.3
0C90:  MOVLW  10
0C91:  SUBWF  37,W
0C92:  BTFSS  03.2
0C93:  GOTO   486
.................... 		} 
.................... 		break; 
0C94:  GOTO   495
....................  
.................... 	} 
....................  
.................... 	// DISPLAY KLIMA DATA 
.................... 	if ( cDisplayDataFlag == ON )                    // if interrupt signalled an ADC reading 
0C95:  DECFSZ 29,W
0C96:  GOTO   579
.................... 	{ 
.................... 		cDisplayDataFlag = OFF; 
0C97:  CLRF   29
.................... 		DisplayData(); 
.................... 	} 
.................... } 
*
0D79:  BSF    0A.3
0D7A:  BCF    0A.4
0D7B:  GOTO   744 (RETURN)
....................  
.................... void CheckSwitches ( void ) 
.................... { 
....................  
.................... 	// INCREMENT/DECREMENT MENU 
.................... 	if ( cMenuSwitchOn == YES )      // if interrupt caught the switch press 
*
0D84:  DECFSZ 2E,W
0D85:  GOTO   58F
.................... 	{ 
.................... 		if ( cMenuState++ >= MAX_MENU_STATE )      // if at maximum 
0D86:  MOVF   2C,W
0D87:  INCF   2C,F
0D88:  SUBLW  02
0D89:  BTFSC  03.0
0D8A:  GOTO   58C
.................... 		{ 
.................... 			cMenuState = 0;            // roll 
0D8B:  CLRF   2C
.................... 		} 
.................... 		cMenuSwitchOn = NO;     // turn back off 
0D8C:  CLRF   2E
....................  
.................... 		cSelectFlag = ON; // ny i v1.5 
0D8D:  MOVLW  01
0D8E:  MOVWF  2D
.................... 	} 
.................... /* 
....................    if ( cSelectSwitchOn == YES )      // if interrupt caught the switch press 
....................    { 
....................       cSelectFlag = ON; 
....................       cSelectSwitchOn = NO;     // turn back off 
....................    } 
.................... */ 
....................    // CHECK IF SWITCH IS PRESSED, PERFORM ACTION AND PRINT MENU 
.................... 	switch ( cMenuState ) 
.................... 	{ 
0D8F:  MOVF   2C,W
0D90:  ADDLW  FC
0D91:  BTFSC  03.0
0D92:  GOTO   6AD
0D93:  ADDLW  04
0D94:  GOTO   6B0
.................... 		case ( STATE_START ): // START FAN 
.................... 		{ 
.................... 			if ( cSelectFlag == ON )    // if switch is pressed 
0D95:  DECFSZ 2D,W
0D96:  GOTO   5AF
.................... 			{ 
.................... 				cSelectFlag = OFF;         // turn flag off 
0D97:  CLRF   2D
....................  
.................... 				//cFan1AutoState = OFF; //v1.6 
.................... 				//cFan1IsAutoMode = NO; 
.................... 				StartFan(); 
....................  
.................... 				//delay_ms ( 1000 ); 
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
*
0DA4:  MOVLW  01
0DA5:  MOVWF  37
0DA6:  BCF    0A.3
0DA7:  CALL   1AB
0DA8:  BSF    0A.3
.................... 				cDisplayDataFlag = ON; 
0DA9:  MOVLW  01
0DAA:  MOVWF  29
.................... 				cMenuSwitchOn = NO; 
0DAB:  CLRF   2E
.................... 				cSelectSwitchOn = NO; 
0DAC:  CLRF   30
.................... 				cInterruptCount = 0;    // synchronize interrupt timing from here 
0DAD:  CLRF   2B
.................... 				//cMenuState = STATE_STOP;    // menu displays "STOP" 
.................... 				break; 
0DAE:  GOTO   6AD
.................... 			} 
.................... 		} 
....................  
.................... 		case ( STATE_STOP ): // STOP FAN 
.................... 		{ 
.................... 			if ( cSelectFlag == ON )    // if switch is pressed 
0DAF:  DECFSZ 2D,W
0DB0:  GOTO   5C6
.................... 			{ 
.................... 				cSelectFlag = OFF;         // turn flag off 
0DB1:  CLRF   2D
....................  
.................... 				//cFan1AutoState = OFF; //v1.6 
.................... 				//cFan1IsAutoMode = NO; 
.................... 				StopFan(); 
....................  
.................... 				//delay_ms ( 1000 ); 
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
*
0DBB:  MOVLW  01
0DBC:  BCF    03.5
0DBD:  MOVWF  37
0DBE:  BCF    0A.3
0DBF:  CALL   1AB
0DC0:  BSF    0A.3
.................... 				cDisplayDataFlag = ON; 
0DC1:  MOVLW  01
0DC2:  MOVWF  29
.................... 				cMenuSwitchOn = NO; 
0DC3:  CLRF   2E
.................... 				cSelectSwitchOn = NO; 
0DC4:  CLRF   30
.................... 				//cMenuState = STATE_START;    // menu displays "START" 
....................  
.................... 				break; 
0DC5:  GOTO   6AD
.................... 			} 
.................... 		} 
....................  
.................... 		case ( STATE_AUTO ): 
.................... 		{ 
.................... 			if ( cSelectFlag == ON )    // if switch is pressed 
0DC6:  DECFSZ 2D,W
0DC7:  GOTO   5D4
.................... 			{ 
.................... 				cSelectFlag = OFF;         // turn flag off 
0DC8:  CLRF   2D
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
0DC9:  MOVLW  01
0DCA:  MOVWF  37
0DCB:  BCF    0A.3
0DCC:  CALL   1AB
0DCD:  BSF    0A.3
.................... 				cDisplayDataFlag = ON; 
0DCE:  MOVLW  01
0DCF:  MOVWF  29
.................... 				cMenuSwitchOn = NO; 
0DD0:  CLRF   2E
.................... 				cSelectSwitchOn = NO; 
0DD1:  CLRF   30
.................... 				cInterruptCount = 0;    // synchronize interrupt timing from here 
0DD2:  CLRF   2B
....................  
.................... 				break; 
0DD3:  GOTO   6AD
.................... 			} 
.................... 		} 
....................  
.................... 		case ( STATE_SETTINGS ): 
.................... 		{ 
.................... 			if ( cSelectFlag == ON )    // if switch is pressed 
0DD4:  DECFSZ 2D,W
0DD5:  GOTO   6AD
.................... 			{ 
.................... 				cSelectFlag = OFF;         // turn flag off 
0DD6:  CLRF   2D
....................  
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
0DD7:  MOVLW  01
0DD8:  MOVWF  37
0DD9:  BCF    0A.3
0DDA:  CALL   1AB
0DDB:  BSF    0A.3
.................... 				LCD_SetPosition ( LINE_1 ); 
0DDC:  CLRF   3F
0DDD:  BCF    0A.3
0DDE:  CALL   1D6
0DDF:  BSF    0A.3
.................... 				printf ( LCD_PutChar, " Humidity limit " ); 
0DE0:  CLRF   37
0DE1:  MOVF   37,W
0DE2:  BCF    0A.3
0DE3:  CALL   09C
0DE4:  BSF    0A.3
0DE5:  INCF   37,F
0DE6:  MOVWF  77
0DE7:  MOVWF  4C
0DE8:  BCF    0A.3
0DE9:  CALL   1E3
0DEA:  BSF    0A.3
0DEB:  MOVLW  10
0DEC:  SUBWF  37,W
0DED:  BTFSS  03.2
0DEE:  GOTO   5E1
.................... 				LCD_SetPosition ( LINE_2 ); 
0DEF:  MOVLW  40
0DF0:  MOVWF  3F
0DF1:  BCF    0A.3
0DF2:  CALL   1D6
0DF3:  BSF    0A.3
.................... 				printf ( LCD_PutChar, "      %u%c       ", MAXIMUM_RH, C_PERCENT ); 
0DF4:  MOVLW  06
0DF5:  MOVWF  37
0DF6:  MOVLW  20
0DF7:  MOVWF  4C
0DF8:  BCF    0A.3
0DF9:  CALL   1E3
0DFA:  BSF    0A.3
0DFB:  DECFSZ 37,F
0DFC:  GOTO   5F6
0DFD:  MOVLW  2F
0DFE:  MOVWF  38
0DFF:  MOVLW  1B
0E00:  MOVWF  39
0E01:  BCF    0A.3
0E02:  CALL   73E
0E03:  BSF    0A.3
0E04:  MOVLW  25
0E05:  MOVWF  4C
0E06:  BCF    0A.3
0E07:  CALL   1E3
0E08:  BSF    0A.3
0E09:  MOVLW  07
0E0A:  MOVWF  38
0E0B:  MOVLW  20
0E0C:  MOVWF  4C
0E0D:  BCF    0A.3
0E0E:  CALL   1E3
0E0F:  BSF    0A.3
0E10:  DECFSZ 38,F
0E11:  GOTO   60B
.................... 				delay_ms ( 3000 ); 
0E12:  MOVLW  0C
0E13:  MOVWF  37
0E14:  MOVLW  FA
0E15:  MOVWF  4D
0E16:  BCF    0A.3
0E17:  CALL   15D
0E18:  BSF    0A.3
0E19:  DECFSZ 37,F
0E1A:  GOTO   614
....................  
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
0E1B:  MOVLW  01
0E1C:  MOVWF  37
0E1D:  BCF    0A.3
0E1E:  CALL   1AB
0E1F:  BSF    0A.3
.................... 				LCD_SetPosition ( LINE_1 ); 
0E20:  CLRF   3F
0E21:  BCF    0A.3
0E22:  CALL   1D6
0E23:  BSF    0A.3
.................... 				printf ( LCD_PutChar, "Minimum run time" ); 
0E24:  CLRF   37
0E25:  MOVF   37,W
0E26:  BCF    0A.3
0E27:  CALL   0B1
0E28:  BSF    0A.3
0E29:  INCF   37,F
0E2A:  MOVWF  77
0E2B:  MOVWF  4C
0E2C:  BCF    0A.3
0E2D:  CALL   1E3
0E2E:  BSF    0A.3
0E2F:  MOVLW  10
0E30:  SUBWF  37,W
0E31:  BTFSS  03.2
0E32:  GOTO   625
.................... 				LCD_SetPosition ( LINE_2 ); 
0E33:  MOVLW  40
0E34:  MOVWF  3F
0E35:  BCF    0A.3
0E36:  CALL   1D6
0E37:  BSF    0A.3
.................... 				printf ( LCD_PutChar, "%umin if Auto ON", MINIMUM_INTERVAL ); 
0E38:  MOVLW  01
0E39:  MOVWF  38
0E3A:  MOVLW  1B
0E3B:  MOVWF  39
0E3C:  BCF    0A.3
0E3D:  CALL   73E
0E3E:  BSF    0A.3
0E3F:  MOVLW  02
0E40:  MOVWF  37
0E41:  MOVF   37,W
0E42:  BCF    0A.3
0E43:  CALL   0C6
0E44:  BSF    0A.3
0E45:  INCF   37,F
0E46:  MOVWF  77
0E47:  MOVWF  4C
0E48:  BCF    0A.3
0E49:  CALL   1E3
0E4A:  BSF    0A.3
0E4B:  MOVLW  10
0E4C:  SUBWF  37,W
0E4D:  BTFSS  03.2
0E4E:  GOTO   641
.................... 				delay_ms ( 3000 ); 
0E4F:  MOVLW  0C
0E50:  MOVWF  37
0E51:  MOVLW  FA
0E52:  MOVWF  4D
0E53:  BCF    0A.3
0E54:  CALL   15D
0E55:  BSF    0A.3
0E56:  DECFSZ 37,F
0E57:  GOTO   651
....................  
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
0E58:  MOVLW  01
0E59:  MOVWF  37
0E5A:  BCF    0A.3
0E5B:  CALL   1AB
0E5C:  BSF    0A.3
.................... 				LCD_SetPosition ( LINE_1 ); 
0E5D:  CLRF   3F
0E5E:  BCF    0A.3
0E5F:  CALL   1D6
0E60:  BSF    0A.3
.................... 				printf ( LCD_PutChar, "Not run if under" ); 
0E61:  CLRF   37
0E62:  MOVF   37,W
0E63:  BCF    0A.3
0E64:  CALL   0DB
0E65:  BSF    0A.3
0E66:  INCF   37,F
0E67:  MOVWF  77
0E68:  MOVWF  4C
0E69:  BCF    0A.3
0E6A:  CALL   1E3
0E6B:  BSF    0A.3
0E6C:  MOVLW  10
0E6D:  SUBWF  37,W
0E6E:  BTFSS  03.2
0E6F:  GOTO   662
.................... 				LCD_SetPosition ( LINE_2 ); 
0E70:  MOVLW  40
0E71:  MOVWF  3F
0E72:  BCF    0A.3
0E73:  CALL   1D6
0E74:  BSF    0A.3
.................... 				printf ( LCD_PutChar, "       %u%cC     ", MINIMUM_TEMP, C_DEGREES ); 
0E75:  MOVLW  07
0E76:  MOVWF  37
0E77:  MOVLW  20
0E78:  MOVWF  4C
0E79:  BCF    0A.3
0E7A:  CALL   1E3
0E7B:  BSF    0A.3
0E7C:  DECFSZ 37,F
0E7D:  GOTO   677
0E7E:  MOVLW  16
0E7F:  MOVWF  38
0E80:  MOVLW  1B
0E81:  MOVWF  39
0E82:  BCF    0A.3
0E83:  CALL   73E
0E84:  BSF    0A.3
0E85:  MOVLW  DF
0E86:  MOVWF  4C
0E87:  BCF    0A.3
0E88:  CALL   1E3
0E89:  BSF    0A.3
0E8A:  MOVLW  43
0E8B:  MOVWF  4C
0E8C:  BCF    0A.3
0E8D:  CALL   1E3
0E8E:  BSF    0A.3
0E8F:  MOVLW  05
0E90:  MOVWF  38
0E91:  MOVLW  20
0E92:  MOVWF  4C
0E93:  BCF    0A.3
0E94:  CALL   1E3
0E95:  BSF    0A.3
0E96:  DECFSZ 38,F
0E97:  GOTO   691
.................... 				delay_ms ( 3000 ); 
0E98:  MOVLW  0C
0E99:  MOVWF  37
0E9A:  MOVLW  FA
0E9B:  MOVWF  4D
0E9C:  BCF    0A.3
0E9D:  CALL   15D
0E9E:  BSF    0A.3
0E9F:  DECFSZ 37,F
0EA0:  GOTO   69A
....................  
....................  
.................... 				LCD_PutCmd ( CLEAR_DISP ); 
0EA1:  MOVLW  01
0EA2:  MOVWF  37
0EA3:  BCF    0A.3
0EA4:  CALL   1AB
0EA5:  BSF    0A.3
.................... 				cDisplayDataFlag = ON; 
0EA6:  MOVLW  01
0EA7:  MOVWF  29
.................... 				cMenuSwitchOn = NO; 
0EA8:  CLRF   2E
.................... 				cSelectSwitchOn = NO; 
0EA9:  CLRF   30
.................... 				cInterruptCount = 0;    // synchronize interrupt timing from here 
0EAA:  CLRF   2B
.................... 				cMenuState = STATE_AUTO;    // menu displays "AUTO" 
0EAB:  CLRF   2C
....................  
.................... 				break; 
0EAC:  GOTO   6AD
.................... 			} 
.................... 		} 
.................... 	} 
.................... } 
0EAD:  BSF    0A.3
0EAE:  BCF    0A.4
0EAF:  GOTO   745 (RETURN)
....................  
.................... void DisplayData ( void ) 
.................... { 
.................... 	float f_rh; 
.................... 	float f_temp; 
....................  
.................... 	f_rh = getRH(); 
*
0C98:  BCF    0A.3
0C99:  CALL   4DA
0C9A:  BSF    0A.3
0C9B:  MOVF   7A,W
0C9C:  MOVWF  3A
0C9D:  MOVF   79,W
0C9E:  MOVWF  39
0C9F:  MOVF   78,W
0CA0:  MOVWF  38
0CA1:  MOVF   77,W
0CA2:  MOVWF  37
....................  
.................... 	// Relative Humidity 
.................... 	LCD_SetPosition ( LINE_1 ); 
0CA3:  CLRF   3F
0CA4:  BCF    0A.3
0CA5:  CALL   1D6
0CA6:  BSF    0A.3
....................  
.................... 	if ( f_rh == 0.0 ) // 1023 
0CA7:  MOVF   3A,W
0CA8:  MOVWF  71
0CA9:  MOVF   39,W
0CAA:  MOVWF  70
0CAB:  MOVF   38,W
0CAC:  MOVWF  6F
0CAD:  MOVF   37,W
0CAE:  MOVWF  6E
0CAF:  CLRF   75
0CB0:  CLRF   74
0CB1:  CLRF   73
0CB2:  CLRF   72
0CB3:  BCF    0A.3
0CB4:  CALL   598
0CB5:  BSF    0A.3
0CB6:  BTFSS  03.2
0CB7:  GOTO   4C8
.................... 	{ 
.................... 		printf ( LCD_PutChar, "O/R" );    // out of range 
0CB8:  MOVLW  4F
0CB9:  MOVWF  4C
0CBA:  BCF    0A.3
0CBB:  CALL   1E3
0CBC:  BSF    0A.3
0CBD:  MOVLW  2F
0CBE:  MOVWF  4C
0CBF:  BCF    0A.3
0CC0:  CALL   1E3
0CC1:  BSF    0A.3
0CC2:  MOVLW  52
0CC3:  MOVWF  4C
0CC4:  BCF    0A.3
0CC5:  CALL   1E3
0CC6:  BSF    0A.3
.................... 	} 
.................... 	else 
0CC7:  GOTO   4DC
.................... 	{ 
.................... 		printf ( LCD_PutChar, "%2.1f%c", f_rh, C_PERCENT ); 
0CC8:  MOVLW  01
0CC9:  MOVWF  04
0CCA:  MOVF   3A,W
0CCB:  MOVWF  42
0CCC:  MOVF   39,W
0CCD:  MOVWF  41
0CCE:  MOVF   38,W
0CCF:  MOVWF  40
0CD0:  MOVF   37,W
0CD1:  MOVWF  3F
0CD2:  MOVLW  01
0CD3:  MOVWF  43
0CD4:  BCF    0A.3
0CD5:  CALL   63A
0CD6:  BSF    0A.3
0CD7:  MOVLW  25
0CD8:  MOVWF  4C
0CD9:  BCF    0A.3
0CDA:  CALL   1E3
0CDB:  BSF    0A.3
.................... 	} 
....................  
.................... 	// Temperature 
.................... 	LCD_SetPosition ( LINE_1 + 13 ); 
0CDC:  MOVLW  0D
0CDD:  MOVWF  3F
0CDE:  BCF    0A.3
0CDF:  CALL   1D6
0CE0:  BSF    0A.3
....................  
.................... 	//f_temp = 0; // not implemented yet 
.................... 	f_temp = getTemp(); 
0CE1:  CALL   000
0CE2:  MOVF   7A,W
0CE3:  MOVWF  3E
0CE4:  MOVF   79,W
0CE5:  MOVWF  3D
0CE6:  MOVF   78,W
0CE7:  MOVWF  3C
0CE8:  MOVF   77,W
0CE9:  MOVWF  3B
....................  
.................... 	if ( f_temp == 100 ) 
0CEA:  MOVF   3E,W
0CEB:  MOVWF  71
0CEC:  MOVF   3D,W
0CED:  MOVWF  70
0CEE:  MOVF   3C,W
0CEF:  MOVWF  6F
0CF0:  MOVF   3B,W
0CF1:  MOVWF  6E
0CF2:  CLRF   75
0CF3:  CLRF   74
0CF4:  MOVLW  48
0CF5:  MOVWF  73
0CF6:  MOVLW  85
0CF7:  MOVWF  72
0CF8:  BCF    0A.3
0CF9:  CALL   598
0CFA:  BSF    0A.3
0CFB:  BTFSS  03.2
0CFC:  GOTO   50D
.................... 	{ 
.................... 		printf ( LCD_PutChar, "O/R" );    // out of range 
0CFD:  MOVLW  4F
0CFE:  MOVWF  4C
0CFF:  BCF    0A.3
0D00:  CALL   1E3
0D01:  BSF    0A.3
0D02:  MOVLW  2F
0D03:  MOVWF  4C
0D04:  BCF    0A.3
0D05:  CALL   1E3
0D06:  BSF    0A.3
0D07:  MOVLW  52
0D08:  MOVWF  4C
0D09:  BCF    0A.3
0D0A:  CALL   1E3
0D0B:  BSF    0A.3
.................... 	} 
.................... 	else 
0D0C:  GOTO   520
.................... 	{ 
.................... 		printf ( LCD_PutChar, "%2.0f%c", f_temp, C_DEGREES ); 
0D0D:  MOVLW  01
0D0E:  MOVWF  04
0D0F:  MOVF   3E,W
0D10:  MOVWF  42
0D11:  MOVF   3D,W
0D12:  MOVWF  41
0D13:  MOVF   3C,W
0D14:  MOVWF  40
0D15:  MOVF   3B,W
0D16:  MOVWF  3F
0D17:  CLRF   43
0D18:  BCF    0A.3
0D19:  CALL   63A
0D1A:  BSF    0A.3
0D1B:  MOVLW  DF
0D1C:  MOVWF  4C
0D1D:  BCF    0A.3
0D1E:  CALL   1E3
0D1F:  BSF    0A.3
.................... 	} 
.................... /* 
.................... 	disable_interrupts ( INT_RTCC ); 
.................... 	disable_interrupts ( GLOBAL ); 
....................  
.................... 	delay_ms(1000); 
.................... 	LCD_SetPosition ( LINE_1 + 5 ); 
.................... 	printf ( LCD_PutChar, "B%2.0f%c", f_temp, C_DEGREES ); // 25 
....................  
.................... 	delay_ms(1000); 
.................... 	LCD_SetPosition ( LINE_1 + 5 ); 
.................... 	printf ( LCD_PutChar, "C%2.1f%c", f_temp, C_DEGREES ); // 25.3 
....................  
.................... 	delay_ms(1000); 
.................... 	LCD_SetPosition ( LINE_1 + 5 ); 
.................... 	printf ( LCD_PutChar, "D%.2f%c", f_temp, C_DEGREES ); // 25.36 
....................  
.................... 	delay_ms(1000); 
.................... 	LCD_SetPosition ( LINE_1 + 5 ); 
.................... 	printf ( LCD_PutChar, "E%u%c", f_temp, C_DEGREES ); // 131 
....................  
.................... 	delay_ms(1000); 
....................  
.................... 	enable_interrupts ( INT_RTCC );     // turn on timer interrupt 
.................... 	enable_interrupts ( GLOBAL );       // enable interrupts 
....................  
.................... 	//printf ( LCD_PutChar, "%2f%c", f_temp, C_DEGREES ); 
.................... */ 
....................  
....................  
.................... 	// FAN operational status 
.................... 	LCD_SetPosition ( LINE_1 + 6); // '45.0% AU OFF 25°' 
0D20:  MOVLW  06
0D21:  MOVWF  3F
0D22:  BCF    0A.3
0D23:  CALL   1D6
0D24:  BSF    0A.3
.................... 	if( cMenuState == STATE_AUTO ) 
0D25:  MOVF   2C,F
0D26:  BTFSS  03.2
0D27:  GOTO   54B
.................... 	{ 
.................... 		if( cFan1AutoState == OFF ) 
0D28:  MOVF   35,F
0D29:  BTFSS  03.2
0D2A:  GOTO   53B
.................... 		{ 
.................... 			printf ( LCD_PutChar, "AU OFF" ); 
0D2B:  CLRF   3F
0D2C:  MOVF   3F,W
0D2D:  BCF    0A.3
0D2E:  CALL   0F0
0D2F:  BSF    0A.3
0D30:  INCF   3F,F
0D31:  MOVWF  77
0D32:  MOVWF  4C
0D33:  BCF    0A.3
0D34:  CALL   1E3
0D35:  BSF    0A.3
0D36:  MOVLW  06
0D37:  SUBWF  3F,W
0D38:  BTFSS  03.2
0D39:  GOTO   52C
.................... 		} 
.................... 		else 
0D3A:  GOTO   54A
.................... 		{ 
.................... 			printf ( LCD_PutChar, "AU ON " ); 
0D3B:  CLRF   3F
0D3C:  MOVF   3F,W
0D3D:  BCF    0A.3
0D3E:  CALL   0FB
0D3F:  BSF    0A.3
0D40:  INCF   3F,F
0D41:  MOVWF  77
0D42:  MOVWF  4C
0D43:  BCF    0A.3
0D44:  CALL   1E3
0D45:  BSF    0A.3
0D46:  MOVLW  06
0D47:  SUBWF  3F,W
0D48:  BTFSS  03.2
0D49:  GOTO   53C
.................... 		} 
.................... 	} 
.................... 	else 
0D4A:  GOTO   579
.................... 	{ 
.................... 		if( cFan1Flag == ON ) 
0D4B:  DECFSZ 2A,W
0D4C:  GOTO   561
.................... 		{ 
.................... 			printf ( LCD_PutChar, "ON    " ); 
0D4D:  MOVLW  4F
0D4E:  MOVWF  4C
0D4F:  BCF    0A.3
0D50:  CALL   1E3
0D51:  BSF    0A.3
0D52:  MOVLW  4E
0D53:  MOVWF  4C
0D54:  BCF    0A.3
0D55:  CALL   1E3
0D56:  BSF    0A.3
0D57:  MOVLW  04
0D58:  MOVWF  3F
0D59:  MOVLW  20
0D5A:  MOVWF  4C
0D5B:  BCF    0A.3
0D5C:  CALL   1E3
0D5D:  BSF    0A.3
0D5E:  DECFSZ 3F,F
0D5F:  GOTO   559
.................... 		} 
.................... 		else 
0D60:  GOTO   579
.................... 		{ 
.................... 			printf ( LCD_PutChar, "OFF   " ); 
0D61:  MOVLW  4F
0D62:  MOVWF  4C
0D63:  BCF    0A.3
0D64:  CALL   1E3
0D65:  BSF    0A.3
0D66:  MOVLW  46
0D67:  MOVWF  4C
0D68:  BCF    0A.3
0D69:  CALL   1E3
0D6A:  BSF    0A.3
0D6B:  MOVLW  46
0D6C:  MOVWF  4C
0D6D:  BCF    0A.3
0D6E:  CALL   1E3
0D6F:  BSF    0A.3
0D70:  MOVLW  03
0D71:  MOVWF  3F
0D72:  MOVLW  20
0D73:  MOVWF  4C
0D74:  BCF    0A.3
0D75:  CALL   1E3
0D76:  BSF    0A.3
0D77:  DECFSZ 3F,F
0D78:  GOTO   572
.................... 		} 
.................... 	} 
.................... } 
....................  
....................  
.................... float getTemp() 
.................... { 
.................... 	int16 adc_value; 
.................... 	float ohm, tcelsius; 
....................  
....................  
.................... 	// see ntc.h and ntc.c 
....................  
.................... 	set_adc_channel ( 1 ); // RA1, pin 3 
*
0800:  MOVLW  08
0801:  MOVWF  78
0802:  MOVF   1F,W
0803:  ANDLW  C7
0804:  IORWF  78,W
0805:  MOVWF  1F
.................... 	delay_us(50); 
0806:  MOVLW  21
0807:  MOVWF  77
0808:  DECFSZ 77,F
0809:  GOTO   008
.................... 	adc_value = read_adc(); 
080A:  BSF    1F.2
080B:  BTFSC  1F.2
080C:  GOTO   00B
080D:  BSF    03.5
080E:  MOVF   1E,W
080F:  BCF    03.5
0810:  MOVWF  3F
0811:  MOVF   1E,W
0812:  MOVWF  40
.................... 	ohm = adc_2_ohm ( adc_value ); 
0813:  MOVF   3F,W
0814:  MOVWF  49
*
0871:  MOVF   7A,W
0872:  MOVWF  44
0873:  MOVF   79,W
0874:  MOVWF  43
0875:  MOVF   78,W
0876:  MOVWF  42
0877:  MOVF   77,W
0878:  MOVWF  41
.................... 	tcelsius = r2temperature ( ohm ); 
0879:  MOVF   44,W
087A:  MOVWF  4C
087B:  MOVF   43,W
087C:  MOVWF  4B
087D:  MOVF   42,W
087E:  MOVWF  4A
087F:  MOVF   41,W
0880:  MOVWF  49
*
0BF3:  MOVF   7A,W
0BF4:  MOVWF  48
0BF5:  MOVF   79,W
0BF6:  MOVWF  47
0BF7:  MOVF   78,W
0BF8:  MOVWF  46
0BF9:  MOVF   77,W
0BFA:  MOVWF  45
....................  
.................... 	return ( float ) tcelsius; 
0BFB:  MOVF   45,W
0BFC:  MOVWF  77
0BFD:  MOVF   46,W
0BFE:  MOVWF  78
0BFF:  MOVF   47,W
0C00:  MOVWF  79
0C01:  MOVF   48,W
0C02:  MOVWF  7A
.................... } 
0C03:  RETLW  00
....................  
....................  
.................... float getRH() 
.................... { 
....................  
.................... 	int16 adc_value; 
.................... 	float adc_volt, rh; 
....................  
.................... 	rh = 0.0; 
*
04DA:  CLRF   48
04DB:  CLRF   47
04DC:  CLRF   46
04DD:  CLRF   45
....................  
.................... 	// RH: RH = ((A/D voltage / supply voltage) - 0.16) / 0.0062 
.................... 	// volt adc = iAdcHumValue / 1024 * 5 
.................... 	// (417 / 1024) * 5 = 2,0361328125 
.................... 	// (2,0361328125 / 5) = 0,4072265625 - 0,16 = 0,2472265625 / 0,0062 = 39,87 RH 
.................... 	// ELLER 
.................... 	// (417 / 1024) = 0,4072265625 - 0,16 = 0,2472265625 / 0,0062 = 39,87 RH 
.................... 	// 0,4072265625 - 0,16 = 
.................... 	// 
.................... 	set_adc_channel ( 0 ); // RA0, pin 2 
04DE:  MOVLW  00
04DF:  MOVWF  78
04E0:  MOVF   1F,W
04E1:  ANDLW  C7
04E2:  IORWF  78,W
04E3:  MOVWF  1F
.................... 	delay_us(50); 
04E4:  MOVLW  21
04E5:  MOVWF  77
04E6:  DECFSZ 77,F
04E7:  GOTO   4E6
....................  
.................... 	adc_value = read_adc(); 
04E8:  BSF    1F.2
04E9:  BTFSC  1F.2
04EA:  GOTO   4E9
04EB:  BSF    03.5
04EC:  MOVF   1E,W
04ED:  BCF    03.5
04EE:  MOVWF  3F
04EF:  MOVF   1E,W
04F0:  MOVWF  40
....................  
.................... 	if ( adc_value < 1 || adc_value > 1023 ) 
04F1:  MOVF   3F,F
04F2:  BTFSS  03.2
04F3:  GOTO   4F7
04F4:  MOVF   40,F
04F5:  BTFSC  03.2
04F6:  GOTO   4FB
04F7:  MOVF   40,W
04F8:  SUBLW  03
04F9:  BTFSC  03.0
04FA:  GOTO   504
.................... 		return rh; 
04FB:  MOVF   45,W
04FC:  MOVWF  77
04FD:  MOVF   46,W
04FE:  MOVWF  78
04FF:  MOVF   47,W
0500:  MOVWF  79
0501:  MOVF   48,W
0502:  MOVWF  7A
0503:  GOTO   597
....................  
.................... 	// calc relative humidity from adc value 
.................... 	adc_volt = ( float ) adc_value / 1023  * VDD; // 1023 leaves room for out-of-range 
0504:  MOVF   40,W
0505:  MOVWF  4F
0506:  MOVF   3F,W
0507:  MOVWF  4E
0508:  CALL   214
0509:  MOVF   77,W
050A:  MOVWF  49
050B:  MOVF   78,W
050C:  MOVWF  4A
050D:  MOVF   79,W
050E:  MOVWF  4B
050F:  MOVF   7A,W
0510:  MOVWF  4C
0511:  MOVWF  75
0512:  MOVF   79,W
0513:  MOVWF  74
0514:  MOVF   78,W
0515:  MOVWF  73
0516:  MOVF   77,W
0517:  MOVWF  72
0518:  BSF    03.5
0519:  CLRF   23
051A:  MOVLW  C0
051B:  MOVWF  22
051C:  MOVLW  7F
051D:  MOVWF  21
051E:  MOVLW  88
051F:  MOVWF  20
0520:  BCF    03.5
0521:  CALL   231
0522:  MOVF   77,W
0523:  MOVWF  4D
0524:  MOVF   78,W
0525:  MOVWF  4E
0526:  MOVF   79,W
0527:  MOVWF  4F
0528:  MOVF   7A,W
0529:  MOVWF  50
052A:  MOVWF  71
052B:  MOVF   79,W
052C:  MOVWF  70
052D:  MOVF   78,W
052E:  MOVWF  6F
052F:  MOVF   77,W
0530:  MOVWF  6E
0531:  CLRF   75
0532:  CLRF   74
0533:  MOVLW  20
0534:  MOVWF  73
0535:  MOVLW  81
0536:  MOVWF  72
0537:  CALL   30A
0538:  MOVF   7A,W
0539:  MOVWF  44
053A:  MOVF   79,W
053B:  MOVWF  43
053C:  MOVF   78,W
053D:  MOVWF  42
053E:  MOVF   77,W
053F:  MOVWF  41
.................... 	//rh = ( adc_volt / VDD  - 0.16 ) / 0.0062; 
.................... 	rh = ( ( float ) adc_volt / VDD  - 0.16 ) / 0.0062; // v1.5 
0540:  MOVF   44,W
0541:  MOVWF  75
0542:  MOVF   43,W
0543:  MOVWF  74
0544:  MOVF   42,W
0545:  MOVWF  73
0546:  MOVF   41,W
0547:  MOVWF  72
0548:  BSF    03.5
0549:  CLRF   23
054A:  CLRF   22
054B:  MOVLW  20
054C:  MOVWF  21
054D:  MOVLW  81
054E:  MOVWF  20
054F:  BCF    03.5
0550:  CALL   231
0551:  MOVF   77,W
0552:  MOVWF  49
0553:  MOVF   78,W
0554:  MOVWF  4A
0555:  MOVF   79,W
0556:  MOVWF  4B
0557:  MOVF   7A,W
0558:  MOVWF  4C
0559:  BSF    03.1
055A:  MOVF   7A,W
055B:  MOVWF  75
055C:  MOVF   79,W
055D:  MOVWF  74
055E:  MOVF   78,W
055F:  MOVWF  73
0560:  MOVF   77,W
0561:  MOVWF  72
0562:  MOVLW  0A
0563:  BSF    03.5
0564:  MOVWF  23
0565:  MOVLW  D7
0566:  MOVWF  22
0567:  MOVLW  23
0568:  MOVWF  21
0569:  MOVLW  7C
056A:  MOVWF  20
056B:  BCF    03.5
056C:  CALL   394
056D:  MOVF   77,W
056E:  MOVWF  4D
056F:  MOVF   78,W
0570:  MOVWF  4E
0571:  MOVF   79,W
0572:  MOVWF  4F
0573:  MOVF   7A,W
0574:  MOVWF  50
0575:  MOVWF  75
0576:  MOVF   79,W
0577:  MOVWF  74
0578:  MOVF   78,W
0579:  MOVWF  73
057A:  MOVF   77,W
057B:  MOVWF  72
057C:  MOVLW  5F
057D:  BSF    03.5
057E:  MOVWF  23
057F:  MOVLW  29
0580:  MOVWF  22
0581:  MOVLW  4B
0582:  MOVWF  21
0583:  MOVLW  77
0584:  MOVWF  20
0585:  BCF    03.5
0586:  CALL   231
0587:  MOVF   7A,W
0588:  MOVWF  48
0589:  MOVF   79,W
058A:  MOVWF  47
058B:  MOVF   78,W
058C:  MOVWF  46
058D:  MOVF   77,W
058E:  MOVWF  45
....................  
.................... 	return rh; 
058F:  MOVF   45,W
0590:  MOVWF  77
0591:  MOVF   46,W
0592:  MOVWF  78
0593:  MOVF   47,W
0594:  MOVWF  79
0595:  MOVF   48,W
0596:  MOVWF  7A
....................  
.................... } 
0597:  RETLW  00
....................  
....................  
.................... void Reboot( void ) 
.................... { 
.................... 	reset_cpu(); 
.................... } 
....................  
.................... void StartFan( void ) 
.................... { 
.................... 	cFan1Flag = ON; 
*
0D98:  MOVLW  01
0D99:  MOVWF  2A
.................... 	// reset possible auto counters 
.................... 	//cFan1AutoState = OFF; 
.................... 	//cFan1RunTime = 0; // stopping fan, reset interval counter 
....................  
.................... 	output_low ( FAN_1 ); 
0D9A:  BCF    28.0
0D9B:  MOVF   28,W
0D9C:  BSF    03.5
0D9D:  MOVWF  07
0D9E:  BCF    03.5
0D9F:  BCF    07.0
.................... 	output_low ( LED_2 ); 
0DA0:  BSF    03.5
0DA1:  BCF    06.4
0DA2:  BCF    03.5
0DA3:  BCF    06.4
.................... } 
....................  
.................... void StopFan( void ) 
.................... { 
.................... 	cFan1Flag = OFF; 
*
0DB2:  CLRF   2A
.................... 	// reset possible auto counters 
.................... 	//cFan1AutoState = OFF; 
.................... 	//cFan1RunTime = 0; // stopping fan, reset interval counter 
....................  
.................... 	output_high ( FAN_1 ); 
0DB3:  BCF    28.0
0DB4:  MOVF   28,W
0DB5:  BSF    03.5
0DB6:  MOVWF  07
0DB7:  BCF    03.5
0DB8:  BSF    07.0
.................... 	output_float ( LED_2 ); 
0DB9:  BSF    03.5
0DBA:  BSF    06.4
.................... } 
....................  
....................  
.................... void AutoFan( void ) 
.................... { 
.................... 	float rh, tcelsius; 
....................  
.................... 	if ( cMenuState != STATE_AUTO ) return; 
*
0773:  MOVF   2C,F
0774:  BTFSS  03.2
0775:  GOTO   7D1
....................  
.................... 	tcelsius = getTemp(); 
0776:  BSF    0A.3
0777:  CALL   000
0778:  BCF    0A.3
0779:  MOVF   7A,W
077A:  MOVWF  3E
077B:  MOVF   79,W
077C:  MOVWF  3D
077D:  MOVF   78,W
077E:  MOVWF  3C
077F:  MOVF   77,W
0780:  MOVWF  3B
.................... 	rh = getRH(); 
0781:  CALL   4DA
0782:  MOVF   7A,W
0783:  MOVWF  3A
0784:  MOVF   79,W
0785:  MOVWF  39
0786:  MOVF   78,W
0787:  MOVWF  38
0788:  MOVF   77,W
0789:  MOVWF  37
....................  
.................... 	if( rh > MAXIMUM_RH ) 
078A:  CLRF   71
078B:  CLRF   70
078C:  MOVLW  3C
078D:  MOVWF  6F
078E:  MOVLW  84
078F:  MOVWF  6E
0790:  MOVF   3A,W
0791:  MOVWF  75
0792:  MOVF   39,W
0793:  MOVWF  74
0794:  MOVF   38,W
0795:  MOVWF  73
0796:  MOVF   37,W
0797:  MOVWF  72
0798:  CALL   598
0799:  BTFSS  03.0
079A:  GOTO   7C2
.................... 	{ 
.................... 		if ( input (INCLUDE_TEMP_SWITCH) == LOW && tcelsius < MINIMUM_TEMP ) 
079B:  BSF    28.2
079C:  MOVF   28,W
079D:  BSF    03.5
079E:  MOVWF  07
079F:  BCF    03.5
07A0:  BTFSC  07.2
07A1:  GOTO   7B4
07A2:  MOVF   3E,W
07A3:  MOVWF  71
07A4:  MOVF   3D,W
07A5:  MOVWF  70
07A6:  MOVF   3C,W
07A7:  MOVWF  6F
07A8:  MOVF   3B,W
07A9:  MOVWF  6E
07AA:  CLRF   75
07AB:  CLRF   74
07AC:  MOVLW  30
07AD:  MOVWF  73
07AE:  MOVLW  83
07AF:  MOVWF  72
07B0:  CALL   598
07B1:  BTFSS  03.0
07B2:  GOTO   7B4
.................... 		{ 
.................... 			//don't run if temp to low and check-temp switch is on 
.................... 			return; 
07B3:  GOTO   7D1
.................... 		} 
.................... 		// RH is above upper threshold and temp check is either ok or deactivated, start fan if not already running 
.................... 		if ( cFan1Flag == OFF ) 
07B4:  MOVF   2A,F
07B5:  BTFSS  03.2
07B6:  GOTO   7C0
.................... 		{ 
.................... 			cFan1Flag = ON; 
07B7:  MOVLW  01
07B8:  MOVWF  2A
.................... 			cFan1CanStop = NO; 
07B9:  CLRF   36
.................... 			//cFan1AutoState = ON; 
.................... 			output_low ( FAN_1 ); 
07BA:  BCF    28.0
07BB:  MOVF   28,W
07BC:  BSF    03.5
07BD:  MOVWF  07
07BE:  BCF    03.5
07BF:  BCF    07.0
....................  
.................... 		} 
....................  
.................... 		cFan1RunTime = 0; // reset interval counter. increases by interrupt timer. 
07C0:  CLRF   34
.................... 	} 
.................... 	else 
07C1:  GOTO   7CF
.................... 	{ 
.................... 		if( cFan1CanStop == NO ) 
07C2:  MOVF   36,F
07C3:  BTFSC  03.2
.................... 		{ 
.................... 			// time forces us to keep running (to prevent hysteresis) 
.................... 		} 
.................... 		else 
07C4:  GOTO   7CF
.................... 		{ 
.................... 			if ( cFan1Flag == ON ) 
07C5:  DECFSZ 2A,W
07C6:  GOTO   7CF
.................... 			{ 
.................... 				cFan1Flag = OFF; 
07C7:  CLRF   2A
.................... 				cFan1CanStop = NO; 
07C8:  CLRF   36
.................... 				//cFan1AutoState = OFF; 
.................... 				//cFan1RunTime = 0; // stopping fan, reset interval counter 
.................... 				output_high ( FAN_1 ); 
07C9:  BCF    28.0
07CA:  MOVF   28,W
07CB:  BSF    03.5
07CC:  MOVWF  07
07CD:  BCF    03.5
07CE:  BSF    07.0
....................  
.................... 			} 
.................... 		} 
.................... 	} 
....................  
.................... 	cFan1AutoState = cFan1Flag; // for correct view in display 
07CF:  MOVF   2A,W
07D0:  MOVWF  35
....................  
.................... } 
07D1:  BSF    0A.3
07D2:  BCF    0A.4
07D3:  GOTO   747 (RETURN)
....................  
....................  
....................  
....................  
....................  
.................... // LCD FUNCTIONS ================================= 
....................  
.................... void LCD_Init ( void ) 
.................... { 
.................... 	LCD_SetData ( 0x00 ); 
*
01B6:  CLRF   4D
01B7:  CALL   171
.................... 	delay_ms ( 200 );       // wait enough time after Vdd rise 
01B8:  MOVLW  C8
01B9:  MOVWF  4D
01BA:  CALL   15D
.................... 	output_low ( LCD_RS ); 
01BB:  BSF    03.5
01BC:  BCF    06.6
01BD:  BCF    03.5
01BE:  BCF    06.6
.................... 	LCD_SetData ( 0x03 );   // init with specific nibbles to start 4-bit mode 
01BF:  MOVLW  03
01C0:  MOVWF  4D
01C1:  CALL   171
.................... 	LCD_PulseEnable(); 
01C2:  CALL   19A
.................... 	LCD_PulseEnable(); 
01C3:  CALL   19A
.................... 	LCD_PulseEnable(); 
01C4:  CALL   19A
.................... 	LCD_SetData ( 0x02 );   // set 4-bit interface 
01C5:  MOVLW  02
01C6:  MOVWF  4D
01C7:  CALL   171
.................... 	LCD_PulseEnable();      // send dual nibbles hereafter, MSN first 
01C8:  CALL   19A
.................... 	LCD_PutCmd ( 0x2C );    // function set (all lines, 5x7 characters) 
01C9:  MOVLW  2C
01CA:  MOVWF  37
01CB:  CALL   1AB
.................... 	LCD_PutCmd ( 0x0C );    // display ON, cursor off, no blink 
01CC:  MOVLW  0C
01CD:  MOVWF  37
01CE:  CALL   1AB
.................... 	LCD_PutCmd ( 0x01 );    // clear display 
01CF:  MOVLW  01
01D0:  MOVWF  37
01D1:  CALL   1AB
.................... 	LCD_PutCmd ( 0x06 );    // entry mode set, increment 
01D2:  MOVLW  06
01D3:  MOVWF  37
01D4:  CALL   1AB
.................... } 
01D5:  RETLW  00
....................  
.................... void LCD_SetPosition ( unsigned int cX ) 
.................... { 
.................... 	// this subroutine works specifically for 4-bit Port A 
.................... 	LCD_SetData ( swap ( cX ) | 0x08 ); 
01D6:  SWAPF  3F,F
01D7:  MOVF   3F,W
01D8:  IORLW  08
01D9:  MOVWF  40
01DA:  MOVWF  4D
01DB:  CALL   171
.................... 	LCD_PulseEnable(); 
01DC:  CALL   19A
.................... 	LCD_SetData ( swap ( cX ) ); 
01DD:  SWAPF  3F,F
01DE:  MOVF   3F,W
01DF:  MOVWF  4D
01E0:  CALL   171
.................... 	LCD_PulseEnable(); 
01E1:  CALL   19A
.................... } 
01E2:  RETLW  00
....................  
.................... void LCD_PutChar ( unsigned int cX ) 
.................... { 
.................... 	// this subroutine works specifically for 4-bit Port A 
.................... 	output_high ( LCD_RS ); 
01E3:  BSF    03.5
01E4:  BCF    06.6
01E5:  BCF    03.5
01E6:  BSF    06.6
.................... 	LCD_SetData ( swap ( cX ) );     // send high nibble 
01E7:  SWAPF  4C,F
01E8:  MOVF   4C,W
01E9:  MOVWF  4D
01EA:  CALL   171
.................... 	LCD_PulseEnable(); 
01EB:  CALL   19A
.................... 	LCD_SetData ( swap ( cX ) );     // send low nibble 
01EC:  SWAPF  4C,F
01ED:  MOVF   4C,W
01EE:  MOVWF  4D
01EF:  CALL   171
.................... 	LCD_PulseEnable(); 
01F0:  CALL   19A
.................... 	output_low ( LCD_RS ); 
01F1:  BSF    03.5
01F2:  BCF    06.6
01F3:  BCF    03.5
01F4:  BCF    06.6
.................... } 
01F5:  RETLW  00
....................  
.................... void LCD_PutCmd ( unsigned int cX ) 
.................... { 
.................... 	// this subroutine works specifically for 4-bit Port A 
.................... 	LCD_SetData ( swap ( cX ) );     // send high nibble 
*
01AB:  SWAPF  37,F
01AC:  MOVF   37,W
01AD:  MOVWF  4D
01AE:  CALL   171
.................... 	LCD_PulseEnable(); 
01AF:  CALL   19A
.................... 	LCD_SetData ( swap ( cX ) );     // send low nibble 
01B0:  SWAPF  37,F
01B1:  MOVF   37,W
01B2:  MOVWF  4D
01B3:  CALL   171
.................... 	LCD_PulseEnable(); 
01B4:  CALL   19A
.................... } 
01B5:  RETLW  00
....................  
.................... void LCD_PulseEnable ( void ) 
.................... { 
.................... 	output_high ( LCD_EN ); 
*
019A:  BSF    03.5
019B:  BCF    06.5
019C:  BCF    03.5
019D:  BSF    06.5
.................... 	delay_us ( 10 ); 
019E:  MOVLW  06
019F:  MOVWF  77
01A0:  DECFSZ 77,F
01A1:  GOTO   1A0
01A2:  NOP
.................... 	output_low ( LCD_EN ); 
01A3:  BSF    03.5
01A4:  BCF    06.5
01A5:  BCF    03.5
01A6:  BCF    06.5
.................... 	delay_ms ( 5 ); 
01A7:  MOVLW  05
01A8:  MOVWF  4D
01A9:  CALL   15D
.................... } 
01AA:  RETLW  00
....................  
.................... void LCD_SetData ( unsigned int cX ) 
.................... { 
.................... 	output_bit ( LCD_D0, cX & 0x01 ); 
*
0171:  BTFSC  4D.0
0172:  GOTO   175
0173:  BCF    07.3
0174:  GOTO   176
0175:  BSF    07.3
0176:  BCF    28.3
0177:  MOVF   28,W
0178:  BSF    03.5
0179:  MOVWF  07
.................... 	output_bit ( LCD_D1, cX & 0x02 ); 
017A:  BCF    03.5
017B:  BTFSC  4D.1
017C:  GOTO   17F
017D:  BCF    07.4
017E:  GOTO   180
017F:  BSF    07.4
0180:  BCF    28.4
0181:  MOVF   28,W
0182:  BSF    03.5
0183:  MOVWF  07
.................... 	output_bit ( LCD_D2, cX & 0x04 ); 
0184:  BCF    03.5
0185:  BTFSC  4D.2
0186:  GOTO   189
0187:  BCF    07.5
0188:  GOTO   18A
0189:  BSF    07.5
018A:  BCF    28.5
018B:  MOVF   28,W
018C:  BSF    03.5
018D:  MOVWF  07
.................... 	output_bit ( LCD_D3, cX & 0x08 ); 
018E:  BCF    03.5
018F:  BTFSC  4D.3
0190:  GOTO   193
0191:  BCF    07.6
0192:  GOTO   194
0193:  BSF    07.6
0194:  BCF    28.6
0195:  MOVF   28,W
0196:  BSF    03.5
0197:  MOVWF  07
.................... } 
0198:  BCF    03.5
0199:  RETLW  00

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG
