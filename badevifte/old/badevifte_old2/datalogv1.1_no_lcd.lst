CCS PCM C Compiler, Version 4.013, 28193               02-okt-07 22:30

               Filename: \\10.0.0.13\storage\Elektronikk\PIC\badevifte\datalogv1.1_no_lcd.lst

               ROM used: 143 words (2%)
                         Largest free fragment is 2048
               RAM used: 16 (4%) at main() level
                         17 (5%) worst case
               Stack:    2 worst case (1 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   05A
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   030
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   27,W
0028:  MOVWF  7B
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   033
.................... #include <16F876.H> 
.................... //////// Standard Header file for the PIC16F876 device //////////////// 
.................... #device PIC16F876 
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #case 
....................  
.................... #ifndef TRUE 
.................... #define TRUE 1 
.................... #endif 
....................  
.................... #ifndef FALSE 
.................... #define FALSE 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO 0 
.................... #endif 
....................  
.................... #ifndef HIGH 
.................... #define HIGH 1 
.................... #endif 
....................  
.................... #ifndef LOW 
.................... #define LOW 0 
.................... #endif 
....................  
.................... #ifndef ON 
.................... #define ON 1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef UP 
.................... #define UP 1 
.................... #endif 
....................  
.................... #ifndef DOWN 
.................... #define DOWN 0 
.................... #endif 
....................  
.................... #ifndef UCHAR 
.................... #define UCHAR char 
.................... #endif 
....................  
.................... #ifndef UINT 
.................... #define UINT long 
.................... #endif 
....................  
.................... #ifndef BIT 
.................... #define BIT short 
.................... #endif 
....................  
.................... #ifndef SCHAR 
.................... #define SCHAR signed int 
.................... #endif 
....................  
.................... #ifndef SINT 
.................... #define SINT signed long 
.................... #endif 
....................  
.................... #ifndef FLOAT 
.................... #define FLOAT float 
.................... #endif 
....................  
....................  
.................... #fuses XT, NOPROTECT, NOPUT, NOWDT, NOBROWNOUT, NOLVP, NOCPD, NOWRT 
....................  
.................... // ADC 
.................... #define VDD                 5.00 
....................  
.................... // LCD STUFF 
.................... #define MENU_DEC_SWITCH        PIN_C0 
.................... #define SELECT_INC_SWITCH      PIN_C1 
.................... #define RANGE_SHUNT            PIN_C2 
.................... #define SEL0                   PIN_B2 
.................... #define SEL1                   PIN_B4 
....................  
....................  
.................... // KENNY 
....................  
.................... #define CMD_NUL     0 
....................  
.................... #define LED_1   PIN_B5 
.................... #define LED_2   PIN_B4 
....................  
.................... #define hi(x)  (*(&x+1)) 
....................  
.................... #use delay ( clock=4000000 ) 
*
0039:  MOVLW  2A
003A:  MOVWF  04
003B:  BCF    03.7
003C:  MOVF   00,W
003D:  BTFSC  03.2
003E:  GOTO   04D
003F:  MOVLW  01
0040:  MOVWF  78
0041:  CLRF   77
0042:  DECFSZ 77,F
0043:  GOTO   042
0044:  DECFSZ 78,F
0045:  GOTO   041
0046:  MOVLW  4A
0047:  MOVWF  77
0048:  DECFSZ 77,F
0049:  GOTO   048
004A:  GOTO   04B
004B:  DECFSZ 00,F
004C:  GOTO   03F
004D:  RETLW  00
.................... #use standard_io ( A ) 
.................... #use standard_io ( B ) 
.................... #use standard_io ( C ) 
*
0063:  MOVLW  FF
0064:  BCF    03.5
0065:  MOVWF  28
....................  
.................... void SetTime ( void ); 
.................... void CheckSample ( void ); 
....................  
.................... /*******************************************************************/ 
....................  
....................  
....................  
.................... #int_rtcc 
.................... void TimerInterrupt ( void )      // 32.768mS tic, ~30 interrupts per second 
....................     { 
....................     set_rtcc ( 4 );     // restart at adjusted value for 1-second accuracy 
*
0033:  MOVLW  04
0034:  MOVWF  01
....................     } 
....................  
.................... //***************************************************************************** 
....................  
0035:  BCF    0B.2
0036:  BCF    0A.3
0037:  BCF    0A.4
0038:  GOTO   01D
.................... void main ( void ) 
.................... { 
*
005A:  CLRF   04
005B:  BCF    03.7
005C:  MOVLW  1F
005D:  ANDWF  03,F
005E:  BSF    03.5
005F:  BSF    1F.0
0060:  BSF    1F.1
0061:  BSF    1F.2
0062:  BCF    1F.3
....................     //char recChar; 
....................     delay_ms ( 200 );           // wait enough time after VDD rise 
*
0066:  MOVLW  C8
0067:  MOVWF  2A
0068:  CALL   039
....................     output_low ( LED_2 ); 
0069:  BSF    03.5
006A:  BCF    06.4
006B:  BCF    03.5
006C:  BCF    06.4
....................  
....................     delay_ms ( 3000 ); 
006D:  MOVLW  0C
006E:  MOVWF  29
006F:  MOVLW  FA
0070:  MOVWF  2A
0071:  CALL   039
0072:  DECFSZ 29,F
0073:  GOTO   06F
....................  
....................     // SETUP 
....................     setup_adc_ports ( RA0_ANALOG );     // these three statements set up the ADC 
0074:  BSF    03.5
0075:  BCF    1F.0
0076:  BSF    1F.1
0077:  BSF    1F.2
0078:  BSF    1F.3
....................     setup_adc ( ADC_CLOCK_INTERNAL );   // clock source 
0079:  BCF    03.5
007A:  BSF    1F.6
007B:  BSF    1F.7
007C:  BSF    03.5
007D:  BSF    1F.7
007E:  BCF    03.5
007F:  BSF    1F.0
....................     set_adc_channel ( 0 );              // select channel 
0080:  MOVLW  00
0081:  MOVWF  78
0082:  MOVF   1F,W
0083:  ANDLW  C7
0084:  IORWF  78,W
0085:  MOVWF  1F
....................     enable_interrupts ( INT_RTCC );     // turn on timer interrupt 
0086:  BSF    0B.5
....................     enable_interrupts ( GLOBAL );       // enable interrupts 
0087:  MOVLW  C0
0088:  IORWF  0B,F
....................  
....................     // INITIALIZE VARIABLES 
....................     output_float ( LED_1 ); 
0089:  BSF    03.5
008A:  BSF    06.5
....................  
....................     while ( TRUE )              // do forever 
....................         { 
....................         CheckSample();          // check if it's time to sample and store ADC 
008B:  BCF    03.5
008C:  GOTO   04E
....................         } 
008D:  GOTO   08C
.................... } 
....................  
.................... //**************************************************************************** 
....................  
....................  
.................... void CheckSample ( void ) 
....................     { 
008E:  SLEEP
....................     long ieeVal; 
....................  
....................             ieeVal = read_adc(); 
*
004E:  BSF    1F.2
004F:  BTFSC  1F.2
0050:  GOTO   04F
0051:  BSF    03.5
0052:  MOVF   1E,W
0053:  BCF    03.5
0054:  MOVWF  29
0055:  MOVF   1E,W
0056:  MOVWF  2A
....................     } 
0057:  BCF    0A.3
0058:  BCF    0A.4
0059:  GOTO   08D (RETURN)
....................  

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG
