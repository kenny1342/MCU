D G "__PCH__" 0 0 ""4.104""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""09-jan-11""
D G "__TIME__" 0 0 ""10:38:50"" "Standard Header file for the PIC18F1320 device ////////////////"
d G "PIN_A0" 1 23 "31744"
d G "PIN_A1" 1 24 "31745"
d G "PIN_A2" 1 25 "31746"
d G "PIN_A3" 1 26 "31747"
d G "PIN_A4" 1 27 "31748"
d G "PIN_A5" 1 28 "31749"
d G "PIN_A6" 1 29 "31750"
d G "PIN_A7" 1 30 "31751"
d G "PIN_B0" 1 32 "31752"
d G "PIN_B1" 1 33 "31753"
d G "PIN_B2" 1 34 "31754"
d G "PIN_B3" 1 35 "31755"
d G "PIN_B4" 1 36 "31756"
d G "PIN_B5" 1 37 "31757"
d G "PIN_B6" 1 38 "31758"
d G "PIN_B7" 1 39 "31759"
d G "FALSE" 1 42 "0"
d G "TRUE" 1 43 "1"
d G "BYTE" 1 45 "int8"
d G "BOOLEAN" 1 46 "int1"
d G "getc" 1 48 "getch"
d G "fgetc" 1 49 "getch"
d G "getchar" 1 50 "getch"
d G "putc" 1 51 "putchar"
d G "fputc" 1 52 "putchar"
d G "fgets" 1 53 "gets"
d G "fputs" 1 54 "puts"
d G "WDT_TIMEOUT" 1 60 "7"
d G "MCLR_FROM_SLEEP" 1 61 "11"
d G "MCLR_FROM_RUN" 1 62 "15"
d G "NORMAL_POWER_UP" 1 63 "12"
d G "BROWNOUT_RESTART" 1 64 "14"
d G "WDT_FROM_SLEEP" 1 65 "3"
d G "RESET_INSTRUCTION" 1 66 "0"
d G "T0_INTERNAL" 1 72 "0"
d G "T0_EXT_L_TO_H" 1 73 "32"
d G "T0_EXT_H_TO_L" 1 74 "48"
d G "T0_DIV_1" 1 76 "8"
d G "T0_DIV_2" 1 77 "0"
d G "T0_DIV_4" 1 78 "1"
d G "T0_DIV_8" 1 79 "2"
d G "T0_DIV_16" 1 80 "3"
d G "T0_DIV_32" 1 81 "4"
d G "T0_DIV_64" 1 82 "5"
d G "T0_DIV_128" 1 83 "6"
d G "T0_DIV_256" 1 84 "7"
d G "T0_OFF" 1 86 "0x80"
d G "T0_8_BIT" 1 88 "0x40"
d G "RTCC_INTERNAL" 1 90 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 91 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 92 "48"
d G "RTCC_DIV_1" 1 93 "8"
d G "RTCC_DIV_2" 1 94 "0"
d G "RTCC_DIV_4" 1 95 "1"
d G "RTCC_DIV_8" 1 96 "2"
d G "RTCC_DIV_16" 1 97 "3"
d G "RTCC_DIV_32" 1 98 "4"
d G "RTCC_DIV_64" 1 99 "5"
d G "RTCC_DIV_128" 1 100 "6"
d G "RTCC_DIV_256" 1 101 "7"
d G "RTCC_OFF" 1 102 "0x80"
d G "RTCC_8_BIT" 1 103 "0x40"
d G "WDT_ON" 1 114 "0x100"
d G "WDT_OFF" 1 115 "0"
d G "T1_DISABLED" 1 121 "0"
d G "T1_INTERNAL" 1 122 "0x85"
d G "T1_EXTERNAL" 1 123 "0x87"
d G "T1_EXTERNAL_SYNC" 1 124 "0x83"
d G "T1_CLK_OUT" 1 126 "8"
d G "T1_DIV_BY_1" 1 128 "0"
d G "T1_DIV_BY_2" 1 129 "0x10"
d G "T1_DIV_BY_4" 1 130 "0x20"
d G "T1_DIV_BY_8" 1 131 "0x30"
d G "T2_DISABLED" 1 136 "0"
d G "T2_DIV_BY_1" 1 137 "4"
d G "T2_DIV_BY_4" 1 138 "5"
d G "T2_DIV_BY_16" 1 139 "6"
d G "T3_DISABLED" 1 145 "0"
d G "T3_INTERNAL" 1 146 "0x85"
d G "T3_EXTERNAL" 1 147 "0x87"
d G "T3_EXTERNAL_SYNC" 1 148 "0x83"
d G "T3_DIV_BY_1" 1 150 "0"
d G "T3_DIV_BY_2" 1 151 "0x10"
d G "T3_DIV_BY_4" 1 152 "0x20"
d G "T3_DIV_BY_8" 1 153 "0x30"
d G "T3_CCP2" 1 156 "0x8"
d G "CCP_OFF" 1 162 "0"
d G "CCP_CAPTURE_FE" 1 163 "4"
d G "CCP_CAPTURE_RE" 1 164 "5"
d G "CCP_CAPTURE_DIV_4" 1 165 "6"
d G "CCP_CAPTURE_DIV_16" 1 166 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 167 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 168 "9"
d G "CCP_COMPARE_INT" 1 169 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 170 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 1 171 "0xB"
d G "CCP_PWM" 1 172 "0xC"
d G "CCP_PWM_PLUS_1" 1 173 "0x1c"
d G "CCP_PWM_PLUS_2" 1 174 "0x2c"
d G "CCP_PWM_PLUS_3" 1 175 "0x3c"
d G "CCP_PWM_H_H" 1 181 "0x0c"
d G "CCP_PWM_H_L" 1 182 "0x0d"
d G "CCP_PWM_L_H" 1 183 "0x0e"
d G "CCP_PWM_L_L" 1 184 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 186 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 187 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 188 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 190 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 191 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 192 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 193 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 194 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 195 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 196 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 198 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 199 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 200 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 202 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 203 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 204 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 206 "0x80000000"
d G "UART_ADDRESS" 1 212 "2"
d G "UART_DATA" 1 213 "4"
d G "UART_AUTODETECT" 1 214 "8"
d G "UART_AUTODETECT_NOWAIT" 1 215 "9"
d G "UART_WAKEUP_ON_RDA" 1 216 "10"
d G "UART_SEND_BREAK" 1 217 "13"
d G "LVD_LVDIN" 1 221 "0x1F"
d G "LVD_42" 1 222 "0x1E"
d G "LVD_39" 1 223 "0x1D"
d G "LVD_38" 1 224 "0x1C"
d G "LVD_36" 1 225 "0x1B"
d G "LVD_34" 1 226 "0x1A"
d G "LVD_33" 1 227 "0x19"
d G "LVD_31" 1 228 "0x18"
d G "LVD_28" 1 229 "0x17"
d G "LVD_27" 1 230 "0x16"
d G "LVD_26" 1 231 "0x15"
d G "LVD_24" 1 232 "0x14"
d G "LVD_23" 1 233 "0x13"
d G "LVD_21" 1 234 "0x12"
d G "OSC_31KHZ" 1 239 "0"
d G "OSC_125KHZ" 1 240 "0x10"
d G "OSC_250KHZ" 1 241 "0x20"
d G "OSC_500KHZ" 1 242 "0x30"
d G "OSC_1MHZ" 1 243 "0x40"
d G "OSC_2MHZ" 1 244 "0x50"
d G "OSC_4MHZ" 1 245 "0x60"
d G "OSC_8MHZ" 1 246 "0x70"
d G "OSC_TIMER1" 1 248 "1"
d G "OSC_INTRC" 1 249 "2"
d G "OSC_NORMAL" 1 250 "0"
d G "OSC_IDLE_MODE" 1 252 "0x80"
d G "OSC_STATE_STABLE" 1 256 "4"
d G "OSC_STATE_EXT_RUNNING" 1 257 "8"
d G "ADC_OFF" 1 264 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 265 "0x100"
d G "ADC_CLOCK_DIV_4" 1 266 "0x04"
d G "ADC_CLOCK_DIV_8" 1 267 "0x01"
d G "ADC_CLOCK_DIV_16" 1 268 "0x05"
d G "ADC_CLOCK_DIV_32" 1 269 "0x02"
d G "ADC_CLOCK_DIV_64" 1 270 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 271 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 1 273 "0x00"
d G "ADC_TAD_MUL_2" 1 274 "0x08"
d G "ADC_TAD_MUL_4" 1 275 "0x10"
d G "ADC_TAD_MUL_6" 1 276 "0x18"
d G "ADC_TAD_MUL_8" 1 277 "0x20"
d G "ADC_TAD_MUL_12" 1 278 "0x28"
d G "ADC_TAD_MUL_16" 1 279 "0x30"
d G "ADC_TAD_MUL_20" 1 280 "0x38"
d G "sAN0" 1 283 "1" "| A0"
d G "sAN1" 1 284 "2" "| A1"
d G "sAN2" 1 285 "4" "| A2"
d G "sAN3" 1 286 "8" "| A3"
d G "sAN4" 1 287 "16" "| B0"
d G "sAN5" 1 288 "32" "| B1"
d G "sAN6" 1 289 "64" "| B4"
d G "NO_ANALOGS" 1 290 "0" "None"
d G "ALL_ANALOG" 1 291 "127" "A0 A1 A2 A3 B0 B1 B4"
d G "VSS_VDD" 1 294 "0x0000" "Range 0-Vdd"
d G "VREF_VREF" 1 295 "0xC000" "Range VrefL-VrefH"
d G "VSS_VREF" 1 296 "0x4000" "Range 0-VrefH"
d G "VREF_VDD" 1 297 "0x8000" "Range VrefL-Vdd"
d G "ADC_START_AND_READ" 1 302 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 303 "1"
d G "ADC_READ_ONLY" 1 304 "6"
d G "L_TO_H" 1 316 "0x40"
d G "H_TO_L" 1 317 "0"
d G "GLOBAL" 1 319 "0xF2C0"
d G "INT_RTCC" 1 320 "0x00F220"
d G "INT_TIMER0" 1 321 "0x00F220"
d G "INT_TIMER1" 1 322 "0x009D01"
d G "INT_TIMER2" 1 323 "0x009D02"
d G "INT_TIMER3" 1 324 "0x00A002"
d G "INT_EXT_L2H" 1 325 "0x5000F210"
d G "INT_EXT_H2L" 1 326 "0x6000F210"
d G "INT_EXT" 1 327 "0x00F210"
d G "INT_EXT1_L2H" 1 328 "0x5001F008"
d G "INT_EXT1_H2L" 1 329 "0x6001F008"
d G "INT_EXT1" 1 330 "0x00F008"
d G "INT_EXT2_L2H" 1 331 "0x5002F010"
d G "INT_EXT2_H2L" 1 332 "0x6002F010"
d G "INT_EXT2" 1 333 "0x00F010"
d G "INT_RB" 1 334 "0x00FFF208"
d G "INT_AD" 1 335 "0x009D40"
d G "INT_RDA" 1 336 "0x009D20"
d G "INT_TBE" 1 337 "0x009D10"
d G "INT_CCP1" 1 338 "0x009D04"
d G "INT_LOWVOLT" 1 339 "0x00A004"
d G "INT_EEPROM" 1 340 "0x00A010"
d G "INT_OSCF" 1 341 "0x00A080"
C G "" 0 22 5 "*"
C G "" 0 29 5 "*"
D G "DEBUG" 2 45 "" "level 1"
D G "DEBUG_ALARMS" 2 46 ""
D G "SW_MAJOR_V" 2 51 " (int8) 02"
D G "SW_MINOR_V" 2 52 " (int8) 01"
D G "HW_MAJOR_V" 2 53 " (int8) 01"
D G "HW_MINOR_V" 2 54 " (int8) 07"
D G "VDD_SF" 2 66 "4790"
D G "SAMPLE_COUNT" 2 73 "3" "3 number of samples for avg reading of temps (ISR TIMER1 sets interval)"
D G "SAMPLE_COUNT_POT" 2 74 "4" "number of samples for avg reading of POTs (ISR TIMER1 sets interval)"
D G "SAMPLE_INTERVAL_COUNT" 2 75 "6" "6 required nr of equal samples with SAMPLE_INTERVAL_SECS secs between, before any actions"
D G "SAMPLE_INTERVAL_SECS" 2 76 "5" "15 seconds between each long time samples"
D G "FREEZER_MIN_TEMP" 2 80 "-28" "for flagging "freezer_to_cold""
D G "FRIDGE_MIN_TEMP" 2 81 "0" "for flagging "fridge_to_cold""
D G "M_SUPERCOOL_TEMP" 2 84 "0" "when button pressed, we try to force temp down to this"
D G "M_FASTFREEZE_TEMP" 2 85 "-26" "when button pressed, we try to force temp down to this"
D G "M_FASTFREEZE_MIN" 2 86 "120" "Minutes FastFreeze should run after reaching M_FASTFREEZE_TEMP."
D G "WAIT_MIN_AFTER_LONG_RUN" 2 89 "30" "minutes to wait before starting motors after too long run"
D G "FREEZER_DEGREES_UNDER" 2 91 "3" "degrees diff between pot and real temp before stopping"
D G "FREEZER_DEGREES_OVER" 2 92 "2" "degrees diff between pot and real temp before starting"
D G "FREEZER_RUN_TEMP_OFFSET" 2 93 "0" "2 -5 pga sensor plassert i grillene (lavere stopper tidligere)"
D G "FREEZER_STOP_TEMP_OFFSET" 2 94 "0" "0 -7 avg når grillen tempereres (lavere starter senere)"
D G "FRIDGE_DEGREES_UNDER" 2 97 "2" "2 real temp degrees under pot before stopping"
D G "FRIDGE_DEGREES_OVER" 2 98 "1" "real temp degrees over pot before starting"
D G "FRIDGE_RUN_TEMP_OFFSET" 2 99 "0" "1 -14 (lavere stopper tidligere)"
D G "FRIDGE_STOP_TEMP_OFFSET" 2 100 "-1" "0 -8 (lavere starter senere)"
D G "FREEZER_MAX_RUN_MIN" 2 103 "240" "(4 hours) never run longer than X mins ( *2 if supercool-mode)"
D G "FREEZER_MIN_RUN_MIN" 2 104 "15" "when started, never run less than X mins"
D G "FREEZER_MIN_STOP_MIN" 2 105 "10" "when stopped, always stop for X mins"
D G "FRIDGE_MAX_RUN_MIN" 2 107 "240" "(4 hours) never run longer than X mins ( *2 if deepfreeze-mode)"
D G "FRIDGE_MIN_RUN_MIN" 2 108 "15" "when started, never run less than X mins"
D G "FRIDGE_MIN_STOP_MIN" 2 109 "10" "when stopped, always stop for X mins"
C G "" 2 113 1 "*"
C G "" 2 114 2 "*LEDIG"
D G "ADC_FRIDGE" 2 118 "5" "p9 (B1/AN5) -> CN2-4"
D G "ADC_FREEZER" 2 119 "4" "p8 (B0/AN4) -> CN2-1"
D G "ADC_POT_FREEZER" 2 121 "1" "p2 (A1/AN1)"
D G "ADC_POT_FRIDGE" 2 122 "6" "p10 (B4/AN6)"
D G "POT_FRIDGE_PULLDOWN" 2 124 "PIN_A0" "p1 setting low when ad read the pots"
D G "POT_FREEZER_PULLDOWN" 2 126 "PIN_B6" "p12 (was SENSOR_COM_7K R9 til sensor-com, pin 2+3 på CN2)"
D G "SENSOR_COM" 2 128 "PIN_B7" "p13 til base på transistor som mater +5 til sensor-com (pin 2+3 på CN2)"
D G "TRANSISTOR_Q5C" 2 131 "PIN_A5" "p4 MCLR, en transistor som tydligvis kjører pinne high/low av en eller annen grunn....?"
D G "VOLTAGE" 2 134 "PIN_A4" "p3 , denne har konstant +5..... og noe mer, SJEKK UT DETTE!!!"
D G "POT_FRIDGE_R4" 2 136 "PIN_B4" "p10"
D G "POT_FREEZE_R5" 2 137 "PIN_A1" "p2"
D G "SW_FRIDGE" 2 139 "PIN_B5" "p17 SW2 "super cool", kjøl, DL2 orange til ferdig?"
D G "SW_FREEZE" 2 140 "PIN_B2" "SW3 nedfrysning, DL1 orange til ferdig"
D G "LED_COM" 2 142 "PIN_A7" "p16, common for LEDs"
D G "LED_DL3" 2 143 "PIN_B2" "p17 red led, alarm fryser"
D G "LED_DL1" 2 144 "PIN_B3" "p9"
D G "LED_DL2" 2 145 "PIN_B5" "p11 "super cool" kjøl, orange en stund mens kjøl tvangskjøres?"
D G "OUT_RL2" 2 147 "PIN_A2" "p6, rele frys"
D G "OUT_RL1" 2 148 "PIN_A3" "p7, rele kjøl"
D G "TRISA_NORMAL" 2 153 "0b00110011" "A4 +5, A1 is a POT, read by ADC. A0=POT_FRIDGE_PULLDOWN, needs to float (input) when not sampling. (same with B6)"
D G "TRISA_SAMPLE_SENSORS" 2 154 "0b00110011" "A4 +5, A1 is a POT, read by ADC. A0=POT_FRIDGE_PULLDOWN, output low when sampling. (same with B6)"
D G "TRISA_SAMPLE_POTS" 2 155 "0b00110010" "A4 +5, A0 pulldown output"
D G "TRISB_NORMAL" 2 157 "0b01010011" "0b01010011 B7-B0: B7=SENSOR-COM, B6=PULLDOWN, B5=DL2+SW3, B4=ANA-POT, B3=DL1,B2=DL3+SW2, B1-B0=ANA-SENSORS"
D G "TRISB_SAMPLE_SENSORS" 2 158 "0b01010011"
D G "TRISB_SAMPLE_SWITCHES" 2 159 "0b01110111"
D G "TRISB_SAMPLE_POTS" 2 160 "0b00010011" "B6 pulldown output"
D G "ON" 2 163 "1"
D G "OFF" 2 164 "0"
D G "YES" 2 165 "1"
D G "NO" 2 166 "0"
D G "NOT_READY" 2 168 "-101"
D G "POT_OFF" 2 169 "-100"
D G "POT_MAX" 2 170 "-127"
D G "MEM_ADDR_RESTART" 2 174 "0xFF"
C G "" 2 183 1 "*"
C G "" 2 183 1 "*"
T G "LEDStruct" 2 194 "{int8 DL1,int8 DL2,int8 DL3,int1 DL1_Color,int1 DL2_Color,int1 COM_Last}"
T G "AlarmStruct" 2 211 "{int1 alarm_active,int1 reset_done,int1 fridge_temp,int1 freezer_temp,int1 fridge_sensor_fault,int1 freezer_sensor_fault,int1 fridge_run_to_long,int1 freezer_run_to_long,int16 auto_reset_timeout_mins}"
T G "TempsStruct" 2 227 "{sint8 fridge_real,sint8 fridge_calc,sint8 fridge_run,sint8 pot_fridge,sint8 freezer_real,sint8 freezer_calc,sint8 freezer_run,sint8 pot_freezer,int1 fridge_to_warm,int1 fridge_to_cold,int1 freezer_to_warm,int1 freezer_to_cold}"
T G "SampleStruct" 2 241 "{int8 index,int8 tries,sint8[3] samples,int8 last_index,int8 last_tries,sint8[6] last_samples,int1 do_actions,int1 do_final_sample,int16 avg_adc_value}"
T G "SampleStructPot" 2 248 "{int8 index,int16[4] samples,int16 avg_adc_value}"
T G "StatusStruct" 2 268 "{int1 run_fridge,int1 run_freezer,int1 fridge_running,int1 freezer_running,int1 mode_supercool,int1 mode_fastfreeze,int1 fastfreeze_reached_temp,int1 sampling,int1 sampling_switches,int8 fridge_run_mins,int16 fridge_total_run_mins,int8 freezer_run_mins,int16 freezer_total_run_mins,int8 fridge_stopped_mins,int8 freezer_stopped_mins,int8 fastfreeze_run_mins}"
T G "ConfigStruct" 2 278 "{int8 freezer_degrees_under,int8 fridge_degrees_under,sint8 freezer_run_temp_offset,sint8 freezer_stop_temp_offset,sint8 fridge_run_temp_offset,sint8 fridge_stop_temp_offset}" "*** MACROS ***"
D G "SET_RELAY1" 2 285 "(STATUS) (output_bit(OUT_RL1, !STATUS))"
D G "SET_RELAY2" 2 286 "(STATUS) (output_bit(OUT_RL2, !STATUS))"
D G "SET_LED" 2 289 "(LED,STATUS) (output_bit(LED, !STATUS))"
D G "Start_Fridge_Motor" 2 290 " (SET_RELAY1(ON), Status.fridge_running=YES, started2++)"
D G "Stop_Fridge_Motor" 2 291 " (SET_RELAY1(OFF), Status.fridge_running=NO)"
D G "Start_Freezer_Motor" 2 292 " (SET_RELAY2(ON), Status.freezer_running=YES, started1++)"
D G "Stop_Freezer_Motor" 2 293 " (SET_RELAY2(OFF), Status.freezer_running=NO)"
D G "EnableSensors" 2 295 " (output_low(SENSOR_COM), Status.sampling=YES)" "Turn transistor ON to power sensors"
D G "DisableSensors" 2 296 " (output_high(SENSOR_COM), Status.sampling=NO)" "Turn transistor OFF to turn off sensors"
E G "LED_OFF" 2 298 "0"
E G "LED_ON" 2 298 "1"
E G "LED_BLINK" 2 298 "3"
E G "LED_BLINK_FAST" 2 298 "4"
E G "LED_GREEN" 2 299 "0"
E G "LED_AMBER" 2 299 "1" "typedef enum {red, green=2,blue}colors;"
C G "" 2 303 1 "*"
V G "do_read_temp" 2 305 "int1"
V G "do_LED_updates" 2 305 "int1"
V G "blink_toggle" 2 305 "int1"
V G "blink_toggle_fast" 2 305 "int1"
V G "print_debug" 2 305 "int1"
V G "ISR_counter1" 2 307 "int8"
V G "sample_timer_sec" 2 307 "int8"
V G "debug_timer_sec" 2 307 "int8"
V G "ISR_counter0" 2 308 "int16"
V G "ISR_counter0_2" 2 308 "int16"
V G "SW_fridge_time" 2 310 "int16"
V G "SW_freezer_time" 2 310 "int16"
V G "started1" 2 311 "int8"
V G "started2" 2 311 "int8"
V G "poweredup_mins" 2 312 "int8"
V G "x" 2 313 "int8" "general loop counter etc"
V G "adc_val" 2 314 "int16"
V G "min_val" 2 315 "sint8"
V G "max_val" 2 315 "sint8"
V G "prev_restart_reason" 2 316 "int8"
V G "curr_restart_reason" 2 316 "int8" "static signed int8 sample_run_f, sample_run_k, sample_stop_f, sample_stop_k;"
V G "last_error" 2 320 "int8[40]"
V G "config" 2 322 "ConfigStruct"
V G "Temps" 2 323 "TempsStruct"
V G "LEDs" 2 324 "LEDStruct"
V G "Alarms" 2 325 "AlarmStruct"
V G "SampleFridge" 2 326 "SampleStruct"
V G "SampleFridgePot" 2 327 "SampleStructPot"
V G "SampleFreezer" 2 328 "SampleStruct"
V G "SampleFreezerPot" 2 329 "SampleStructPot"
V G "Status" 2 330 "StatusStruct" "signed int8 CONST FridgeLookup[8] = {POT_OFF,5,4,3,2,1,0,POT_MAX};"
C L "main" 2 303 2 "FUNCTION"
C L "main" 2 338 1 "*"
F G "main" 2 340 "void()"
F G "initialize_hardware" 2 342 "void()"
F G "initialize_software" 2 344 "void()"
F G "doDecision_Freezer" 2 346 "void()"
F G "doDecision_Fridge" 2 348 "void()"
F G "doActions" 2 349 "void()"
F G "setLEDs" 2 351 "void()"
F G "updateAlarms" 2 352 "void()"
F G "debug2" 2 354 "void()"
V L "c" 2 354 "int8"
F G "STREAM_DEBUG" 2 356 "void()"
V L "c" 2 356 "int8" "#include <stdlibm.h> //malloc"
D G "_STRING" 3 12 ""
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 21 "unsigned int8"
D G "wchar_t" 4 22 "char"
D G "NULL" 4 23 "0"
D G "offsetof" 4 25 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "STREAM_DEBUG" 3 19 10 "FUNCTION"
F G "memmove" 3 34 "*int8()"
V L "s1" 3 34 "*int8"
V L "s2" 3 34 "*int8"
V L "n" 3 34 "int8"
V L "sc1" 3 36 "*int8"
V L "sc2" 3 37 "*int8"
D G "strcopy" 3 54 "strcpy"
C L "strncpy" 3 19 4 "FUNCTION"
F G "strncpy" 3 61 "*int8()"
V L "s1" 3 61 "*int8"
V L "s2" 3 61 "*int8"
V L "n" 3 61 "int8"
V L "s" 3 63 "*int8"
C L "strcat" 3 19 3 "FUNCTION"
F G "strcat" 3 78 "*int8()"
V L "s1" 3 78 "*int8"
V L "s2" 3 78 "*int8"
V L "s" 3 80 "*int8"
C L "strncat" 3 19 2 "FUNCTION"
F G "strncat" 3 96 "*int8()"
V L "s1" 3 96 "*int8"
V L "s2" 3 96 "*int8"
V L "n" 3 96 "int8"
V L "s" 3 98 "*int8"
C L "memcmp" 3 19 3 "FUNCTION"
F G "memcmp" 3 120 "sint8()"
V L "s1" 3 120 "*int8"
V L "s2" 3 120 "*int8"
V L "n" 3 120 "int8"
V L "su1" 3 122 "*int8"
V L "su2" 3 122 "*int8"
C L "strcmp" 3 19 2 "FUNCTION"
F G "strcmp" 3 134 "sint8()"
V L "s1" 3 134 "*int8"
V L "s2" 3 134 "*int8"
C L "strcoll" 3 19 2 "FUNCTION"
F G "strcoll" 3 144 "sint8()"
V L "s1" 3 144 "*int8"
V L "s2" 3 144 "*int8"
C L "strncmp" 3 19 4 "FUNCTION"
F G "strncmp" 3 157 "sint8()"
V L "s1" 3 157 "*int8"
V L "s2" 3 157 "*int8"
V L "n" 3 157 "int8"
C L "strxfrm" 3 19 3 "FUNCTION"
F G "strxfrm" 3 169 "int8()"
V L "s1" 3 169 "*int8"
V L "s2" 3 169 "*int8"
V L "n" 3 169 "int8"
V L "s" 3 171 "*int8"
V L "n1" 3 172 "int8"
C L "memchr" 3 19 3 "FUNCTION"
F G "memchr" 3 191 "*int8()"
V L "s" 3 191 "*int8"
V L "c" 3 191 "int8"
V L "n" 3 191 "int8"
V L "uc" 3 193 "int8"
V L "su" 3 194 "*int8"
C L "strchr" 3 19 2 "FUNCTION"
F G "strchr" 3 205 "*int8()"
V L "s" 3 205 "*int8"
V L "c" 3 205 "int8"
C L "strcspn" 3 19 4 "FUNCTION"
F G "strcspn" 3 217 "int8()"
V L "s1" 3 217 "*int8"
V L "s2" 3 217 "*int8"
V L "sc1" 3 219 "*int8"
V L "sc2" 3 219 "*int8"
C L "strpbrk" 3 19 4 "FUNCTION"
F G "strpbrk" 3 232 "*int8()"
V L "s1" 3 232 "*int8"
V L "s2" 3 232 "*int8"
V L "sc1" 3 234 "*int8"
V L "sc2" 3 234 "*int8"
C L "strrchr" 3 19 2 "FUNCTION"
F G "strrchr" 3 247 "*int8()"
V L "s" 3 247 "*int8"
V L "c" 3 247 "int8"
V L "p" 3 249 "*int8"
C L "strspn" 3 19 2 "FUNCTION"
F G "strspn" 3 262 "int8()"
V L "s1" 3 262 "*int8"
V L "s2" 3 262 "*int8"
V L "sc1" 3 264 "*int8"
V L "sc2" 3 264 "*int8"
C L "strstr" 3 19 6 "FUNCTION"
F G "strstr" 3 281 "*int8()"
V L "s1" 3 281 "*int8"
V L "s2" 3 281 "*int8"
V L "s" 3 283 "*int8"
V L "t" 3 283 "*int8"
C L "strtok" 3 19 13 "FUNCTION"
F G "strtok" 3 320 "*int8()"
V L "s1" 3 320 "*int8"
V L "s2" 3 320 "*int8"
V L "beg" 3 322 "*int8"
V L "end" 3 322 "*int8"
V L "save" 3 323 "*int8"
C L "strlen" 3 19 6 "FUNCTION"
F G "strlen" 3 369 "int8()"
V L "s" 3 369 "*int8"
V L "sc" 3 371 "*int8"
C L "stricmp" 3 19 2 "FUNCTION"
F G "stricmp" 3 380 "sint8()"
V L "s1" 3 380 "*int8"
V L "s2" 3 380 "*int8"
C L "strlwr" 3 19 3 "FUNCTION"
F G "strlwr" 3 394 "*int8()"
V L "s" 3 394 "*int8"
V L "p" 3 396 "*int8"
F G "TIMER0_isr" 6 2 "void()" "OF every 1ms"
C L "TIMER0_isr" 6 5 1 "FUNCTION"
C L "TIMER0_isr" 6 5 1 "FUNCTION"
C L "TIMER0_isr" 6 5 1 "FUNCTION"
C L "TIMER0_isr" 6 5 1 "FUNCTION"
F G "TIMER1_isr" 6 126 "void()" "OF 524ms"
C L "TIMER1_isr" 6 5 1 "FUNCTION"
C L "TIMER1_isr" 6 5 1 "FUNCTION"
C L "TIMER2_isr" 6 5 1 "FUNCTION"
F G "TIMER2_isr" 6 148 "void()" "ISR 1ms"
C L "TIMER2_isr" 6 5 1 "FUNCTION"
C L "TIMER2_isr" 6 5 1 "FUNCTION"
C L "TIMER2_isr" 6 5 3 "FUNCTION"
C L "TIMER2_isr" 6 5 26 "FUNCTION"
C L "TIMER2_isr" 6 5 1 "FUNCTION"
C L "TIMER2_isr" 6 5 1 "FUNCTION"
C L "TIMER2_isr" 6 5 2 "FUNCTION"
F G "TIMER3_isr" 6 239 "void()" "131ms"
D G "IS_LEAP" 7 1 "(year) (year%4 == 0)"
F G "getAvgADC" 7 2 "int16()"
V L "channel" 7 2 "int8"
V L "samples" 7 2 "int8"
F G "fillEEPROM" 7 3 "void()"
V L "byte_start" 7 3 "int8"
V L "byte_end" 7 3 "int8"
F G "clearEEPROM" 7 4 "void()"
V L "byte_start" 7 4 "int8"
V L "byte_end" 7 4 "int8"
F G "eeprom_put" 7 5 "void()"
V L "ptr" 7 5 "*int8"
V L "num" 7 5 "int8"
V L "addr" 7 5 "int8"
F G "eeprom_get" 7 6 "void()"
V L "ptr" 7 6 "*int8"
V L "num" 7 6 "int8"
V L "addr" 7 6 "int8" "* Read X samples from ADC, average them and return result"
C L "eeprom_get" 8 1 1 "*"
F G "getAvgADC" 8 5 "int16()"
V L "channel" 8 5 "int8"
V L "samples" 8 5 "int8"
V L "temp_adc_value" 8 7 "int16"
V L "x" 8 8 "int8"
C L "getAvgADC" 8 1 1 "FUNCTION"
C L "fillEEPROM" 8 26 1 "*"
F G "fillEEPROM" 8 29 "void()"
V L "byte_start" 8 29 "int8"
V L "byte_end" 8 29 "int8"
V L "x" 8 31 "int8"
C L "clearEEPROM" 8 36 1 "*"
F G "clearEEPROM" 8 39 "void(int8 byte_end)"
V L "byte_start" 8 39 "int8"
V L "byte_end" 8 39 "int8"
V L "x" 8 41 "int8"
C L "eeprom_put" 8 36 7 "FUNCTION"
C L "eeprom_put" 8 57 1 "*"
F G "eeprom_put" 8 60 "void(int8 byte_end)"
V L "ptr" 8 60 "*int8"
V L "num" 8 60 "int8"
V L "addr" 8 60 "int8"
V L "count" 8 62 "int8"
C L "eeprom_get" 8 68 1 "*"
F G "eeprom_get" 8 71 "void(int8 num,int8 addr)"
V L "ptr" 8 71 "*int8"
V L "num" 8 71 "int8"
V L "addr" 8 71 "int8"
V L "count" 8 73 "int8"
F G "readTempFreezer" 9 2 "void(int8 num,int8 addr)"
F G "readTempFridge" 9 4 "void(int8 addr)"
F G "readPotFreezer" 9 6 "void()"
F G "readPotFridge" 9 8 "void()"
F G "SensorADToDegrees" 9 10 "sint8()"
V L "ad_val" 9 10 "int16"
V L "is_fridge" 9 10 "int8" ""
F G "readTempFreezer" 10 5 "void()"
V L "tmp" 10 7 "sint8"
C L "readTempFreezer" 10 17 1 "FUNCTION"
C L "readTempFreezer" 10 17 1 "FUNCTION"
C L "readTempFreezer" 10 17 1 "FUNCTION"
C L "readTempFreezer" 10 17 1 "FUNCTION"
C L "readTempFreezer" 10 17 1 "FUNCTION"
C L "readTempFreezer" 10 17 1 "FUNCTION"
C L "readTempFreezer" 10 17 1 "FUNCTION"
C L "readTempFreezer" 10 17 1 "FUNCTION"
C L "readTempFreezer" 10 17 1 "FUNCTION"
C L "readTempFreezer" 10 17 1 "FUNCTION"
C L "readTempFreezer" 10 17 1 "FUNCTION"
F G "readTempFridge" 10 116 "void()"
V L "tmp" 10 118 "sint8"
C L "readTempFridge" 10 17 1 "FUNCTION"
C L "readTempFridge" 10 17 1 "FUNCTION"
C L "readTempFridge" 10 17 1 "FUNCTION"
C L "readTempFridge" 10 17 1 "FUNCTION"
C L "readTempFridge" 10 17 1 "FUNCTION"
C L "readTempFridge" 10 17 1 "FUNCTION"
C L "readTempFridge" 10 17 1 "FUNCTION"
C L "readTempFridge" 10 17 1 "FUNCTION"
C L "readTempFridge" 10 17 1 "FUNCTION"
C L "readTempFridge" 10 17 1 "FUNCTION"
C L "readTempFridge" 10 17 1 "FUNCTION"
C L "readTempFridge" 10 17 1 "FUNCTION"
C L "readTempFridge" 10 17 2 "FUNCTION"
C L "readTempFridge" 10 17 1 "FUNCTION"
C L "readPotFreezer" 10 226 1 "*"
F G "readPotFreezer" 10 231 "void()"
C L "readPotFreezer" 10 226 1 "FUNCTION"
C L "readPotFreezer" 10 226 1 "FUNCTION"
C L "readPotFreezer" 10 226 1 "FUNCTION"
C L "readPotFreezer" 10 226 1 "FUNCTION"
C L "readPotFreezer" 10 226 1 "FUNCTION"
C L "readPotFreezer" 10 243 1 "*"
C L "readPotFreezer" 10 243 1 "FUNCTION"
C L "readPotFreezer" 10 243 1 "FUNCTION"
C L "readPotFreezer" 10 243 1 "FUNCTION"
C L "readPotFreezer" 10 243 1 "FUNCTION"
C L "readPotFreezer" 10 243 1 "FUNCTION"
C L "readPotFreezer" 10 243 1 "FUNCTION"
C L "readPotFreezer" 10 243 1 "FUNCTION"
C L "readPotFreezer" 10 243 3 "FUNCTION"
C L "readPotFreezer" 10 243 1 "FUNCTION"
C L "readPotFreezer" 10 243 1 "FUNCTION"
F G "readPotFridge" 10 310 "void()"
C L "readPotFridge" 10 243 1 "FUNCTION"
C L "readPotFridge" 10 243 1 "FUNCTION"
C L "readPotFridge" 10 243 1 "FUNCTION"
C L "readPotFridge" 10 243 1 "FUNCTION"
C L "readPotFridge" 10 322 1 "*"
C L "readPotFridge" 10 322 1 "FUNCTION"
C L "readPotFridge" 10 322 1 "FUNCTION"
C L "readPotFridge" 10 322 1 "FUNCTION"
C L "readPotFridge" 10 322 2 "FUNCTION"
C L "readPotFridge" 10 322 1 "FUNCTION"
C L "readPotFridge" 10 322 1 "FUNCTION"
C G "" 10 380 1 "*"
C G "" 10 380 1 "*"
F G "SensorADToDegrees" 10 385 "sint8()"
V L "ad_val" 10 385 "int16"
V L "is_fridge" 10 385 "int8"
V L "temp" 10 387 "sint8"
V L "millivolts" 10 388 "int32" "At this point, 1024 counts would equal 5v (you can never actually get 1024 counts, but this is the scaling from the ADC)."
C L "SensorADToDegrees" 10 380 9 "FUNCTION"
C L "SensorADToDegrees" 10 380 1 "FUNCTION"
F G "main" 0 41 "void()"
C L "main" 0 49 1 "FUNCTION"
C L "main" 0 49 1 "FUNCTION"
C L "main" 0 49 1 "FUNCTION"
C L "main" 0 49 2 "FUNCTION"
F G "initialize_hardware" 0 136 "void()"
C L "initialize_hardware" 0 49 1 "FUNCTION"
C L "initialize_hardware" 0 49 1 "FUNCTION"
C L "initialize_hardware" 0 49 2 "FUNCTION"
C L "initialize_hardware" 0 49 3 "FUNCTION"
C L "initialize_hardware" 0 49 3 "FUNCTION"
C L "initialize_hardware" 0 49 1 "FUNCTION"
F G "initialize_software" 0 169 "void()"
C L "initialize_software" 0 49 4 "FUNCTION"
C L "initialize_software" 0 49 1 "FUNCTION"
C L "initialize_software" 0 49 1 "FUNCTION"
F G "setLEDs" 0 207 "void()"
C L "setLEDs" 0 49 1 "FUNCTION"
C L "setLEDs" 0 213 1 "*"
C L "setLEDs" 0 213 1 "FUNCTION"
C L "setLEDs" 0 230 1 "*"
C L "setLEDs" 0 230 1 "FUNCTION"
C L "setLEDs" 0 230 1 "FUNCTION"
C L "setLEDs" 0 251 1 "*"
C L "doDecision_Freezer" 0 272 1 "*"
C L "doDecision_Freezer" 0 274 1 "*"
F G "doDecision_Freezer" 0 278 "void()"
C L "doDecision_Freezer" 0 274 1 "FUNCTION"
C L "doDecision_Freezer" 0 274 3 "FUNCTION"
C L "doDecision_Freezer" 0 274 1 "FUNCTION"
C L "doDecision_Freezer" 0 274 1 "FUNCTION"
C L "doDecision_Freezer" 0 274 1 "FUNCTION"
C L "doDecision_Freezer" 0 274 1 "FUNCTION"
C L "doDecision_Freezer" 0 274 1 "FUNCTION"
C L "doDecision_Freezer" 0 274 1 "FUNCTION"
C L "doDecision_Freezer" 0 274 1 "FUNCTION"
C L "doDecision_Freezer" 0 274 1 "FUNCTION"
C L "doDecision_Freezer" 0 274 1 "FUNCTION"
C L "doDecision_Freezer" 0 341 1 "*"
C L "doDecision_Freezer" 0 341 1 "FUNCTION"
C L "doDecision_Freezer" 0 341 1 "FUNCTION"
C L "doDecision_Freezer" 0 352 1 "*"
C L "doDecision_Freezer" 0 352 1 "FUNCTION"
C L "doDecision_Fridge" 0 360 1 "*"
F G "doDecision_Fridge" 0 364 "void()"
C L "doDecision_Fridge" 0 360 1 "FUNCTION"
C L "doDecision_Fridge" 0 360 1 "FUNCTION"
C L "doDecision_Fridge" 0 360 1 "FUNCTION"
C L "doDecision_Fridge" 0 360 1 "FUNCTION"
C L "doDecision_Fridge" 0 360 1 "FUNCTION"
C L "doDecision_Fridge" 0 360 1 "FUNCTION"
C L "doDecision_Fridge" 0 360 1 "FUNCTION"
C L "doDecision_Fridge" 0 360 1 "FUNCTION"
C L "doDecision_Fridge" 0 360 1 "FUNCTION"
C L "doDecision_Fridge" 0 360 1 "FUNCTION"
C L "doDecision_Fridge" 0 360 1 "FUNCTION"
C L "doDecision_Fridge" 0 421 1 "*"
C L "doDecision_Fridge" 0 421 1 "FUNCTION"
C L "doDecision_Fridge" 0 430 1 "*"
C L "doDecision_Fridge" 0 430 1 "FUNCTION"
C L "doActions" 0 439 1 "*"
F G "doActions" 0 442 "void()"
F G "updateAlarms" 0 476 "void()"
V L "tmp1" 0 478 "sint8"
V L "tmp2" 0 478 "sint8"
C L "updateAlarms" 0 439 1 "FUNCTION"
C L "updateAlarms" 0 439 1 "FUNCTION"
C L "updateAlarms" 0 439 1 "FUNCTION"
C L "updateAlarms" 0 439 1 "FUNCTION"
C L "updateAlarms" 0 439 1 "FUNCTION"
C L "updateAlarms" 0 439 1 "FUNCTION"
F G "STREAM_DEBUG" 0 592 "void()"
V L "c" 0 592 "int8"
C L "STREAM_DEBUG" 0 439 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "read_external_memory" 3 0
F B "write_external_memory" 3 0
F B "setup_external_memory" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 0
F B "setup_adc_ports" 1 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 1 2
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
